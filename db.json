{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign.png","path":"images/favatar/idesign.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/meituan.jpg","path":"images/favatar/meituan.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/techblog.jpg","path":"images/favatar/techblog.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"c905f720e7ee3c162b6a8b02512c470183e95065","modified":1573202490771},{"_id":"source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1573110895598},{"_id":"source/_data/links.yml","hash":"6c0ac7f8c5e441f40e816e7a171cbaf878a62023","modified":1573110895599},{"_id":"source/_drafts/what-is-unit-test.md","hash":"8f01618a79ec6168ebc45500ff2516217aa7be11","modified":1591151001001},{"_id":"source/_posts/element-code-learning.md","hash":"8fc9b472f6649b433b00dfe04eda6da92ecd8256","modified":1579141166120},{"_id":"source/_posts/fetch-api.md","hash":"5ec89b1a76be725075f0670266138e43d2cb43ef","modified":1650120670268},{"_id":"source/_posts/hello-hexo.md","hash":"7181c0442c16d041ed42c25dfd21df31ee24e91c","modified":1574305891103},{"_id":"source/_posts/hexo-theme-pure.md","hash":"f7866dcd3dd56f502ee34a610c8d2d03a5fc6b39","modified":1573110895601},{"_id":"source/_posts/mysql-dump-source.md","hash":"b889c7995d2719f78bd9e93aaf0c65ebd13ce4cc","modified":1650120670269},{"_id":"source/_posts/how-to-deploy-hexo-to-self-server.md","hash":"34484f1c25b06e1dbf75e584f681227ace645972","modified":1574300938091},{"_id":"source/_posts/so-simple-to-write-blog.md","hash":"2b808c1fa9b36058f4dfa7f9cd6e213b2692a46b","modified":1590661308763},{"_id":"source/_posts/summary-and-relection-in-2019.md","hash":"2dc6655483298ce05fb5666020bb9abccba65b97","modified":1578876846415},{"_id":"source/_posts/vue-cli3-change-build-dir.md","hash":"8ff63882715b490915862836c244b13472407093","modified":1650120865955},{"_id":"source/_posts/taro-init-project.md","hash":"866b5c1471f64fee830f0252dfc930dbad6b5c2b","modified":1650167762026},{"_id":"source/_posts/vuepress-01-first-learning.md","hash":"5b2ac83f6e312c7cd4503a9c4fa3e519ab688c74","modified":1590742616969},{"_id":"source/_posts/vuepress-02-basic-config.md","hash":"19b789b09380040a962cbd279efbd79c8b3b73ee","modified":1590742614101},{"_id":"source/_posts/vuepress-03-default-theme-config.md","hash":"c79b953f7a8664779029f35f5fb7be9c584b70f0","modified":1590742610879},{"_id":"source/about/index.md","hash":"bf478d10ece23e2dc43cd046fc12f52c38520664","modified":1650120670272},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1573110895602},{"_id":"source/categories/index.md","hash":"37b25b75b646d31a2a5d9195b1a0af7e83e76884","modified":1573110895603},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1573110895603},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1573110895604},{"_id":"source/tags/index.md","hash":"da8b0e1317fdaa8a636a117d0fe82f2dbd06e7a4","modified":1573110895604},{"_id":"source/_posts/how-to-deploy-hexo-to-self-server/1573175297499.png","hash":"fde1ca027df76caf3eb5c3b8fd65e289a0d8c2c7","modified":1573175297515},{"_id":"source/_posts/so-simple-to-write-blog/1590654652879.png","hash":"e07b0c9c7a4675babc413ba692b8574d56a4bc8c","modified":1590654652911},{"_id":"source/_posts/so-simple-to-write-blog/1590655829098.png","hash":"bee2c3e41e4f3a0c7485f593b7b3e20818987877","modified":1590655829141},{"_id":"source/_posts/so-simple-to-write-blog/blog.sh","hash":"a45b7844a7212ab40f4fcfed9fa2c94f9f88e358","modified":1590661109736},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510148963.png","hash":"d02d5668441030c08ff364f77c6191c7b0a1bc17","modified":1579510148988},{"_id":"source/_posts/vuepress-03-default-theme-config/1579511258773.png","hash":"aa7998184d0c5ec717389afc5755949bbf2d3c6d","modified":1579511258840},{"_id":"source/_posts/vuepress-03-default-theme-config/1579512507035.png","hash":"f49ba81539e99d153793b97fec3ee09f3053b88f","modified":1579512507061},{"_id":"source/_posts/vuepress-03-default-theme-config/1579513820591.png","hash":"a4e111d3de6aed5bbe1b60994044c6de7c3ba2cc","modified":1579513820631},{"_id":"source/_posts/so-simple-to-write-blog/1590655537760.png","hash":"d2f98c329e3052603d2136c395ba72ac3b50a738","modified":1590655537788},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510936334.png","hash":"243d1afa31aa20009f660fc760ef3662892cfcb3","modified":1579510936387},{"_id":"source/_posts/so-simple-to-write-blog/1590656080311.png","hash":"0f37c88703d1077862ce653ee7e20ce7f45dd103","modified":1590656080436},{"_id":"source/_posts/so-simple-to-write-blog/3064F5DA.gif","hash":"b6549912c9883c164e5e5bd9833ec3b4511084c9","modified":1590659169122},{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1573124236407},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1573124236408},{"_id":"themes/pure/README.cn.md","hash":"7facc2f8aadaf4c172dfc931bebcc37b9ef3d7e8","modified":1573124236409},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1573124236410},{"_id":"themes/pure/_config.yml","hash":"d0e19af883aee37210eeff6815685ae9665ac6f9","modified":1573469889847},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1573124236412},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1573124236501},{"_id":"themes/pure/.git.rename/HEAD","hash":"509e0f78e789c5517a73f9884e9c4d0c89abf07b","modified":1573124236348},{"_id":"themes/pure/.git.rename/config","hash":"37df208c9a09955c6de2392e1495fe5f8da9d24f","modified":1573124236348},{"_id":"themes/pure/.git.rename/description","hash":"88d76a8724b84a5bbcc3bea08650bc679a0b3da6","modified":1573124236350},{"_id":"themes/pure/.git.rename/index","hash":"8a97c32e705080691491200cd785773b3b2f17d1","modified":1573124236367},{"_id":"themes/pure/.git.rename/packed-refs","hash":"33459f290ccb56e113bd071a2e230e672ca48055","modified":1573124236404},{"_id":"themes/pure/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1573124236422},{"_id":"themes/pure/languages/en.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1573124236423},{"_id":"themes/pure/languages/zh-CN.yml","hash":"399061d959807b41e333808b4c7851ca290a82fe","modified":1573124236424},{"_id":"themes/pure/languages/zh-TW.yml","hash":"387ad2ca1b2a01dac36f768a6116a2033c3ac142","modified":1573124236425},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1573124236482},{"_id":"themes/pure/layout/archive.ejs","hash":"90fa5b0d8f081d0bde33b2784f66e6a80e5b0dac","modified":1573124236484},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1573124236485},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1573124236486},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1573124236488},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1573124236488},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1573124236490},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1573124236491},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1573124236492},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1573124236495},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1573124236498},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1573124236499},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1573124236500},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1573124236534},{"_id":"themes/pure/source/favicon.png","hash":"d51ca3da3e44a4b89ffc1973a9113c30858d3ab0","modified":1573124236540},{"_id":"themes/pure/.git.rename/hooks/applypatch-msg.sample","hash":"61f0ed9af9a16dbba9b834edfb657f07aa10125d","modified":1573124236351},{"_id":"themes/pure/.git.rename/hooks/fsmonitor-watchman.sample","hash":"6f2154c4968380d98c0af71eef8ce335e1b25814","modified":1573124236354},{"_id":"themes/pure/.git.rename/hooks/commit-msg.sample","hash":"e44c3d173580f6b4d8ee7f9b963d252af9902703","modified":1573124236352},{"_id":"themes/pure/.git.rename/hooks/post-update.sample","hash":"6c00d034115de8f56eba4ded1eba7ffc73b332f6","modified":1573124236355},{"_id":"themes/pure/.git.rename/hooks/pre-applypatch.sample","hash":"7863e8a9fef55740491ab4429a13081a20a1dad9","modified":1573124236356},{"_id":"themes/pure/.git.rename/hooks/pre-commit.sample","hash":"b2004f56774b38f9c2b69920e8776614c123776a","modified":1573124236358},{"_id":"themes/pure/.git.rename/hooks/pre-push.sample","hash":"ac10c067e42e887ed93052dbece70922812546f3","modified":1573124236359},{"_id":"themes/pure/.git.rename/hooks/pre-rebase.sample","hash":"afa580632af0424e3af1a24e5c1e8ff6b2abb3b7","modified":1573124236360},{"_id":"themes/pure/.git.rename/hooks/pre-receive.sample","hash":"bfff8781c853c3d554371cc50e63ec70eb377711","modified":1573124236361},{"_id":"themes/pure/.git.rename/hooks/prepare-commit-msg.sample","hash":"255ff34ec71029bb23cf1257514d52eb99c9c8c1","modified":1573124236363},{"_id":"themes/pure/.git.rename/hooks/update.sample","hash":"df9f68bdcd0e7c6cee8cdce7b17f8ff7e625847b","modified":1573124236365},{"_id":"themes/pure/.git.rename/info/exclude","hash":"0214ce0925395605f10f65300bc1e4871dd9441e","modified":1573124236368},{"_id":"themes/pure/.git.rename/logs/HEAD","hash":"8bf208110870d58604667978ea509b0bd46a9214","modified":1573124236369},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1573124236413},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1573124236414},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1573124236415},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1573124236416},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1573124236418},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1573124236418},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1573124236419},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1573124236420},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1573124236421},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1573124236426},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1573124236427},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1573124236428},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1573124236429},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1573124236430},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1573124236431},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1573124236432},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1573124236433},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"e4810f8e03986d5a8afdf4c0932814a3d0db9ffe","modified":1573124236434},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1573124236435},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1573124236435},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1573124236436},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1573124236437},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1573124236438},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"8af3bcfc07c344cefa0655dbe83f3c1a55954899","modified":1573124236439},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"fdc5ac554e375f2e8b1e4dbe77cedda692f1228e","modified":1573124236439},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"bae5b4eb8b6415dc988bda88be1c4f8e252b1844","modified":1573124236440},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"be30d7eb0b391759ac329b8a7b410d758ff8b032","modified":1573124236451},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"335a906404dada013d83508244e992c7a26fa879","modified":1573124236452},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1573124236453},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1573124236462},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1573124236463},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"1e4bad0e7d04352e3634994f413c16b0001efa4a","modified":1573124236464},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1573124236465},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1573124236466},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1573124236467},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"e2f8ba48f7a659c74d5fc38930b873c167671044","modified":1573124236468},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1573124236468},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1573124236470},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1573124236469},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1573124236471},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1573124236472},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1573124236474},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1573124236474},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1573124236475},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1573124236478},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1573124236480},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1573124236480},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1573124236481},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1573124236541},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1573124236545},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1573124236553},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1573124236553},{"_id":"themes/pure/source/images/thumb-default.png","hash":"ec73772f4d88964c79c8318da9481d800fc3cbb0","modified":1573124236571},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1573124236572},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1573124236573},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1573124236577},{"_id":"themes/pure/.git.rename/refs/heads/master","hash":"9dec6ca98201d8734a0bb13361c901c605d64792","modified":1573124236405},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1573124236441},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1573124236442},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"e2180ba37bd5ec5d774e50e49e48daf086676db6","modified":1573124236443},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1573124236443},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1573124236445},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1573124236445},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"15255c9b1644a79be097f6af26f0317a507b0690","modified":1573124236446},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1573124236447},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1573124236448},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1573124236449},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1573124236450},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1573124236451},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1573124236453},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1573124236454},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1573124236455},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1573124236456},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"6234ef13a1290f8849ca850641c0be0ab6af8cef","modified":1573124236457},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1573124236457},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1573124236458},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1573124236459},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1573124236459},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1573124236460},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1573124236461},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"e2d44d5af43d1b91350ba333e56657918c29d432","modified":1573124236557},{"_id":"themes/pure/source/images/favatar/idesign.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1573124236564},{"_id":"themes/pure/source/images/favatar/meituan.jpg","hash":"e92c43934927c049b59d9bf3de557917ee77efe1","modified":1573124236568},{"_id":"themes/pure/source/images/favatar/techblog.jpg","hash":"db9db2e6031b8a54a8aad631de3160c1e1b630d2","modified":1573124236569},{"_id":"themes/pure/.git.rename/logs/refs/heads/master","hash":"8bf208110870d58604667978ea509b0bd46a9214","modified":1573124236370},{"_id":"themes/pure/.git.rename/refs/remotes/origin/HEAD","hash":"e72f7364331a01c35feea3858c09e16db1631660","modified":1573124236406},{"_id":"themes/pure/.git.rename/logs/refs/remotes/origin/HEAD","hash":"8bf208110870d58604667978ea509b0bd46a9214","modified":1573124236371},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1573124236503},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1573124236505},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1573124236508},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1573124236511},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1573124236513},{"_id":"themes/pure/source/images/avatar.jpeg","hash":"13c7bb886d7880a382b180159ba448b1ef949d2e","modified":1573124236555},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1573124236582},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1573124236602},{"_id":"themes/pure/.git.rename/objects/pack/pack-bb14913eeca1c1b8eab985f87845b342ecef88ec.idx","hash":"69e68fcfa314944a7d6d571491a32f0a012fedfe","modified":1573124236372},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"be0dc6088b900fcc5a89ac2799e9a871146333e0","modified":1573124236561},{"_id":"themes/pure/source/css/style.css","hash":"ff0731ff99c03b9120a60e1a70df78d209f7cbf4","modified":1573124236537},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1573124236539},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1573124236551},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1573124236584},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1573124236587},{"_id":"source/_posts/so-simple-to-write-blog/20200528_171021.gif","hash":"59ae1634056cde3432b3e1554ff2518ba6a046c7","modified":1590657089149},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1573124236532},{"_id":"source/_posts/so-simple-to-write-blog/20200528_161248.gif","hash":"a5c19d5e20e87f6e4b91d09f63ad1c3a6cec0074","modified":1590654898667},{"_id":"source/_posts/so-simple-to-write-blog/20200528_175335.gif","hash":"067b46477580d23277c6f3e0c8c9aace5dd98f28","modified":1590659903154},{"_id":"themes/pure/.git.rename/objects/pack/pack-bb14913eeca1c1b8eab985f87845b342ecef88ec.pack","hash":"cfe7226e94e90aa42ced1239b6060ed7d142618e","modified":1573124236402},{"_id":"source/_posts/so-simple-to-write-blog/20200528_172321.gif","hash":"28488d67d03faa64e63e29abdcab9e53cc427ecd","modified":1590657983576},{"_id":"public/baidusitemap.xml","hash":"66eec4f6d9f36aba7ae00021c6e6ef62054dddb6","modified":1650167783799},{"_id":"public/atom.xml","hash":"63b6139a79a87785d33381b8d7ec69d5a0458119","modified":1650167783799},{"_id":"public/content.json","hash":"93e3e52b5196ddd01efcb01331a454be7118362c","modified":1650167783799},{"_id":"public/sitemap.xml","hash":"1380e517d6e7273a717d5fcd430855217d46e47e","modified":1650167783799},{"_id":"public/404.html","hash":"41f9a3481be087aa7696f5f6736c4b6355b46062","modified":1650167783799},{"_id":"public/about/index.html","hash":"d4c13852d4e3616af638879315b402f438d07131","modified":1650167783799},{"_id":"public/books/index.html","hash":"83ae3c6192fcb39a19a34793abd8739def7430b7","modified":1650167783799},{"_id":"public/categories/index.html","hash":"f1ef3d74e6180df976eae21888ad6e5c3b6c4aa1","modified":1650167783799},{"_id":"public/links/index.html","hash":"da7e94f2a2fcdf71b7ebb38890ad526a672670e5","modified":1650167783799},{"_id":"public/repository/index.html","hash":"21fc41b2e688cbba01898f9598784da6be090157","modified":1650167783799},{"_id":"public/tags/index.html","hash":"8d5bd5beb93d07c9d44c023aacf50e90adb943e3","modified":1650167783799},{"_id":"public/2022/04/16/taro-init-project/index.html","hash":"ad11610d844eb6f05a7c56ac296fae92acf73859","modified":1650167783799},{"_id":"public/2021/09/07/fetch-api/index.html","hash":"e30028117104643d49a24c752c3fdbf5e276af9a","modified":1650167783799},{"_id":"public/2021/09/02/vue-cli3-change-build-dir/index.html","hash":"922bfaa5895b42df56994842bcfc3f3744658b11","modified":1650167783799},{"_id":"public/2021/09/01/mysql-dump-source/index.html","hash":"aeec97276e4228ea1a25a414244ec47811bd332a","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/index.html","hash":"83b441c6d0119ff260e78c3de5718d76120e1c17","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/index.html","hash":"4c98f06b09e45e13c60eefdec7f9b2acad5f36ca","modified":1650167783799},{"_id":"public/2020/01/16/vuepress-01-first-learning/index.html","hash":"7a7f76e12295f3e2f217a6e831fac25218f4af35","modified":1650167783799},{"_id":"public/2020/01/16/vuepress-02-basic-config/index.html","hash":"780852f74d3ccf7652c3e4cb558b2e1a1cbc7dec","modified":1650167783799},{"_id":"public/2020/01/16/element-code-learning/index.html","hash":"d89ff46dd75fbadff075b9c9393ba3d88c52b92c","modified":1650167783799},{"_id":"public/2019/12/12/summary-and-relection-in-2019/index.html","hash":"509d71e43f82326976a6a964bdc3d974036de9f7","modified":1650167783799},{"_id":"public/2019/11/08/how-to-deploy-hexo-to-self-server/index.html","hash":"396dcc4bd3e911bc92d8bd1e0503b27e20cabb50","modified":1650167783799},{"_id":"public/2019/11/05/hexo-theme-pure/index.html","hash":"2f54117a729fb899ffa2da67de87b9234fb77a1e","modified":1650167783799},{"_id":"public/2019/11/04/hello-hexo/index.html","hash":"3766c9fe258f7a9464d5ab71c81b93580d8416e7","modified":1650167783799},{"_id":"public/archives/index.html","hash":"3b848e2983ee4d356bea983fbd5106148814aa1a","modified":1650167783799},{"_id":"public/archives/page/2/index.html","hash":"c7a7e53fd76be26e0ae1bf4bd3a64090ccea3734","modified":1650167783799},{"_id":"public/archives/2019/index.html","hash":"c6ea2c51efc096827909485035b6daf5662c585d","modified":1650167783799},{"_id":"public/archives/2019/11/index.html","hash":"12bfa4d6bd3c358eed8318b4a6458616c7092ea4","modified":1650167783799},{"_id":"public/archives/2019/12/index.html","hash":"a280fb722d410a6f5249f2014a1a3fe3daa9c138","modified":1650167783799},{"_id":"public/archives/2020/index.html","hash":"34910e68da1339f3a8c8bea7cde4b957d7d7fc69","modified":1650167783799},{"_id":"public/archives/2020/01/index.html","hash":"4d055b7a9fa0d6bfb0d81e2ead60c23ba5e7c896","modified":1650167783799},{"_id":"public/archives/2020/05/index.html","hash":"b0163ec96b461a30af94021bd272c29dbad771d0","modified":1650167783799},{"_id":"public/archives/2021/index.html","hash":"f3277c6a2c421d240d2629595bb54d6cc5ed3c6e","modified":1650167783799},{"_id":"public/archives/2021/09/index.html","hash":"f8e56876f2e36ddcd24125a6e4aa30f73edde970","modified":1650167783799},{"_id":"public/archives/2022/index.html","hash":"044652f4865f93072adba35fca4561966efe8e17","modified":1650167783799},{"_id":"public/archives/2022/04/index.html","hash":"430ae4957d10fb2dbc1e0f069f616a33953e3291","modified":1650167783799},{"_id":"public/categories/element/index.html","hash":"1f6a447244b73ee381036cc1f4f77421bde40a58","modified":1650167783799},{"_id":"public/categories/javascript/index.html","hash":"7c9cceb36d14a98f3316bb4e6158f2817b32bd48","modified":1650167783799},{"_id":"public/categories/hexo/index.html","hash":"765b44f57f4715591e55da10a5a1a9021ec44686","modified":1650167783799},{"_id":"public/categories/mysq/index.html","hash":"a40ce22d19824397bf3c50effbafe81ace6b6170","modified":1650167783799},{"_id":"public/categories/个人/index.html","hash":"f58d1a8ae9b0addab08711d45813e9c800354f80","modified":1650167783799},{"_id":"public/categories/vue/index.html","hash":"49ca5f871b1795b4134b2dcc0375adb6e0ce5bd7","modified":1650167783799},{"_id":"public/categories/taro/index.html","hash":"d245eeb81a6eab5b93a28f6ac3b098422f653bba","modified":1650167783799},{"_id":"public/categories/vuepress/index.html","hash":"e1d13a8fff7855ed9c480de28c1caa333201589e","modified":1650167783799},{"_id":"public/index.html","hash":"b6a103b3fdc4dd37bb12a1bc6f13de78cf40b92b","modified":1650167783799},{"_id":"public/page/2/index.html","hash":"18744772e6b9ea2b43e9c5af7f3dfe5423d31792","modified":1650167783799},{"_id":"public/tags/element/index.html","hash":"3a92c1bfd33a8d024c4f9166e97936531413751e","modified":1650167783799},{"_id":"public/tags/fetch/index.html","hash":"9e14b96a7f51815f7ca5d96af5fcdae3b554b233","modified":1650167783799},{"_id":"public/tags/javascript/index.html","hash":"cb2453c8e1377447cca009f0b1e16553d15279d4","modified":1650167783799},{"_id":"public/tags/hexo/index.html","hash":"31e9ca3b4679162355b6fe90c378bbb30057d4d1","modified":1650167783799},{"_id":"public/tags/mysql/index.html","hash":"1e84ed9f3e46723805d408593284789dde684b6d","modified":1650167783799},{"_id":"public/tags/hexo主题/index.html","hash":"494124638ddab09c2842e2fdcb67f0888e14187c","modified":1650167783799},{"_id":"public/tags/个人/index.html","hash":"76d1d5374bab653223b52564ced55ca70e11c9a3","modified":1650167783799},{"_id":"public/tags/vue/index.html","hash":"6bab5344c377e62a85511929fe27668730a723ef","modified":1650167783799},{"_id":"public/tags/taro/index.html","hash":"4553b609ef346a7fa116bdaf317839bd182af1db","modified":1650167783799},{"_id":"public/tags/wechat/index.html","hash":"312c63c43280ea075eb956d400c752b74dfa42f4","modified":1650167783799},{"_id":"public/tags/miniprograme/index.html","hash":"41cc961b3fd4862c5edcbacc65c1a69accf1fce3","modified":1650167783799},{"_id":"public/tags/vuepress/index.html","hash":"9eeb09252da76637ef3dec7e453da7dc5cd6051f","modified":1650167783799},{"_id":"public/favicon.png","hash":"d51ca3da3e44a4b89ffc1973a9113c30858d3ab0","modified":1650167783799},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1650167783799},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1650167783799},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1650167783799},{"_id":"public/images/thumb-default.png","hash":"ec73772f4d88964c79c8318da9481d800fc3cbb0","modified":1650167783799},{"_id":"public/images/donate/alipayimg.png","hash":"e2d44d5af43d1b91350ba333e56657918c29d432","modified":1650167783799},{"_id":"public/images/favatar/idesign.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1650167783799},{"_id":"public/images/favatar/meituan.jpg","hash":"e92c43934927c049b59d9bf3de557917ee77efe1","modified":1650167783799},{"_id":"public/images/favatar/techblog.jpg","hash":"db9db2e6031b8a54a8aad631de3160c1e1b630d2","modified":1650167783799},{"_id":"public/2019/11/08/how-to-deploy-hexo-to-self-server/1573175297499.png","hash":"fde1ca027df76caf3eb5c3b8fd65e289a0d8c2c7","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590654652879.png","hash":"e07b0c9c7a4675babc413ba692b8574d56a4bc8c","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590655829098.png","hash":"bee2c3e41e4f3a0c7485f593b7b3e20818987877","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/blog.sh","hash":"a45b7844a7212ab40f4fcfed9fa2c94f9f88e358","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579510148963.png","hash":"d02d5668441030c08ff364f77c6191c7b0a1bc17","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579511258773.png","hash":"aa7998184d0c5ec717389afc5755949bbf2d3c6d","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579513820591.png","hash":"a4e111d3de6aed5bbe1b60994044c6de7c3ba2cc","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579512507035.png","hash":"f49ba81539e99d153793b97fec3ee09f3053b88f","modified":1650167783799},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1650167783799},{"_id":"public/lib/blog-encrypt.js","hash":"96509f92b7037e8f750e4684cd440a3af98d9fec","modified":1650167783799},{"_id":"public/images/avatar.jpeg","hash":"13c7bb886d7880a382b180159ba448b1ef949d2e","modified":1650167783799},{"_id":"public/images/donate/wechatpayimg.png","hash":"be0dc6088b900fcc5a89ac2799e9a871146333e0","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590655537760.png","hash":"d2f98c329e3052603d2136c395ba72ac3b50a738","modified":1650167783799},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579510936334.png","hash":"243d1afa31aa20009f660fc760ef3662892cfcb3","modified":1650167783799},{"_id":"public/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1650167783799},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1650167783799},{"_id":"public/fonts/README.html","hash":"7c1128fed284d2fb7fee743e8a739da99385b358","modified":1650167783799},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1650167783799},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1650167783799},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590656080311.png","hash":"0f37c88703d1077862ce653ee7e20ce7f45dd103","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/3064F5DA.gif","hash":"b6549912c9883c164e5e5bd9833ec3b4511084c9","modified":1650167783799},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1650167783799},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1650167783799},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1650167783799},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1650167783799},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_171021.gif","hash":"59ae1634056cde3432b3e1554ff2518ba6a046c7","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_161248.gif","hash":"a5c19d5e20e87f6e4b91d09f63ad1c3a6cec0074","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_175335.gif","hash":"067b46477580d23277c6f3e0c8c9aace5dd98f28","modified":1650167783799},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_172321.gif","hash":"28488d67d03faa64e63e29abdcab9e53cc427ecd","modified":1650167783799}],"Category":[{"name":"测试","_id":"cl22rak0i0004vcv61ipi9dni"},{"name":"element","_id":"cl22rak0o000cvcv6cilranie"},{"name":"javascript","_id":"cl22rak0r000jvcv6bc27grk7"},{"name":"hexo","_id":"cl22rak0x000qvcv6b5qzf8km"},{"name":"mysq","_id":"cl22rak120011vcv639s8epv5"},{"name":"个人","_id":"cl22rak14001avcv64a276bgc"},{"name":"vue","_id":"cl22rak17001fvcv6fii4539q"},{"name":"taro","_id":"cl22rak1d001rvcv6cwsfa40g"},{"name":"vuepress","_id":"cl22rak1f001vvcv625hydrat"}],"Data":[{"_id":"links","data":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}],"Page":[{"title":"404-该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404-该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n","date":"2019-11-08T08:41:30.771Z","updated":"2019-11-08T08:41:30.771Z","path":"/404.html","layout":"page","_id":"cl22rak090000vcv6di9ogder","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"\n一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发\n\n```json\n{\n  personalInformation: {\n    name: \"曹一山\",\n    age: 27,\n    gender: \"男\",\n    experience: \"3年\",\n    address: \"江苏-苏州\",\n    education: \"硕士研究生\",\n    email: \"caoruiy@plcent.com\",\n    description: \"致力于网站开发, 以及在大前端的思潮下向前奔跑\",\n  },\n  skills: [\n    [\"Html\", \"Javascript\", \"Css\", \"ES6\", \"Node\"],\n    [\"Webpack\", \"Gulp\"],\n    [\"Git\", \"SVN\"],\n    [\"TypeScript\", \"Pug\", \"Less\"]\n    [\"Vue\"],\n    [\"ElementUI\", \"weUI\"],\n    [\"PHP\",  \"Python\", \"Dart\"],\n    [\"ThinkPHP\", \"Yii2\"],\n    [\"Selenium\"],\n    [\"Linux\"]\n  ]\n}\n```\n","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n\n一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发\n\n```json\n{\n  personalInformation: {\n    name: \"曹一山\",\n    age: 27,\n    gender: \"男\",\n    experience: \"3年\",\n    address: \"江苏-苏州\",\n    education: \"硕士研究生\",\n    email: \"caoruiy@plcent.com\",\n    description: \"致力于网站开发, 以及在大前端的思潮下向前奔跑\",\n  },\n  skills: [\n    [\"Html\", \"Javascript\", \"Css\", \"ES6\", \"Node\"],\n    [\"Webpack\", \"Gulp\"],\n    [\"Git\", \"SVN\"],\n    [\"TypeScript\", \"Pug\", \"Less\"]\n    [\"Vue\"],\n    [\"ElementUI\", \"weUI\"],\n    [\"PHP\",  \"Python\", \"Dart\"],\n    [\"ThinkPHP\", \"Yii2\"],\n    [\"Selenium\"],\n    [\"Linux\"]\n  ]\n}\n```\n","date":"2022-04-16T14:51:10.272Z","updated":"2022-04-16T14:51:10.272Z","path":"about/index.html","_id":"cl22rak0g0002vcv6ab6y2gg9","content":"<p>一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  personalInformation<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;曹一山&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    age<span class=\"punctuation\">:</span> <span class=\"number\">27</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    gender<span class=\"punctuation\">:</span> <span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    experience<span class=\"punctuation\">:</span> <span class=\"string\">&quot;3年&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    address<span class=\"punctuation\">:</span> <span class=\"string\">&quot;江苏-苏州&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    education<span class=\"punctuation\">:</span> <span class=\"string\">&quot;硕士研究生&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    email<span class=\"punctuation\">:</span> <span class=\"string\">&quot;caoruiy@plcent.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    description<span class=\"punctuation\">:</span> <span class=\"string\">&quot;致力于网站开发, 以及在大前端的思潮下向前奔跑&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  skills<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Node&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Webpack&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Gulp&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Git&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;SVN&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;TypeScript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pug&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Less&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ElementUI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;weUI&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;PHP&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;Python&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dart&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ThinkPHP&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Yii2&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Selenium&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Linux&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  personalInformation<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;曹一山&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    age<span class=\"punctuation\">:</span> <span class=\"number\">27</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    gender<span class=\"punctuation\">:</span> <span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    experience<span class=\"punctuation\">:</span> <span class=\"string\">&quot;3年&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    address<span class=\"punctuation\">:</span> <span class=\"string\">&quot;江苏-苏州&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    education<span class=\"punctuation\">:</span> <span class=\"string\">&quot;硕士研究生&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    email<span class=\"punctuation\">:</span> <span class=\"string\">&quot;caoruiy@plcent.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    description<span class=\"punctuation\">:</span> <span class=\"string\">&quot;致力于网站开发, 以及在大前端的思潮下向前奔跑&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  skills<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Node&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Webpack&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Gulp&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Git&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;SVN&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;TypeScript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pug&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Less&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ElementUI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;weUI&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;PHP&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;Python&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dart&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ThinkPHP&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Yii2&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Selenium&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Linux&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2019-11-07T07:14:55.602Z","updated":"2019-11-07T07:14:55.602Z","path":"books/index.html","_id":"cl22rak0k0006vcv6as9bhb8l","content":"","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"分类","date":"2019-11-06T07:55:00.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-11-06 15:55:00\ntype: \"categories\"\nlayout: categories\ncomments: false\n---\n","updated":"2019-11-07T07:14:55.603Z","path":"categories/index.html","_id":"cl22rak0l0008vcv65n7ccl6j","content":"","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2019-11-07T07:14:55.603Z","updated":"2019-11-07T07:14:55.603Z","path":"links/index.html","_id":"cl22rak0n000avcv6ejo6hj6w","content":"","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2019-11-07T07:14:55.604Z","updated":"2019-11-07T07:14:55.604Z","path":"repository/index.html","_id":"cl22rak0p000evcv65wxxbql2","content":"","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"标签","date":"2019-11-06T07:55:13.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-06 15:55:13\ntype: \"tags\"\nlayout: tags\ncomments: false\n---\n","updated":"2019-11-07T07:14:55.604Z","path":"tags/index.html","_id":"cl22rak0q000gvcv637g99er6","content":"","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""}],"Post":[{"title":"什么是单元测试","toc":true,"sidebar":true,"date":"2020-05-29T08:55:38.000Z","_content":"\n当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。\n\n### 什么是单元测试\n所以第一件事，我需要搞清楚，到底什么是单元测试？\n> 针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个`vue`组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。\n\n\n### 为什么要写单元测试\n有一种[我非常赞同的隐喻](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)，单元测试是保证你写的代码是你想要的结果的最有效的方法！\n> 没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。\n\n单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。\n\n当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。\n\n在目前公司参与的项目中，经常性的会出现以下一些情况：\n- 代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。\n- 修改部分代码功能时，会影响到一些无关的内容\n- 修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动\n- 系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他\n- 系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。\n\n面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。\n\n> 单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的\n\n### 单元测试应该包含哪些内容\n所以，单元测试应该是什么样的，他应该怎么去写？\n\n\n### 如何写好一个单元测试\n\n编写单元测试的原则\n\n\n### 相关话题\n\n- 如何编写易于\n\n### 参考\n\n[单元测试到底是什么？应该怎么做？](https://www.zhihu.com/question/28729261)\n[干货 | 测试扁平化之必备神器：好的单元测试](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)\n","source":"_drafts/what-is-unit-test.md","raw":"---\ntitle: 什么是单元测试\ntoc: true\nsidebar: true\ndate: 2020-05-29 16:55:38\ntags:\n- 测试\n- 单元测试\n\ncategories:\n- 测试\n---\n\n当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。\n\n### 什么是单元测试\n所以第一件事，我需要搞清楚，到底什么是单元测试？\n> 针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个`vue`组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。\n\n\n### 为什么要写单元测试\n有一种[我非常赞同的隐喻](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)，单元测试是保证你写的代码是你想要的结果的最有效的方法！\n> 没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。\n\n单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。\n\n当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。\n\n在目前公司参与的项目中，经常性的会出现以下一些情况：\n- 代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。\n- 修改部分代码功能时，会影响到一些无关的内容\n- 修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动\n- 系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他\n- 系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。\n\n面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。\n\n> 单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的\n\n### 单元测试应该包含哪些内容\n所以，单元测试应该是什么样的，他应该怎么去写？\n\n\n### 如何写好一个单元测试\n\n编写单元测试的原则\n\n\n### 相关话题\n\n- 如何编写易于\n\n### 参考\n\n[单元测试到底是什么？应该怎么做？](https://www.zhihu.com/question/28729261)\n[干货 | 测试扁平化之必备神器：好的单元测试](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)\n","slug":"what-is-unit-test","published":0,"updated":"2020-06-03T02:23:21.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0c0001vcv67phc69q4","content":"<p>当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。</p>\n<h3 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h3><p>所以第一件事，我需要搞清楚，到底什么是单元测试？</p>\n<blockquote>\n<p>针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个<code>vue</code>组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。</p>\n</blockquote>\n<h3 id=\"为什么要写单元测试\"><a href=\"#为什么要写单元测试\" class=\"headerlink\" title=\"为什么要写单元测试\"></a>为什么要写单元测试</h3><p>有一种<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">我非常赞同的隐喻</a>，单元测试是保证你写的代码是你想要的结果的最有效的方法！</p>\n<blockquote>\n<p>没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。</p>\n</blockquote>\n<p>单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。</p>\n<p>当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。</p>\n<p>在目前公司参与的项目中，经常性的会出现以下一些情况：</p>\n<ul>\n<li>代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。</li>\n<li>修改部分代码功能时，会影响到一些无关的内容</li>\n<li>修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动</li>\n<li>系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他</li>\n<li>系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。</li>\n</ul>\n<p>面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。</p>\n<blockquote>\n<p>单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的</p>\n</blockquote>\n<h3 id=\"单元测试应该包含哪些内容\"><a href=\"#单元测试应该包含哪些内容\" class=\"headerlink\" title=\"单元测试应该包含哪些内容\"></a>单元测试应该包含哪些内容</h3><p>所以，单元测试应该是什么样的，他应该怎么去写？</p>\n<h3 id=\"如何写好一个单元测试\"><a href=\"#如何写好一个单元测试\" class=\"headerlink\" title=\"如何写好一个单元测试\"></a>如何写好一个单元测试</h3><p>编写单元测试的原则</p>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><ul>\n<li>如何编写易于</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.zhihu.com/question/28729261\">单元测试到底是什么？应该怎么做？</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">干货 | 测试扁平化之必备神器：好的单元测试</a></p>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。</p>\n<h3 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h3><p>所以第一件事，我需要搞清楚，到底什么是单元测试？</p>\n<blockquote>\n<p>针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个<code>vue</code>组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。</p>\n</blockquote>\n<h3 id=\"为什么要写单元测试\"><a href=\"#为什么要写单元测试\" class=\"headerlink\" title=\"为什么要写单元测试\"></a>为什么要写单元测试</h3><p>有一种<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">我非常赞同的隐喻</a>，单元测试是保证你写的代码是你想要的结果的最有效的方法！</p>\n<blockquote>\n<p>没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。</p>\n</blockquote>\n<p>单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。</p>\n<p>当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。</p>\n<p>在目前公司参与的项目中，经常性的会出现以下一些情况：</p>\n<ul>\n<li>代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。</li>\n<li>修改部分代码功能时，会影响到一些无关的内容</li>\n<li>修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动</li>\n<li>系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他</li>\n<li>系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。</li>\n</ul>\n<p>面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。</p>\n<blockquote>\n<p>单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的</p>\n</blockquote>\n<h3 id=\"单元测试应该包含哪些内容\"><a href=\"#单元测试应该包含哪些内容\" class=\"headerlink\" title=\"单元测试应该包含哪些内容\"></a>单元测试应该包含哪些内容</h3><p>所以，单元测试应该是什么样的，他应该怎么去写？</p>\n<h3 id=\"如何写好一个单元测试\"><a href=\"#如何写好一个单元测试\" class=\"headerlink\" title=\"如何写好一个单元测试\"></a>如何写好一个单元测试</h3><p>编写单元测试的原则</p>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><ul>\n<li>如何编写易于</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.zhihu.com/question/28729261\">单元测试到底是什么？应该怎么做？</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">干货 | 测试扁平化之必备神器：好的单元测试</a></p>\n"},{"title":"element-ui源码学习/1/初步认识框架","toc":true,"sidebar":true,"date":"2020-01-16T02:16:46.000Z","_content":"\n\n\n相关站点: <https://blog.csdn.net/m0_37972557/article/details/81072773>\n\n","source":"_posts/element-code-learning.md","raw":"---\ntitle: element-ui源码学习/1/初步认识框架\ntoc: true\nsidebar: true\ndate: 2020-01-16 10:16:46\ntags: \n- element\ncategories:\n- element\n---\n\n\n\n相关站点: <https://blog.csdn.net/m0_37972557/article/details/81072773>\n\n","slug":"element-code-learning","published":1,"updated":"2020-01-16T02:19:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0g0003vcv60bwdam29","content":"<p>相关站点: <a href=\"https://blog.csdn.net/m0_37972557/article/details/81072773\">https://blog.csdn.net/m0_37972557/article/details/81072773</a></p>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>相关站点: <a href=\"https://blog.csdn.net/m0_37972557/article/details/81072773\">https://blog.csdn.net/m0_37972557/article/details/81072773</a></p>\n"},{"title":"fetch用法","toc":true,"sidebar":true,"date":"2021-09-07T06:52:03.000Z","_content":"\n# Fetch API\n\n详尽的MDN文档：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\n\n使用Fetch：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n## 语法\n\n```javascript\nPromise<Response> fetch(input[, init]);\n```\n\n#### input <String | [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)>\n\n定义要获取的资源。他接受一个字符串或者一个[`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)对象。`Request()` 和 `fetch()` 接受同样的参数。你可以这样使用：\n\n```javascript\nlet request = new Request('xxx.png', init)\nfetch(request)\n\n# 等价于\nfetch('xxx.png', init)\n```\n\n\n\n\n\n#### init `可选`\n\n一个配置参数对象，可选的配置项包括：\n\n- `method`：请求方式，`GET`、`POST`、`DELETE`、`PUT`等\n\n- `headers`：请求头。形式为 [`Headers`](https://developer.mozilla.org/zh-CN/docs/Web/API/Headers) 的对象 或 一个对象。大概形式如下：\n\n  ```javascript\n  let headers = new Headers()\n  headers.append('content-type', 'application/json')\n  \n  fetch(input, {\n  \theaders: headers\n  })\n  ```\n\n  ```javascript\n  fetch(input, {\n  \theaders: {\n          content-type: 'application/json'\n      }\n  })\n  ```\n\n- `body`：请求体。可能是一个 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)、[`BufferSource` (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource)、[`FormData`](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)、[`URLSearchParams`](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams) 或者 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString) 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n\n  > 正常的`POST`请求中，`body`入参是一个字符串，所以发送一个`JSON`对象需要经过`JSON.stringify`处理。在`GET`、 `HEAD`请求中，不可以指定`body`参数，否则会报错。\n\n- `mode`: 请求跨域设置。接受以下数据枚举： `cors`、 `no-cors`或者 `same-origin（默认值）`\n\n  - `same-origin（默认值）`：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的`response.type`为`basic`。\n  - `cors`：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的`response.type`为`cors`。\n  - `no-cors`：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的`response.type`为`opaque`。\n\n  > 设置该字段，会被赋值到请求头字段`Sec-Fetch-Mode`中，根据设置字段的不同，在响应对象`response.type`中会返回不同的信息\n\n- `credentials`：请求cookie。接受以下数据枚举：`omit`（默认值）、`same-origin`或者 `include`。\n\n  > （自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 `same-origin`。Firefox 也在 61.0b13 版本中进行了修改，参见：[Request.credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials)）。为了保证各个版本的一致性，建议使用是明确指定credentials。\n  >\n  > \n  >\n  > 注：fetch-polyfill whatwg-fetch采用默认值`same-origin`：[fetch.js#L367](https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367)\n\n  - `omit`：从不发送cookies\n  - `same-origin`：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n  -  `include`：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)\n\n- `cache`：请求的 cache 模式。接受以下数据枚举： `default`、 `no-store`、 `reload` 、 `no-cache `、 `force-cache `或者 `only-if-cached` 。\n\n  > 详细参见MDN说明：[Fetch Request Cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache)、[HTTP Headers Cache-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)\n\n  - `default`：表示请求时不传 `Cache-Control` 这个标头。\n  - `reload`：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 `Cache-Control` 标头的值来进行缓存存储。跟 `no-store` 的不同点在于 `no-store` 本次请求强制刷新了，下次如果另一个请求 `Cache-Control` 再指定成别的值比如 `only-if-cached`，完全不会命中缓存，因为 `no-store` 压根没把响应结果存在本地；而 `reload` 第一次强制刷新，第二次是的 `only-if-cached` 之类的就会命中缓存。\n\n- `redirect`：重定向设置。`follow` (自动重定向)、`error` (如果产生重定向将自动终止并且抛出一个错误）、`manual` (手动处理重定向)。在Chrome中默认使用`follow（`Chrome 47之前的默认值是`manual`）。\n  - `follow`：默认值，`fetch()`跟随 HTTP 跳转。\n  - `error`：如果发生跳转，`fetch()`就报错。\n  - `manual`：`fetch()`不跟随 HTTP 跳转，但是`response.url`属性会指向新的 URL，`response.redirected`属性会变为`true`，由开发者自己决定后续如何处理跳转。\n- `referrer`：请求的引用者设置。可以为任意字符串，如果`referrer`的值为空字符串，则不发送referrer表头。\n- `referrerPolicy`：指定了HTTP头部referer字段的值。可能为以下值之一： `no-referrer`、 `no-referrer-when-downgrade` 、`origin`、 `origin-when-cross-origin`、 `unsafe-url `。\n  - `no-referrer-when-downgrade`：默认值，总是发送`Referer`标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。\n  - `no-referrer`：不发送`Referer`标头。\n  - `origin`：`Referer`标头只包含域名，不包含完整的路径。\n  - `origin-when-cross-origin`：同源请求`Referer`标头包含完整的路径，跨域请求只包含域名。\n  - `same-origin`：跨域请求不发送`Referer`，同源请求发送。\n  - `strict-origin`：`Referer`标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送`Referer`标头。\n  - `strict-origin-when-cross-origin`：同源请求时`Referer`标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。\n  - `unsafe-url`：不管什么情况，总是发送`Referer`标头。\n\n> 由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见[Request](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)文档\n\n","source":"_posts/fetch-api.md","raw":"---\ntitle: fetch用法\ntoc: true\nsidebar: true\ndate: 2021-09-07 14:52:03\ntags:\n- fetch\n- javascript\n\ncategories:\n- javascript\n---\n\n# Fetch API\n\n详尽的MDN文档：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\n\n使用Fetch：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n## 语法\n\n```javascript\nPromise<Response> fetch(input[, init]);\n```\n\n#### input <String | [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)>\n\n定义要获取的资源。他接受一个字符串或者一个[`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)对象。`Request()` 和 `fetch()` 接受同样的参数。你可以这样使用：\n\n```javascript\nlet request = new Request('xxx.png', init)\nfetch(request)\n\n# 等价于\nfetch('xxx.png', init)\n```\n\n\n\n\n\n#### init `可选`\n\n一个配置参数对象，可选的配置项包括：\n\n- `method`：请求方式，`GET`、`POST`、`DELETE`、`PUT`等\n\n- `headers`：请求头。形式为 [`Headers`](https://developer.mozilla.org/zh-CN/docs/Web/API/Headers) 的对象 或 一个对象。大概形式如下：\n\n  ```javascript\n  let headers = new Headers()\n  headers.append('content-type', 'application/json')\n  \n  fetch(input, {\n  \theaders: headers\n  })\n  ```\n\n  ```javascript\n  fetch(input, {\n  \theaders: {\n          content-type: 'application/json'\n      }\n  })\n  ```\n\n- `body`：请求体。可能是一个 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)、[`BufferSource` (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource)、[`FormData`](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)、[`URLSearchParams`](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams) 或者 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString) 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n\n  > 正常的`POST`请求中，`body`入参是一个字符串，所以发送一个`JSON`对象需要经过`JSON.stringify`处理。在`GET`、 `HEAD`请求中，不可以指定`body`参数，否则会报错。\n\n- `mode`: 请求跨域设置。接受以下数据枚举： `cors`、 `no-cors`或者 `same-origin（默认值）`\n\n  - `same-origin（默认值）`：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的`response.type`为`basic`。\n  - `cors`：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的`response.type`为`cors`。\n  - `no-cors`：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的`response.type`为`opaque`。\n\n  > 设置该字段，会被赋值到请求头字段`Sec-Fetch-Mode`中，根据设置字段的不同，在响应对象`response.type`中会返回不同的信息\n\n- `credentials`：请求cookie。接受以下数据枚举：`omit`（默认值）、`same-origin`或者 `include`。\n\n  > （自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 `same-origin`。Firefox 也在 61.0b13 版本中进行了修改，参见：[Request.credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials)）。为了保证各个版本的一致性，建议使用是明确指定credentials。\n  >\n  > \n  >\n  > 注：fetch-polyfill whatwg-fetch采用默认值`same-origin`：[fetch.js#L367](https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367)\n\n  - `omit`：从不发送cookies\n  - `same-origin`：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n  -  `include`：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)\n\n- `cache`：请求的 cache 模式。接受以下数据枚举： `default`、 `no-store`、 `reload` 、 `no-cache `、 `force-cache `或者 `only-if-cached` 。\n\n  > 详细参见MDN说明：[Fetch Request Cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache)、[HTTP Headers Cache-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)\n\n  - `default`：表示请求时不传 `Cache-Control` 这个标头。\n  - `reload`：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 `Cache-Control` 标头的值来进行缓存存储。跟 `no-store` 的不同点在于 `no-store` 本次请求强制刷新了，下次如果另一个请求 `Cache-Control` 再指定成别的值比如 `only-if-cached`，完全不会命中缓存，因为 `no-store` 压根没把响应结果存在本地；而 `reload` 第一次强制刷新，第二次是的 `only-if-cached` 之类的就会命中缓存。\n\n- `redirect`：重定向设置。`follow` (自动重定向)、`error` (如果产生重定向将自动终止并且抛出一个错误）、`manual` (手动处理重定向)。在Chrome中默认使用`follow（`Chrome 47之前的默认值是`manual`）。\n  - `follow`：默认值，`fetch()`跟随 HTTP 跳转。\n  - `error`：如果发生跳转，`fetch()`就报错。\n  - `manual`：`fetch()`不跟随 HTTP 跳转，但是`response.url`属性会指向新的 URL，`response.redirected`属性会变为`true`，由开发者自己决定后续如何处理跳转。\n- `referrer`：请求的引用者设置。可以为任意字符串，如果`referrer`的值为空字符串，则不发送referrer表头。\n- `referrerPolicy`：指定了HTTP头部referer字段的值。可能为以下值之一： `no-referrer`、 `no-referrer-when-downgrade` 、`origin`、 `origin-when-cross-origin`、 `unsafe-url `。\n  - `no-referrer-when-downgrade`：默认值，总是发送`Referer`标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。\n  - `no-referrer`：不发送`Referer`标头。\n  - `origin`：`Referer`标头只包含域名，不包含完整的路径。\n  - `origin-when-cross-origin`：同源请求`Referer`标头包含完整的路径，跨域请求只包含域名。\n  - `same-origin`：跨域请求不发送`Referer`，同源请求发送。\n  - `strict-origin`：`Referer`标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送`Referer`标头。\n  - `strict-origin-when-cross-origin`：同源请求时`Referer`标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。\n  - `unsafe-url`：不管什么情况，总是发送`Referer`标头。\n\n> 由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见[Request](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)文档\n\n","slug":"fetch-api","published":1,"updated":"2022-04-16T14:51:10.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0k0007vcv6cv8g1d9w","content":"<h1 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h1><p>详尽的MDN文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></p>\n<p>使用Fetch：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Response</span>&gt; <span class=\"title function_\">fetch</span>(input[, init]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"input-lt-String-Request-gt\"><a href=\"#input-lt-String-Request-gt\" class=\"headerlink\" title=\"input &lt;String | Request&gt;\"></a>input &lt;String | <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>&gt;</h4><p>定义要获取的资源。他接受一个字符串或者一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>对象。<code>Request()</code> 和 <code>fetch()</code> 接受同样的参数。你可以这样使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(request)</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"init-可选\"><a href=\"#init-可选\" class=\"headerlink\" title=\"init 可选\"></a>init <code>可选</code></h4><p>一个配置参数对象，可选的配置项包括：</p>\n<ul>\n<li><p><code>method</code>：请求方式，<code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code>等</p>\n</li>\n<li><p><code>headers</code>：请求头。形式为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a> 的对象 或 一个对象。大概形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>()</span><br><span class=\"line\">headers.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: headers</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        content-<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>body</code>：请求体。可能是一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BufferSource\"><code>BufferSource</code> (en-US)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a> 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</p>\n<blockquote>\n<p>正常的<code>POST</code>请求中，<code>body</code>入参是一个字符串，所以发送一个<code>JSON</code>对象需要经过<code>JSON.stringify</code>处理。在<code>GET</code>、 <code>HEAD</code>请求中，不可以指定<code>body</code>参数，否则会报错。</p>\n</blockquote>\n</li>\n<li><p><code>mode</code>: 请求跨域设置。接受以下数据枚举： <code>cors</code>、 <code>no-cors</code>或者 <code>same-origin（默认值）</code></p>\n<ul>\n<li><code>same-origin（默认值）</code>：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的<code>response.type</code>为<code>basic</code>。</li>\n<li><code>cors</code>：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的<code>response.type</code>为<code>cors</code>。</li>\n<li><code>no-cors</code>：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的<code>response.type</code>为<code>opaque</code>。</li>\n</ul>\n<blockquote>\n<p>设置该字段，会被赋值到请求头字段<code>Sec-Fetch-Mode</code>中，根据设置字段的不同，在响应对象<code>response.type</code>中会返回不同的信息</p>\n</blockquote>\n</li>\n<li><p><code>credentials</code>：请求cookie。接受以下数据枚举：<code>omit</code>（默认值）、<code>same-origin</code>或者 <code>include</code>。</p>\n<blockquote>\n<p>（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 <code>same-origin</code>。Firefox 也在 61.0b13 版本中进行了修改，参见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials\">Request.credentials</a>）。为了保证各个版本的一致性，建议使用是明确指定credentials。</p>\n<p>注：fetch-polyfill whatwg-fetch采用默认值<code>same-origin</code>：<a href=\"https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367\">fetch.js#L367</a></p>\n</blockquote>\n<ul>\n<li><code>omit</code>：从不发送cookies</li>\n<li><code>same-origin</code>：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)</li>\n<li><code>include</code>：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)</li>\n</ul>\n</li>\n<li><p><code>cache</code>：请求的 cache 模式。接受以下数据枚举： <code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code>、 <code>force-cache</code>或者 <code>only-if-cached</code> 。</p>\n<blockquote>\n<p>详细参见MDN说明：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache\">Fetch Request Cache</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\">HTTP Headers Cache-Control</a></p>\n</blockquote>\n<ul>\n<li><code>default</code>：表示请求时不传 <code>Cache-Control</code> 这个标头。</li>\n<li><code>reload</code>：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 <code>Cache-Control</code> 标头的值来进行缓存存储。跟 <code>no-store</code> 的不同点在于 <code>no-store</code> 本次请求强制刷新了，下次如果另一个请求 <code>Cache-Control</code> 再指定成别的值比如 <code>only-if-cached</code>，完全不会命中缓存，因为 <code>no-store</code> 压根没把响应结果存在本地；而 <code>reload</code> 第一次强制刷新，第二次是的 <code>only-if-cached</code> 之类的就会命中缓存。</li>\n</ul>\n</li>\n<li><p><code>redirect</code>：重定向设置。<code>follow</code> (自动重定向)、<code>error</code> (如果产生重定向将自动终止并且抛出一个错误）、<code>manual</code> (手动处理重定向)。在Chrome中默认使用<code>follow（</code>Chrome 47之前的默认值是<code>manual</code>）。</p>\n<ul>\n<li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li>\n<li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li>\n<li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li>\n</ul>\n</li>\n<li><p><code>referrer</code>：请求的引用者设置。可以为任意字符串，如果<code>referrer</code>的值为空字符串，则不发送referrer表头。</p>\n</li>\n<li><p><code>referrerPolicy</code>：指定了HTTP头部referer字段的值。可能为以下值之一： <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code> 、<code>origin</code>、 <code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</p>\n<ul>\n<li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li>\n<li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li>\n<li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li>\n<li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li>\n<li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li>\n<li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li>\n<li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li>\n<li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">Request</a>文档</p>\n</blockquote>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h1><p>详尽的MDN文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></p>\n<p>使用Fetch：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Response</span>&gt; <span class=\"title function_\">fetch</span>(input[, init]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"input-lt-String-Request-gt\"><a href=\"#input-lt-String-Request-gt\" class=\"headerlink\" title=\"input &lt;String | Request&gt;\"></a>input &lt;String | <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>&gt;</h4><p>定义要获取的资源。他接受一个字符串或者一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>对象。<code>Request()</code> 和 <code>fetch()</code> 接受同样的参数。你可以这样使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(request)</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"init-可选\"><a href=\"#init-可选\" class=\"headerlink\" title=\"init 可选\"></a>init <code>可选</code></h4><p>一个配置参数对象，可选的配置项包括：</p>\n<ul>\n<li><p><code>method</code>：请求方式，<code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code>等</p>\n</li>\n<li><p><code>headers</code>：请求头。形式为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a> 的对象 或 一个对象。大概形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>()</span><br><span class=\"line\">headers.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: headers</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        content-<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>body</code>：请求体。可能是一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BufferSource\"><code>BufferSource</code> (en-US)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a> 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</p>\n<blockquote>\n<p>正常的<code>POST</code>请求中，<code>body</code>入参是一个字符串，所以发送一个<code>JSON</code>对象需要经过<code>JSON.stringify</code>处理。在<code>GET</code>、 <code>HEAD</code>请求中，不可以指定<code>body</code>参数，否则会报错。</p>\n</blockquote>\n</li>\n<li><p><code>mode</code>: 请求跨域设置。接受以下数据枚举： <code>cors</code>、 <code>no-cors</code>或者 <code>same-origin（默认值）</code></p>\n<ul>\n<li><code>same-origin（默认值）</code>：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的<code>response.type</code>为<code>basic</code>。</li>\n<li><code>cors</code>：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的<code>response.type</code>为<code>cors</code>。</li>\n<li><code>no-cors</code>：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的<code>response.type</code>为<code>opaque</code>。</li>\n</ul>\n<blockquote>\n<p>设置该字段，会被赋值到请求头字段<code>Sec-Fetch-Mode</code>中，根据设置字段的不同，在响应对象<code>response.type</code>中会返回不同的信息</p>\n</blockquote>\n</li>\n<li><p><code>credentials</code>：请求cookie。接受以下数据枚举：<code>omit</code>（默认值）、<code>same-origin</code>或者 <code>include</code>。</p>\n<blockquote>\n<p>（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 <code>same-origin</code>。Firefox 也在 61.0b13 版本中进行了修改，参见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials\">Request.credentials</a>）。为了保证各个版本的一致性，建议使用是明确指定credentials。</p>\n<p>注：fetch-polyfill whatwg-fetch采用默认值<code>same-origin</code>：<a href=\"https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367\">fetch.js#L367</a></p>\n</blockquote>\n<ul>\n<li><code>omit</code>：从不发送cookies</li>\n<li><code>same-origin</code>：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)</li>\n<li><code>include</code>：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)</li>\n</ul>\n</li>\n<li><p><code>cache</code>：请求的 cache 模式。接受以下数据枚举： <code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code>、 <code>force-cache</code>或者 <code>only-if-cached</code> 。</p>\n<blockquote>\n<p>详细参见MDN说明：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache\">Fetch Request Cache</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\">HTTP Headers Cache-Control</a></p>\n</blockquote>\n<ul>\n<li><code>default</code>：表示请求时不传 <code>Cache-Control</code> 这个标头。</li>\n<li><code>reload</code>：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 <code>Cache-Control</code> 标头的值来进行缓存存储。跟 <code>no-store</code> 的不同点在于 <code>no-store</code> 本次请求强制刷新了，下次如果另一个请求 <code>Cache-Control</code> 再指定成别的值比如 <code>only-if-cached</code>，完全不会命中缓存，因为 <code>no-store</code> 压根没把响应结果存在本地；而 <code>reload</code> 第一次强制刷新，第二次是的 <code>only-if-cached</code> 之类的就会命中缓存。</li>\n</ul>\n</li>\n<li><p><code>redirect</code>：重定向设置。<code>follow</code> (自动重定向)、<code>error</code> (如果产生重定向将自动终止并且抛出一个错误）、<code>manual</code> (手动处理重定向)。在Chrome中默认使用<code>follow（</code>Chrome 47之前的默认值是<code>manual</code>）。</p>\n<ul>\n<li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li>\n<li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li>\n<li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li>\n</ul>\n</li>\n<li><p><code>referrer</code>：请求的引用者设置。可以为任意字符串，如果<code>referrer</code>的值为空字符串，则不发送referrer表头。</p>\n</li>\n<li><p><code>referrerPolicy</code>：指定了HTTP头部referer字段的值。可能为以下值之一： <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code> 、<code>origin</code>、 <code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</p>\n<ul>\n<li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li>\n<li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li>\n<li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li>\n<li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li>\n<li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li>\n<li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li>\n<li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li>\n<li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">Request</a>文档</p>\n</blockquote>\n"},{"title":"hexo搭建个人博客并部署到个人服务器","date":"2019-11-04T06:28:02.000Z","toc":true,"sidebar":true,"_content":"\n当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.\n\n### 起手式\n\n安装并初始化完成hexo站点\n\n```shell\n# 安装\n> npm install hexo -g\n# 初始化\n> hexo init <folder>\n# 本地预览\n> hexo s\n```\n\n## 自动生成分类categories和标签tag\n\n自动维护categories分类页面, 安装 [hexo-auto-category](https://github.com/xu-song/hexo-auto-category) 和 [hexo-generator-tag](https://github.com/hexojs/hexo-generator-tag)\n\n```\n> npm i -S hexo-auto-category\n> npm i -S hexo-generator-tag\n```\n\n在站点根目录下的 `_config.yml` 添加：\n\n```\n# 自动生成分类\ncategory_generator:\n  per_page: 20\n  order_by: -date\n\n# 自动生成Tag\ntag_generator:\n  per_page: 20\n  order_by: -date\n```\n\n> 自动生成的分类和标签, 会在执行 `hexo g` 命令时自动生成\n\n## sitemap站点地图\n\n切换到站点根目录, 安装谷歌站点地图[hexo-generator-category](https://github.com/hexojs/hexo-generator-category) 和 百度站点地图 [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n\n## RSS订阅\n\n切换到站点根目录, 安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n\n```\n> npm i -S hexo-generator-feed\n```\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## feed   \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n```\n\n## hexo 博客图片问题\nhexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。\n通常我们使用markdown书写博客时, 采用的方式是使用 `![]()` 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。\n\n这里可以利用插件 `hexo-asset-image` 来解决这个问题。\n\n1. 安装:\n\n```\n> npm i -S hexo-asset-image\n```\n\n2. 配置:\n\n只需要在`_config.yml` 中配置 `post_asset_folder` 为 `true` 即可。\n\n3. 问题:\n\n> 但是从插件存在问题[域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg](https://github.com/xcodebuild/hexo-asset-image/issues/47)， 如果你也存在一样的问题，可以手动修改代码解决这个问题。\n\n在`node_modules` 目录下, 找到 `hexo-asset-image` 文件夹, 修改文件 `index.js` 的 `L24`\n\n```\n# 从\nvar endPos = link.lastIndexOf('.');\n# 修改为\nvar endPos = link.length-1; \n```\n\n> 参见 [github issues](https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505)\n> 作者更新了项目代码, 但是没有更新 npm 包。\n\n## 参考目录\n- [hexo博客图片问题](https://www.jianshu.com/p/950f8f13a36c)","source":"_posts/hello-hexo.md","raw":"---\ntitle: hexo搭建个人博客并部署到个人服务器\ndate: 2019-11-04 14:28:02\ntoc: true # 是否启用内容索引\nsidebar: true # 是否启用sidebar侧边栏，none：不启用\ntags: \n- hexo\ncategories:\n- hexo\n---\n\n当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.\n\n### 起手式\n\n安装并初始化完成hexo站点\n\n```shell\n# 安装\n> npm install hexo -g\n# 初始化\n> hexo init <folder>\n# 本地预览\n> hexo s\n```\n\n## 自动生成分类categories和标签tag\n\n自动维护categories分类页面, 安装 [hexo-auto-category](https://github.com/xu-song/hexo-auto-category) 和 [hexo-generator-tag](https://github.com/hexojs/hexo-generator-tag)\n\n```\n> npm i -S hexo-auto-category\n> npm i -S hexo-generator-tag\n```\n\n在站点根目录下的 `_config.yml` 添加：\n\n```\n# 自动生成分类\ncategory_generator:\n  per_page: 20\n  order_by: -date\n\n# 自动生成Tag\ntag_generator:\n  per_page: 20\n  order_by: -date\n```\n\n> 自动生成的分类和标签, 会在执行 `hexo g` 命令时自动生成\n\n## sitemap站点地图\n\n切换到站点根目录, 安装谷歌站点地图[hexo-generator-category](https://github.com/hexojs/hexo-generator-category) 和 百度站点地图 [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n\n## RSS订阅\n\n切换到站点根目录, 安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n\n```\n> npm i -S hexo-generator-feed\n```\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## feed   \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n```\n\n## hexo 博客图片问题\nhexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。\n通常我们使用markdown书写博客时, 采用的方式是使用 `![]()` 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。\n\n这里可以利用插件 `hexo-asset-image` 来解决这个问题。\n\n1. 安装:\n\n```\n> npm i -S hexo-asset-image\n```\n\n2. 配置:\n\n只需要在`_config.yml` 中配置 `post_asset_folder` 为 `true` 即可。\n\n3. 问题:\n\n> 但是从插件存在问题[域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg](https://github.com/xcodebuild/hexo-asset-image/issues/47)， 如果你也存在一样的问题，可以手动修改代码解决这个问题。\n\n在`node_modules` 目录下, 找到 `hexo-asset-image` 文件夹, 修改文件 `index.js` 的 `L24`\n\n```\n# 从\nvar endPos = link.lastIndexOf('.');\n# 修改为\nvar endPos = link.length-1; \n```\n\n> 参见 [github issues](https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505)\n> 作者更新了项目代码, 但是没有更新 npm 包。\n\n## 参考目录\n- [hexo博客图片问题](https://www.jianshu.com/p/950f8f13a36c)","slug":"hello-hexo","published":1,"updated":"2019-11-21T03:11:31.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0m0009vcv6epb01qry","content":"<p>当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.</p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>安装并初始化完成hexo站点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install hexo -g</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo init &lt;folder&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地预览</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动生成分类categories和标签tag\"><a href=\"#自动生成分类categories和标签tag\" class=\"headerlink\" title=\"自动生成分类categories和标签tag\"></a>自动生成分类categories和标签tag</h2><p>自动维护categories分类页面, 安装 <a href=\"https://github.com/xu-song/hexo-auto-category\">hexo-auto-category</a> 和 <a href=\"https://github.com/hexojs/hexo-generator-tag\">hexo-generator-tag</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-auto-category</span><br><span class=\"line\">&gt; npm i -S hexo-generator-tag</span><br></pre></td></tr></table></figure>\n\n<p>在站点根目录下的 <code>_config.yml</code> 添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成分类</span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动生成Tag</span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动生成的分类和标签, 会在执行 <code>hexo g</code> 命令时自动生成</p>\n</blockquote>\n<h2 id=\"sitemap站点地图\"><a href=\"#sitemap站点地图\" class=\"headerlink\" title=\"sitemap站点地图\"></a>sitemap站点地图</h2><p>切换到站点根目录, 安装谷歌站点地图<a href=\"https://github.com/hexojs/hexo-generator-category\">hexo-generator-category</a> 和 百度站点地图 <a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\">hexo-generator-baidu-sitemap</a></p>\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>切换到站点根目录, 安装 <a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## feed   </span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-博客图片问题\"><a href=\"#hexo-博客图片问题\" class=\"headerlink\" title=\"hexo 博客图片问题\"></a>hexo 博客图片问题</h2><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。<br>通常我们使用markdown书写博客时, 采用的方式是使用 <code>![]()</code> 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。</p>\n<p>这里可以利用插件 <code>hexo-asset-image</code> 来解决这个问题。</p>\n<ol>\n<li>安装:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置:</li>\n</ol>\n<p>只需要在<code>_config.yml</code> 中配置 <code>post_asset_folder</code> 为 <code>true</code> 即可。</p>\n<ol start=\"3\">\n<li>问题:</li>\n</ol>\n<blockquote>\n<p>但是从插件存在问题<a href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47\">域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg</a>， 如果你也存在一样的问题，可以手动修改代码解决这个问题。</p>\n</blockquote>\n<p>在<code>node_modules</code> 目录下, 找到 <code>hexo-asset-image</code> 文件夹, 修改文件 <code>index.js</code> 的 <code>L24</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从</span><br><span class=\"line\">var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class=\"line\"># 修改为</span><br><span class=\"line\">var endPos = link.length-1; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参见 <a href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505\">github issues</a><br>作者更新了项目代码, 但是没有更新 npm 包。</p>\n</blockquote>\n<h2 id=\"参考目录\"><a href=\"#参考目录\" class=\"headerlink\" title=\"参考目录\"></a>参考目录</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/950f8f13a36c\">hexo博客图片问题</a></li>\n</ul>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.</p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>安装并初始化完成hexo站点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install hexo -g</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo init &lt;folder&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地预览</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动生成分类categories和标签tag\"><a href=\"#自动生成分类categories和标签tag\" class=\"headerlink\" title=\"自动生成分类categories和标签tag\"></a>自动生成分类categories和标签tag</h2><p>自动维护categories分类页面, 安装 <a href=\"https://github.com/xu-song/hexo-auto-category\">hexo-auto-category</a> 和 <a href=\"https://github.com/hexojs/hexo-generator-tag\">hexo-generator-tag</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-auto-category</span><br><span class=\"line\">&gt; npm i -S hexo-generator-tag</span><br></pre></td></tr></table></figure>\n\n<p>在站点根目录下的 <code>_config.yml</code> 添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成分类</span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动生成Tag</span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动生成的分类和标签, 会在执行 <code>hexo g</code> 命令时自动生成</p>\n</blockquote>\n<h2 id=\"sitemap站点地图\"><a href=\"#sitemap站点地图\" class=\"headerlink\" title=\"sitemap站点地图\"></a>sitemap站点地图</h2><p>切换到站点根目录, 安装谷歌站点地图<a href=\"https://github.com/hexojs/hexo-generator-category\">hexo-generator-category</a> 和 百度站点地图 <a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\">hexo-generator-baidu-sitemap</a></p>\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>切换到站点根目录, 安装 <a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## feed   </span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-博客图片问题\"><a href=\"#hexo-博客图片问题\" class=\"headerlink\" title=\"hexo 博客图片问题\"></a>hexo 博客图片问题</h2><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。<br>通常我们使用markdown书写博客时, 采用的方式是使用 <code>![]()</code> 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。</p>\n<p>这里可以利用插件 <code>hexo-asset-image</code> 来解决这个问题。</p>\n<ol>\n<li>安装:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置:</li>\n</ol>\n<p>只需要在<code>_config.yml</code> 中配置 <code>post_asset_folder</code> 为 <code>true</code> 即可。</p>\n<ol start=\"3\">\n<li>问题:</li>\n</ol>\n<blockquote>\n<p>但是从插件存在问题<a href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47\">域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg</a>， 如果你也存在一样的问题，可以手动修改代码解决这个问题。</p>\n</blockquote>\n<p>在<code>node_modules</code> 目录下, 找到 <code>hexo-asset-image</code> 文件夹, 修改文件 <code>index.js</code> 的 <code>L24</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从</span><br><span class=\"line\">var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class=\"line\"># 修改为</span><br><span class=\"line\">var endPos = link.length-1; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参见 <a href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505\">github issues</a><br>作者更新了项目代码, 但是没有更新 npm 包。</p>\n</blockquote>\n<h2 id=\"参考目录\"><a href=\"#参考目录\" class=\"headerlink\" title=\"参考目录\"></a>参考目录</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/950f8f13a36c\">hexo博客图片问题</a></li>\n</ul>\n"},{"title":"Hexo主题pure使用指南","date":"2019-11-05T06:34:15.000Z","toc":true,"sidebar":true,"_content":"\n`hexo` 主题 `pure` 项目相关信息:\n\n> 预览地址: [https://blog.cofess.com](https://blog.cofess.com)\n> 项目地址: [https://github.com/cofess/hexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n> 中文使用文档: [https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 使用前请操作\n使用该主题前, 请先复制 `theme/pure/_source/` 目录下的所有内容到 `blog path/source/` 目录下\n原因在于该目录下有建好的菜单 `categories`(分类)、`tags`(标签)、`repository`(项目)、`books`(书单)、`links`(友链)、`about`(关于)页面\n\n当你使用自动生成分类、标签，展示github项目时\n\n\n### 文章目录索引\n在文章详情页, 展示一个文章目录\n\n1. 主题配置文件中开启配置:\n```\nconfig\n  toc: true # 是否开启文章章节目录导航\n```\n\n2. 在文章顶部将该文章开启索引, 如:\n\n```\n---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntags: \n- hexo主题\n\ncategories:\n- hexo\n\ntoc: true # 是否启用内容索引\nsidebar: none # 是否启用sidebar侧边栏，none：不启用\n---\n```\n\n\n### 侧边栏\n\n主题配置项中, 侧边栏可以如下配置:\n\n```\n# 侧边栏\nsidebar: right\n# 侧边栏启用哪些模块\nwidgets:\n  - board # 公告\n  - category # 分类\n  - tag # 标签\n  - tagcloud # 标签云\n  - archive # 归档\n  - recent_posts # 最近文章\n\n# 归档列表的展示方式\narchive_type: 'monthly' # 归档方式:  yearly | monthly\nshow_count: true # 显示每个归档的文章总数\n```\n\n### 图集\n在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.\n主题的图册公告是使用[fancybox](https://github.com/fancyapps/fancybox)实现, 可以参照github\n\n```\n# Fancybox\n# 图集功能\nfancybox: true\n```\n\n### 展示github项目\n\n在左侧菜单`项目`中, 点击展示自己的github项目\n\n1. 在主题配置文件中 `_config.yml` 修改, 请配置自己github用户名\n\n```\ngithub: \n  username: caoruiy  # github用户名\n```\n\n2. 新建`repository`页面:\n\n```\n> hexo new repository\n```\n> 你也可以直接复制 `theme/pure/_source/` 目录下 `repository文件夹` 到 `博客根目录/source/` 目录下\n\n3. 将文件内容修改为:\n\n```\n---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n```\n\n> 关键内容为 `layout: repository`, 包含该属性才可以展示github项目\n\n### 评论功能\n主题集成了[disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[来必力](https://livere.com/)、[gitment](https://github.com/imsun/gitment)、[gitalk](https://github.com/gitalk/gitalk)评论系统，选择其中一种即可\n\n你可以在主题配置文件中修改评论工具\n```\ncomment:\n  type: valine  # 启用哪种评论系统\n```\n\n#### Valine\n\n一个无后端的评论框工具, 其依赖于 [Leancloud](https://leancloud.cn) 开发, 所以使用前需要先注册 [Leancloud](https://leancloud.cn) 账号\n\n\n如何开始? 你可以从 [Valine-快速开始](https://valine.js.org/quickstart.html) 教程开始, 教程包含了一步一步的指引教程.\n\n##### Valine配置项\n\n主题valine评论框提供了以下配置项\n\n```\nvaline: # Valine官方地址: https://valine.js.org\n  appid:  # 你的 leancloud 应用 appid\n  appkey:  # 你的 leancloud 应用 appkey\n  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki\n  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能\n  placeholder: 说点什么... # 输入框默认内容\n  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar\n  meta: nick,mail,link # 自定义评论信息\n  pageSize: 10 # 评论列表分页\n  lang: zh-cn, # 多语言支持 zh-cn | en\n  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html\n  highlight: true # 代码高亮\n  recordIP: true # 记录评论者的IP\n```\n\n> 关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒\n> 关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据\n\n\n\n### 搜索功能\n主题提供内置的`搜索功能`和`百度搜索`, `百度搜索`就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.\n\n在主题配置文件 `_config.yml` 中配置:\n```\n# Search\nsearch:\n  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`\n  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能\n```\n\n#### 内置搜索\n\n使用搜索功能前需要先安装:\n\n```shell\nnpm i -S hexo-generator-json-content \n```\n\n项目地址: [https://github.com/alexbruno/hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)\n\n在你运行 `hexo g` 或者 `hexo s` 时生效，在 `hexo g` 生成站点时, 会在根目录下生成 `content.json` 该文件内容即为搜索内容。\n\n你可以对搜索内容进行自定义的配置， 只要在 `_config.yml` 中配置 [`jsonContent`](https://github.com/alexbruno/hexo-generator-json-content#defaults)即可:\n\n```\n# 示例: 隐藏分类和标签的搜索\njsonContent:\n  dateFormat: DD/MM/YYYY\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: false\n    author: false\n```\n\n\n\n### 文章阅读数量统计\n主题提供 [不蒜子](http://busuanzi.ibruce.info/) 和 基于 leancloud 的统计\n\n但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: \n\n评论框使用`valine`评论框(主题已经内置), 同时开启 `visitor: true` 配置项项即可\n\n### 字数统计&阅读时长\n\n主题内置了该功能, 使用前需要先安装插件:\n\n```\nnpm i -S hexo-wordcount\n```\n\n主题配置文件中, 开启设置即可:\n\n```\n# wordcount\npostCount:\n  enable: true\n  wordcount: true  # 文章字数统计\n  min2read: true  # 阅读时长预计\n```\n\n### 友情链接\n复制 `theme/pure/_source/` 目录下 `links文件夹` 到 `blog path/source/` 目录下\n在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。\n\n然后在文件内创建一个名为 `links.yml` 的文件,在其中添加相关数据即可。\n\n单个友情链接的格式为：\n```\nName:\n    link: http://example.com\n    avatar: http://example.com/avatar.png\n    desc: \"这是一个描述\"\n```\n\n添加多个友情链接，我们只需要根据上面的格式重复填写即可。\n\n- 将 Name 改为友情链接的名字，例如 Cofess。\n\n- http://example.com 为友情链接的地址。\n\n- http://example.com/avatar.png 为友情链接的头像。\n\n- 这是一个描述 为友情链接描述。","source":"_posts/hexo-theme-pure.md","raw":"---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntoc: true # 是否启用内容索引\nsidebar: true # 是否启用sidebar侧边栏，none：不启用\ntags: \n- hexo主题\n\ncategories:\n- hexo\n---\n\n`hexo` 主题 `pure` 项目相关信息:\n\n> 预览地址: [https://blog.cofess.com](https://blog.cofess.com)\n> 项目地址: [https://github.com/cofess/hexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n> 中文使用文档: [https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 使用前请操作\n使用该主题前, 请先复制 `theme/pure/_source/` 目录下的所有内容到 `blog path/source/` 目录下\n原因在于该目录下有建好的菜单 `categories`(分类)、`tags`(标签)、`repository`(项目)、`books`(书单)、`links`(友链)、`about`(关于)页面\n\n当你使用自动生成分类、标签，展示github项目时\n\n\n### 文章目录索引\n在文章详情页, 展示一个文章目录\n\n1. 主题配置文件中开启配置:\n```\nconfig\n  toc: true # 是否开启文章章节目录导航\n```\n\n2. 在文章顶部将该文章开启索引, 如:\n\n```\n---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntags: \n- hexo主题\n\ncategories:\n- hexo\n\ntoc: true # 是否启用内容索引\nsidebar: none # 是否启用sidebar侧边栏，none：不启用\n---\n```\n\n\n### 侧边栏\n\n主题配置项中, 侧边栏可以如下配置:\n\n```\n# 侧边栏\nsidebar: right\n# 侧边栏启用哪些模块\nwidgets:\n  - board # 公告\n  - category # 分类\n  - tag # 标签\n  - tagcloud # 标签云\n  - archive # 归档\n  - recent_posts # 最近文章\n\n# 归档列表的展示方式\narchive_type: 'monthly' # 归档方式:  yearly | monthly\nshow_count: true # 显示每个归档的文章总数\n```\n\n### 图集\n在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.\n主题的图册公告是使用[fancybox](https://github.com/fancyapps/fancybox)实现, 可以参照github\n\n```\n# Fancybox\n# 图集功能\nfancybox: true\n```\n\n### 展示github项目\n\n在左侧菜单`项目`中, 点击展示自己的github项目\n\n1. 在主题配置文件中 `_config.yml` 修改, 请配置自己github用户名\n\n```\ngithub: \n  username: caoruiy  # github用户名\n```\n\n2. 新建`repository`页面:\n\n```\n> hexo new repository\n```\n> 你也可以直接复制 `theme/pure/_source/` 目录下 `repository文件夹` 到 `博客根目录/source/` 目录下\n\n3. 将文件内容修改为:\n\n```\n---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n```\n\n> 关键内容为 `layout: repository`, 包含该属性才可以展示github项目\n\n### 评论功能\n主题集成了[disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[来必力](https://livere.com/)、[gitment](https://github.com/imsun/gitment)、[gitalk](https://github.com/gitalk/gitalk)评论系统，选择其中一种即可\n\n你可以在主题配置文件中修改评论工具\n```\ncomment:\n  type: valine  # 启用哪种评论系统\n```\n\n#### Valine\n\n一个无后端的评论框工具, 其依赖于 [Leancloud](https://leancloud.cn) 开发, 所以使用前需要先注册 [Leancloud](https://leancloud.cn) 账号\n\n\n如何开始? 你可以从 [Valine-快速开始](https://valine.js.org/quickstart.html) 教程开始, 教程包含了一步一步的指引教程.\n\n##### Valine配置项\n\n主题valine评论框提供了以下配置项\n\n```\nvaline: # Valine官方地址: https://valine.js.org\n  appid:  # 你的 leancloud 应用 appid\n  appkey:  # 你的 leancloud 应用 appkey\n  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki\n  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能\n  placeholder: 说点什么... # 输入框默认内容\n  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar\n  meta: nick,mail,link # 自定义评论信息\n  pageSize: 10 # 评论列表分页\n  lang: zh-cn, # 多语言支持 zh-cn | en\n  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html\n  highlight: true # 代码高亮\n  recordIP: true # 记录评论者的IP\n```\n\n> 关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒\n> 关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据\n\n\n\n### 搜索功能\n主题提供内置的`搜索功能`和`百度搜索`, `百度搜索`就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.\n\n在主题配置文件 `_config.yml` 中配置:\n```\n# Search\nsearch:\n  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`\n  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能\n```\n\n#### 内置搜索\n\n使用搜索功能前需要先安装:\n\n```shell\nnpm i -S hexo-generator-json-content \n```\n\n项目地址: [https://github.com/alexbruno/hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)\n\n在你运行 `hexo g` 或者 `hexo s` 时生效，在 `hexo g` 生成站点时, 会在根目录下生成 `content.json` 该文件内容即为搜索内容。\n\n你可以对搜索内容进行自定义的配置， 只要在 `_config.yml` 中配置 [`jsonContent`](https://github.com/alexbruno/hexo-generator-json-content#defaults)即可:\n\n```\n# 示例: 隐藏分类和标签的搜索\njsonContent:\n  dateFormat: DD/MM/YYYY\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: false\n    author: false\n```\n\n\n\n### 文章阅读数量统计\n主题提供 [不蒜子](http://busuanzi.ibruce.info/) 和 基于 leancloud 的统计\n\n但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: \n\n评论框使用`valine`评论框(主题已经内置), 同时开启 `visitor: true` 配置项项即可\n\n### 字数统计&阅读时长\n\n主题内置了该功能, 使用前需要先安装插件:\n\n```\nnpm i -S hexo-wordcount\n```\n\n主题配置文件中, 开启设置即可:\n\n```\n# wordcount\npostCount:\n  enable: true\n  wordcount: true  # 文章字数统计\n  min2read: true  # 阅读时长预计\n```\n\n### 友情链接\n复制 `theme/pure/_source/` 目录下 `links文件夹` 到 `blog path/source/` 目录下\n在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。\n\n然后在文件内创建一个名为 `links.yml` 的文件,在其中添加相关数据即可。\n\n单个友情链接的格式为：\n```\nName:\n    link: http://example.com\n    avatar: http://example.com/avatar.png\n    desc: \"这是一个描述\"\n```\n\n添加多个友情链接，我们只需要根据上面的格式重复填写即可。\n\n- 将 Name 改为友情链接的名字，例如 Cofess。\n\n- http://example.com 为友情链接的地址。\n\n- http://example.com/avatar.png 为友情链接的头像。\n\n- 这是一个描述 为友情链接描述。","slug":"hexo-theme-pure","published":1,"updated":"2019-11-07T07:14:55.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0n000bvcv63xf5fbyb","content":"<p><code>hexo</code> 主题 <code>pure</code> 项目相关信息:</p>\n<blockquote>\n<p>预览地址: <a href=\"https://blog.cofess.com\">https://blog.cofess.com</a><br>项目地址: <a href=\"https://github.com/cofess/hexo-theme-pure\">https://github.com/cofess/hexo-theme-pure</a><br>中文使用文档: <a href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p>\n</blockquote>\n<h3 id=\"使用前请操作\"><a href=\"#使用前请操作\" class=\"headerlink\" title=\"使用前请操作\"></a>使用前请操作</h3><p>使用该主题前, 请先复制 <code>theme/pure/_source/</code> 目录下的所有内容到 <code>blog path/source/</code> 目录下<br>原因在于该目录下有建好的菜单 <code>categories</code>(分类)、<code>tags</code>(标签)、<code>repository</code>(项目)、<code>books</code>(书单)、<code>links</code>(友链)、<code>about</code>(关于)页面</p>\n<p>当你使用自动生成分类、标签，展示github项目时</p>\n<h3 id=\"文章目录索引\"><a href=\"#文章目录索引\" class=\"headerlink\" title=\"文章目录索引\"></a>文章目录索引</h3><p>在文章详情页, 展示一个文章目录</p>\n<ol>\n<li><p>主题配置文件中开启配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config</span><br><span class=\"line\">  toc: true # 是否开启文章章节目录导航</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文章顶部将该文章开启索引, 如:</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo主题pure使用指南</span><br><span class=\"line\">date: 2019-11-05 14:34:15</span><br><span class=\"line\">tags: </span><br><span class=\"line\">- hexo主题</span><br><span class=\"line\"></span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\"></span><br><span class=\"line\">toc: true # 是否启用内容索引</span><br><span class=\"line\">sidebar: none # 是否启用sidebar侧边栏，none：不启用</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><p>主题配置项中, 侧边栏可以如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏</span><br><span class=\"line\">sidebar: right</span><br><span class=\"line\"># 侧边栏启用哪些模块</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">  - board # 公告</span><br><span class=\"line\">  - category # 分类</span><br><span class=\"line\">  - tag # 标签</span><br><span class=\"line\">  - tagcloud # 标签云</span><br><span class=\"line\">  - archive # 归档</span><br><span class=\"line\">  - recent_posts # 最近文章</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档列表的展示方式</span><br><span class=\"line\">archive_type: &#x27;monthly&#x27; # 归档方式:  yearly | monthly</span><br><span class=\"line\">show_count: true # 显示每个归档的文章总数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h3><p>在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.<br>主题的图册公告是使用<a href=\"https://github.com/fancyapps/fancybox\">fancybox</a>实现, 可以参照github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fancybox</span><br><span class=\"line\"># 图集功能</span><br><span class=\"line\">fancybox: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展示github项目\"><a href=\"#展示github项目\" class=\"headerlink\" title=\"展示github项目\"></a>展示github项目</h3><p>在左侧菜单<code>项目</code>中, 点击展示自己的github项目</p>\n<ol>\n<li>在主题配置文件中 <code>_config.yml</code> 修改, 请配置自己github用户名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github: </span><br><span class=\"line\">  username: caoruiy  # github用户名</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>repository</code>页面:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo new repository</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你也可以直接复制 <code>theme/pure/_source/</code> 目录下 <code>repository文件夹</code> 到 <code>博客根目录/source/</code> 目录下</p>\n</blockquote>\n<ol start=\"3\">\n<li>将文件内容修改为:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Repositories</span><br><span class=\"line\">layout: repository</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">sidebar: none</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关键内容为 <code>layout: repository</code>, 包含该属性才可以展示github项目</p>\n</blockquote>\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>主题集成了<a href=\"https://disqus.com/\">disqus</a>、<a href=\"http://www.uyan.cc/\">友言</a>、<a href=\"https://livere.com/\">来必力</a>、<a href=\"https://github.com/imsun/gitment\">gitment</a>、<a href=\"https://github.com/gitalk/gitalk\">gitalk</a>评论系统，选择其中一种即可</p>\n<p>你可以在主题配置文件中修改评论工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: valine  # 启用哪种评论系统</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h4><p>一个无后端的评论框工具, 其依赖于 <a href=\"https://leancloud.cn\">Leancloud</a> 开发, 所以使用前需要先注册 <a href=\"https://leancloud.cn\">Leancloud</a> 账号</p>\n<p>如何开始? 你可以从 <a href=\"https://valine.js.org/quickstart.html\">Valine-快速开始</a> 教程开始, 教程包含了一步一步的指引教程.</p>\n<h5 id=\"Valine配置项\"><a href=\"#Valine配置项\" class=\"headerlink\" title=\"Valine配置项\"></a>Valine配置项</h5><p>主题valine评论框提供了以下配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: # Valine官方地址: https://valine.js.org</span><br><span class=\"line\">  appid:  # 你的 leancloud 应用 appid</span><br><span class=\"line\">  appkey:  # 你的 leancloud 应用 appkey</span><br><span class=\"line\">  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki</span><br><span class=\"line\">  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能</span><br><span class=\"line\">  placeholder: 说点什么... # 输入框默认内容</span><br><span class=\"line\">  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar</span><br><span class=\"line\">  meta: nick,mail,link # 自定义评论信息</span><br><span class=\"line\">  pageSize: 10 # 评论列表分页</span><br><span class=\"line\">  lang: zh-cn, # 多语言支持 zh-cn | en</span><br><span class=\"line\">  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html</span><br><span class=\"line\">  highlight: true # 代码高亮</span><br><span class=\"line\">  recordIP: true # 记录评论者的IP</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒<br>关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据</p>\n</blockquote>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>主题提供内置的<code>搜索功能</code>和<code>百度搜索</code>, <code>百度搜索</code>就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.</p>\n<p>在主题配置文件 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Search</span><br><span class=\"line\">search:</span><br><span class=\"line\">  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`</span><br><span class=\"line\">  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置搜索\"><a href=\"#内置搜索\" class=\"headerlink\" title=\"内置搜索\"></a>内置搜索</h4><p>使用搜索功能前需要先安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-generator-json-content </span><br></pre></td></tr></table></figure>\n\n<p>项目地址: <a href=\"https://github.com/alexbruno/hexo-generator-json-content\">https://github.com/alexbruno/hexo-generator-json-content</a></p>\n<p>在你运行 <code>hexo g</code> 或者 <code>hexo s</code> 时生效，在 <code>hexo g</code> 生成站点时, 会在根目录下生成 <code>content.json</code> 该文件内容即为搜索内容。</p>\n<p>你可以对搜索内容进行自定义的配置， 只要在 <code>_config.yml</code> 中配置 <a href=\"https://github.com/alexbruno/hexo-generator-json-content#defaults\"><code>jsonContent</code></a>即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 示例: 隐藏分类和标签的搜索</span><br><span class=\"line\">jsonContent:</span><br><span class=\"line\">  dateFormat: DD/MM/YYYY</span><br><span class=\"line\">  posts:</span><br><span class=\"line\">    title: true</span><br><span class=\"line\">    date: true</span><br><span class=\"line\">    path: true</span><br><span class=\"line\">    text: true</span><br><span class=\"line\">    raw: false</span><br><span class=\"line\">    content: false</span><br><span class=\"line\">    slug: false</span><br><span class=\"line\">    updated: false</span><br><span class=\"line\">    comments: false</span><br><span class=\"line\">    link: false</span><br><span class=\"line\">    permalink: false</span><br><span class=\"line\">    excerpt: false</span><br><span class=\"line\">    categories: false</span><br><span class=\"line\">    tags: false</span><br><span class=\"line\">    author: false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文章阅读数量统计\"><a href=\"#文章阅读数量统计\" class=\"headerlink\" title=\"文章阅读数量统计\"></a>文章阅读数量统计</h3><p>主题提供 <a href=\"http://busuanzi.ibruce.info/\">不蒜子</a> 和 基于 leancloud 的统计</p>\n<p>但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: </p>\n<p>评论框使用<code>valine</code>评论框(主题已经内置), 同时开启 <code>visitor: true</code> 配置项项即可</p>\n<h3 id=\"字数统计-amp-阅读时长\"><a href=\"#字数统计-amp-阅读时长\" class=\"headerlink\" title=\"字数统计&amp;阅读时长\"></a>字数统计&amp;阅读时长</h3><p>主题内置了该功能, 使用前需要先安装插件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>主题配置文件中, 开启设置即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount</span><br><span class=\"line\">postCount:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  wordcount: true  # 文章字数统计</span><br><span class=\"line\">  min2read: true  # 阅读时长预计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>复制 <code>theme/pure/_source/</code> 目录下 <code>links文件夹</code> 到 <code>blog path/source/</code> 目录下<br>在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。</p>\n<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件,在其中添加相关数据即可。</p>\n<p>单个友情链接的格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:</span><br><span class=\"line\">    link: http://example.com</span><br><span class=\"line\">    avatar: http://example.com/avatar.png</span><br><span class=\"line\">    desc: &quot;这是一个描述&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p>\n<ul>\n<li><p>将 Name 改为友情链接的名字，例如 Cofess。</p>\n</li>\n<li><p><a href=\"http://example.com\">http://example.com</a> 为友情链接的地址。</p>\n</li>\n<li><p><a href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a> 为友情链接的头像。</p>\n</li>\n<li><p>这是一个描述 为友情链接描述。</p>\n</li>\n</ul>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p><code>hexo</code> 主题 <code>pure</code> 项目相关信息:</p>\n<blockquote>\n<p>预览地址: <a href=\"https://blog.cofess.com\">https://blog.cofess.com</a><br>项目地址: <a href=\"https://github.com/cofess/hexo-theme-pure\">https://github.com/cofess/hexo-theme-pure</a><br>中文使用文档: <a href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p>\n</blockquote>\n<h3 id=\"使用前请操作\"><a href=\"#使用前请操作\" class=\"headerlink\" title=\"使用前请操作\"></a>使用前请操作</h3><p>使用该主题前, 请先复制 <code>theme/pure/_source/</code> 目录下的所有内容到 <code>blog path/source/</code> 目录下<br>原因在于该目录下有建好的菜单 <code>categories</code>(分类)、<code>tags</code>(标签)、<code>repository</code>(项目)、<code>books</code>(书单)、<code>links</code>(友链)、<code>about</code>(关于)页面</p>\n<p>当你使用自动生成分类、标签，展示github项目时</p>\n<h3 id=\"文章目录索引\"><a href=\"#文章目录索引\" class=\"headerlink\" title=\"文章目录索引\"></a>文章目录索引</h3><p>在文章详情页, 展示一个文章目录</p>\n<ol>\n<li><p>主题配置文件中开启配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config</span><br><span class=\"line\">  toc: true # 是否开启文章章节目录导航</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文章顶部将该文章开启索引, 如:</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo主题pure使用指南</span><br><span class=\"line\">date: 2019-11-05 14:34:15</span><br><span class=\"line\">tags: </span><br><span class=\"line\">- hexo主题</span><br><span class=\"line\"></span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\"></span><br><span class=\"line\">toc: true # 是否启用内容索引</span><br><span class=\"line\">sidebar: none # 是否启用sidebar侧边栏，none：不启用</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><p>主题配置项中, 侧边栏可以如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏</span><br><span class=\"line\">sidebar: right</span><br><span class=\"line\"># 侧边栏启用哪些模块</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">  - board # 公告</span><br><span class=\"line\">  - category # 分类</span><br><span class=\"line\">  - tag # 标签</span><br><span class=\"line\">  - tagcloud # 标签云</span><br><span class=\"line\">  - archive # 归档</span><br><span class=\"line\">  - recent_posts # 最近文章</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档列表的展示方式</span><br><span class=\"line\">archive_type: &#x27;monthly&#x27; # 归档方式:  yearly | monthly</span><br><span class=\"line\">show_count: true # 显示每个归档的文章总数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h3><p>在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.<br>主题的图册公告是使用<a href=\"https://github.com/fancyapps/fancybox\">fancybox</a>实现, 可以参照github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fancybox</span><br><span class=\"line\"># 图集功能</span><br><span class=\"line\">fancybox: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展示github项目\"><a href=\"#展示github项目\" class=\"headerlink\" title=\"展示github项目\"></a>展示github项目</h3><p>在左侧菜单<code>项目</code>中, 点击展示自己的github项目</p>\n<ol>\n<li>在主题配置文件中 <code>_config.yml</code> 修改, 请配置自己github用户名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github: </span><br><span class=\"line\">  username: caoruiy  # github用户名</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>repository</code>页面:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo new repository</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你也可以直接复制 <code>theme/pure/_source/</code> 目录下 <code>repository文件夹</code> 到 <code>博客根目录/source/</code> 目录下</p>\n</blockquote>\n<ol start=\"3\">\n<li>将文件内容修改为:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Repositories</span><br><span class=\"line\">layout: repository</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">sidebar: none</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关键内容为 <code>layout: repository</code>, 包含该属性才可以展示github项目</p>\n</blockquote>\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>主题集成了<a href=\"https://disqus.com/\">disqus</a>、<a href=\"http://www.uyan.cc/\">友言</a>、<a href=\"https://livere.com/\">来必力</a>、<a href=\"https://github.com/imsun/gitment\">gitment</a>、<a href=\"https://github.com/gitalk/gitalk\">gitalk</a>评论系统，选择其中一种即可</p>\n<p>你可以在主题配置文件中修改评论工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: valine  # 启用哪种评论系统</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h4><p>一个无后端的评论框工具, 其依赖于 <a href=\"https://leancloud.cn\">Leancloud</a> 开发, 所以使用前需要先注册 <a href=\"https://leancloud.cn\">Leancloud</a> 账号</p>\n<p>如何开始? 你可以从 <a href=\"https://valine.js.org/quickstart.html\">Valine-快速开始</a> 教程开始, 教程包含了一步一步的指引教程.</p>\n<h5 id=\"Valine配置项\"><a href=\"#Valine配置项\" class=\"headerlink\" title=\"Valine配置项\"></a>Valine配置项</h5><p>主题valine评论框提供了以下配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: # Valine官方地址: https://valine.js.org</span><br><span class=\"line\">  appid:  # 你的 leancloud 应用 appid</span><br><span class=\"line\">  appkey:  # 你的 leancloud 应用 appkey</span><br><span class=\"line\">  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki</span><br><span class=\"line\">  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能</span><br><span class=\"line\">  placeholder: 说点什么... # 输入框默认内容</span><br><span class=\"line\">  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar</span><br><span class=\"line\">  meta: nick,mail,link # 自定义评论信息</span><br><span class=\"line\">  pageSize: 10 # 评论列表分页</span><br><span class=\"line\">  lang: zh-cn, # 多语言支持 zh-cn | en</span><br><span class=\"line\">  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html</span><br><span class=\"line\">  highlight: true # 代码高亮</span><br><span class=\"line\">  recordIP: true # 记录评论者的IP</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒<br>关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据</p>\n</blockquote>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>主题提供内置的<code>搜索功能</code>和<code>百度搜索</code>, <code>百度搜索</code>就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.</p>\n<p>在主题配置文件 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Search</span><br><span class=\"line\">search:</span><br><span class=\"line\">  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`</span><br><span class=\"line\">  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置搜索\"><a href=\"#内置搜索\" class=\"headerlink\" title=\"内置搜索\"></a>内置搜索</h4><p>使用搜索功能前需要先安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-generator-json-content </span><br></pre></td></tr></table></figure>\n\n<p>项目地址: <a href=\"https://github.com/alexbruno/hexo-generator-json-content\">https://github.com/alexbruno/hexo-generator-json-content</a></p>\n<p>在你运行 <code>hexo g</code> 或者 <code>hexo s</code> 时生效，在 <code>hexo g</code> 生成站点时, 会在根目录下生成 <code>content.json</code> 该文件内容即为搜索内容。</p>\n<p>你可以对搜索内容进行自定义的配置， 只要在 <code>_config.yml</code> 中配置 <a href=\"https://github.com/alexbruno/hexo-generator-json-content#defaults\"><code>jsonContent</code></a>即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 示例: 隐藏分类和标签的搜索</span><br><span class=\"line\">jsonContent:</span><br><span class=\"line\">  dateFormat: DD/MM/YYYY</span><br><span class=\"line\">  posts:</span><br><span class=\"line\">    title: true</span><br><span class=\"line\">    date: true</span><br><span class=\"line\">    path: true</span><br><span class=\"line\">    text: true</span><br><span class=\"line\">    raw: false</span><br><span class=\"line\">    content: false</span><br><span class=\"line\">    slug: false</span><br><span class=\"line\">    updated: false</span><br><span class=\"line\">    comments: false</span><br><span class=\"line\">    link: false</span><br><span class=\"line\">    permalink: false</span><br><span class=\"line\">    excerpt: false</span><br><span class=\"line\">    categories: false</span><br><span class=\"line\">    tags: false</span><br><span class=\"line\">    author: false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文章阅读数量统计\"><a href=\"#文章阅读数量统计\" class=\"headerlink\" title=\"文章阅读数量统计\"></a>文章阅读数量统计</h3><p>主题提供 <a href=\"http://busuanzi.ibruce.info/\">不蒜子</a> 和 基于 leancloud 的统计</p>\n<p>但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: </p>\n<p>评论框使用<code>valine</code>评论框(主题已经内置), 同时开启 <code>visitor: true</code> 配置项项即可</p>\n<h3 id=\"字数统计-amp-阅读时长\"><a href=\"#字数统计-amp-阅读时长\" class=\"headerlink\" title=\"字数统计&amp;阅读时长\"></a>字数统计&amp;阅读时长</h3><p>主题内置了该功能, 使用前需要先安装插件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>主题配置文件中, 开启设置即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount</span><br><span class=\"line\">postCount:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  wordcount: true  # 文章字数统计</span><br><span class=\"line\">  min2read: true  # 阅读时长预计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>复制 <code>theme/pure/_source/</code> 目录下 <code>links文件夹</code> 到 <code>blog path/source/</code> 目录下<br>在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。</p>\n<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件,在其中添加相关数据即可。</p>\n<p>单个友情链接的格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:</span><br><span class=\"line\">    link: http://example.com</span><br><span class=\"line\">    avatar: http://example.com/avatar.png</span><br><span class=\"line\">    desc: &quot;这是一个描述&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p>\n<ul>\n<li><p>将 Name 改为友情链接的名字，例如 Cofess。</p>\n</li>\n<li><p><a href=\"http://example.com\">http://example.com</a> 为友情链接的地址。</p>\n</li>\n<li><p><a href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a> 为友情链接的头像。</p>\n</li>\n<li><p>这是一个描述 为友情链接描述。</p>\n</li>\n</ul>\n"},{"title":"如果优雅的部署hexo博客到自己的服务器","toc":true,"sidebar":true,"date":"2019-11-08T00:35:55.000Z","_content":"\n### 服务器搭建\n\n### 服务器准备信息\n\n#### 购买云主机\n\n完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的\n\n#### 相关软件安装\n\n这里推荐使用 [ezhttp 工具](https://www.centos.bz/2017/02/ezhttp/) 来进行服务器环境的安装, 他的简介是这样的: \n\nezhttp是一个[Linux](https://www.centos.bz/tag/linux/)一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,[LNAMP](https://www.centos.bz/tag/lnamp/)环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<https://github.com/centos-bz/ezhttp>。\n\n#### 配置nginx服务器\n\n安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. \n\n找到`nginx`配置文件, 假定你安装在`/usr/local/nginx`\n\n```shell\n> cd /user/local/nginx/conf\n> cd vhost\n> touch myblog.conf\n```\n\n写入以下内容, 修改包含注释的位置为你的实际内容即可\n\n```\n\nserver {\n        listen 80;\n        # 网站的IP地址\n        server_name blog.plcent.com;\n        index index.html index.php index.htm;\n        # 指定的站点目录\n        root /home/website/myblog;\n\n        location / {\n            try_files $uri $uri/index.html @apache;\n        }\n\n        location @apache {\n            internal;\n            proxy_pass http://127.0.0.1:88;\n            include proxy.conf;\n        }\n\n        location ~ .*\\.(php|php5)?$ {\n             proxy_pass http://127.0.0.1:88;\n             include proxy.conf;\n        }\n\n```\n\n> 你可以为内一个站点配置一个文件\n\n重启服务器, 使得新配置生效\n\n```shell\n> /etc/init.d/nginx restart\n```\n\n\n\n#### 建立git账号\n\n你需要在服务器上建立一个`git`账号, 用来推送仓库使用(因为使用`root`账号并不是很安全)\n\n```shell\n# 添加git用户\n> useradd git\n# 为用户设置密码\n> passwd git\n# 为了安全, 只为git用户配置git shell\n> usermod -s /bin/git-shell git\n```\n\n#### 建立空仓库\n\n```shell\n# 进入自己的git仓库\n> cd /data/gitstore\n# 初始化一个空仓库\n> git init --bare myblog.git\n```\n\n#### 仓库修改权限\n\n正常情况下, 你建立仓库时是使用`root`账号创立的, `git`用户无权操作该目录, 你需要将该仓库的操作权限交给`git`\n\n```shell\n>  chown -R git:git myblog.git\n```\n\n> `-R` 一定要添加, 该属性将递归修改所有文件的权限\n\n#### hexo 配置推送仓库\n\n在hexo根目录的 `_config.yml` 中配置:\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@your_server_IP:/data/gitstore/myblog\n  branch: master\n```\n\n> 替换`your_server_IP`为你服务器实际的IP地址\n>\n> 替换`/data/gitstore/myblog`为你git仓库的实际路径\n\n#### hexo d 推送仓库到自己服务器\n\n在使用`hexo d` 命令推送编译好的博客内容到仓库时, 你需要在本地先安装\n\n```\n> npm install hexo-deployer-git --save\n```\n\n安装完成之后, 使用 `hexo d` 推送试试, 推送成功将显示:\n\n![推送成功](./how-to-deploy-hexo-to-self-server/1573175297499.png)\n\n\n查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录\n\n#### 配置ssh\n\n[设置 SSH Key 登录服务器和 Git 服务器](https://www.cnblogs.com/feiffy/p/8995003.html)\n\n\n\n\n### 让服务器git自动部署博客\n\n自动部署的原理就是利用`git`钩子`post-receive`在仓库被提交之后执行钩子中定义的命令\n\n```shell\n# 进入git仓库hooks目录\n> cd /data/gitstore/myblog.git/hooks\n# 如果没有post-receive文件则新建\n> touch post-receive\n# 写入内容\n> vi post-receive\n```\n\n```\n#!/bin/bash\n#指定我的代码检出目录\nDIR=/home/wwwroot/myblog\ngit --work-tree=${DIR} clean -fd\n#直接强制检出\ngit --work-tree=${DIR} checkout --force\n```\n\n> 修改`/home/wwwroot/myblog`为你网站实际部署的地址\n\n修改钩子文件执行权限\n\n```\n# 为钩子文件添加可执行权限\n> chmod 766 post-receive\n# 重新刷一遍仓库权限\n> cd ../../\n> chown -R git:git myblog.git\n```\n\n#### 推送博客\n\n```\n> hexo clean\n> hexo g\n> hexo d\n```\n\n\n\n\n\n### 参考文档\n\n[Linux一键配置工具ezhttp介绍](https://www.centos.bz/2017/02/ezhttp/)\n\n[ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境](https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/)\n\n[带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器](<https://blog.csdn.net/qq_35561857/article/details/81590953>)\n\n[git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法](<https://blog.csdn.net/sungdut/article/details/46129711>)\n\n\n\n","source":"_posts/how-to-deploy-hexo-to-self-server.md","raw":"---\ntitle: 如果优雅的部署hexo博客到自己的服务器\ntoc: true\nsidebar: true\ndate: 2019-11-08 08:35:55\ntags:\n- hexo\ncategories:\n- hexo\n---\n\n### 服务器搭建\n\n### 服务器准备信息\n\n#### 购买云主机\n\n完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的\n\n#### 相关软件安装\n\n这里推荐使用 [ezhttp 工具](https://www.centos.bz/2017/02/ezhttp/) 来进行服务器环境的安装, 他的简介是这样的: \n\nezhttp是一个[Linux](https://www.centos.bz/tag/linux/)一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,[LNAMP](https://www.centos.bz/tag/lnamp/)环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<https://github.com/centos-bz/ezhttp>。\n\n#### 配置nginx服务器\n\n安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. \n\n找到`nginx`配置文件, 假定你安装在`/usr/local/nginx`\n\n```shell\n> cd /user/local/nginx/conf\n> cd vhost\n> touch myblog.conf\n```\n\n写入以下内容, 修改包含注释的位置为你的实际内容即可\n\n```\n\nserver {\n        listen 80;\n        # 网站的IP地址\n        server_name blog.plcent.com;\n        index index.html index.php index.htm;\n        # 指定的站点目录\n        root /home/website/myblog;\n\n        location / {\n            try_files $uri $uri/index.html @apache;\n        }\n\n        location @apache {\n            internal;\n            proxy_pass http://127.0.0.1:88;\n            include proxy.conf;\n        }\n\n        location ~ .*\\.(php|php5)?$ {\n             proxy_pass http://127.0.0.1:88;\n             include proxy.conf;\n        }\n\n```\n\n> 你可以为内一个站点配置一个文件\n\n重启服务器, 使得新配置生效\n\n```shell\n> /etc/init.d/nginx restart\n```\n\n\n\n#### 建立git账号\n\n你需要在服务器上建立一个`git`账号, 用来推送仓库使用(因为使用`root`账号并不是很安全)\n\n```shell\n# 添加git用户\n> useradd git\n# 为用户设置密码\n> passwd git\n# 为了安全, 只为git用户配置git shell\n> usermod -s /bin/git-shell git\n```\n\n#### 建立空仓库\n\n```shell\n# 进入自己的git仓库\n> cd /data/gitstore\n# 初始化一个空仓库\n> git init --bare myblog.git\n```\n\n#### 仓库修改权限\n\n正常情况下, 你建立仓库时是使用`root`账号创立的, `git`用户无权操作该目录, 你需要将该仓库的操作权限交给`git`\n\n```shell\n>  chown -R git:git myblog.git\n```\n\n> `-R` 一定要添加, 该属性将递归修改所有文件的权限\n\n#### hexo 配置推送仓库\n\n在hexo根目录的 `_config.yml` 中配置:\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@your_server_IP:/data/gitstore/myblog\n  branch: master\n```\n\n> 替换`your_server_IP`为你服务器实际的IP地址\n>\n> 替换`/data/gitstore/myblog`为你git仓库的实际路径\n\n#### hexo d 推送仓库到自己服务器\n\n在使用`hexo d` 命令推送编译好的博客内容到仓库时, 你需要在本地先安装\n\n```\n> npm install hexo-deployer-git --save\n```\n\n安装完成之后, 使用 `hexo d` 推送试试, 推送成功将显示:\n\n![推送成功](./how-to-deploy-hexo-to-self-server/1573175297499.png)\n\n\n查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录\n\n#### 配置ssh\n\n[设置 SSH Key 登录服务器和 Git 服务器](https://www.cnblogs.com/feiffy/p/8995003.html)\n\n\n\n\n### 让服务器git自动部署博客\n\n自动部署的原理就是利用`git`钩子`post-receive`在仓库被提交之后执行钩子中定义的命令\n\n```shell\n# 进入git仓库hooks目录\n> cd /data/gitstore/myblog.git/hooks\n# 如果没有post-receive文件则新建\n> touch post-receive\n# 写入内容\n> vi post-receive\n```\n\n```\n#!/bin/bash\n#指定我的代码检出目录\nDIR=/home/wwwroot/myblog\ngit --work-tree=${DIR} clean -fd\n#直接强制检出\ngit --work-tree=${DIR} checkout --force\n```\n\n> 修改`/home/wwwroot/myblog`为你网站实际部署的地址\n\n修改钩子文件执行权限\n\n```\n# 为钩子文件添加可执行权限\n> chmod 766 post-receive\n# 重新刷一遍仓库权限\n> cd ../../\n> chown -R git:git myblog.git\n```\n\n#### 推送博客\n\n```\n> hexo clean\n> hexo g\n> hexo d\n```\n\n\n\n\n\n### 参考文档\n\n[Linux一键配置工具ezhttp介绍](https://www.centos.bz/2017/02/ezhttp/)\n\n[ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境](https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/)\n\n[带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器](<https://blog.csdn.net/qq_35561857/article/details/81590953>)\n\n[git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法](<https://blog.csdn.net/sungdut/article/details/46129711>)\n\n\n\n","slug":"how-to-deploy-hexo-to-self-server","published":1,"updated":"2019-11-21T01:48:58.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0p000fvcv6g9bva3m2","content":"<h3 id=\"服务器搭建\"><a href=\"#服务器搭建\" class=\"headerlink\" title=\"服务器搭建\"></a>服务器搭建</h3><h3 id=\"服务器准备信息\"><a href=\"#服务器准备信息\" class=\"headerlink\" title=\"服务器准备信息\"></a>服务器准备信息</h3><h4 id=\"购买云主机\"><a href=\"#购买云主机\" class=\"headerlink\" title=\"购买云主机\"></a>购买云主机</h4><p>完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的</p>\n<h4 id=\"相关软件安装\"><a href=\"#相关软件安装\" class=\"headerlink\" title=\"相关软件安装\"></a>相关软件安装</h4><p>这里推荐使用 <a href=\"https://www.centos.bz/2017/02/ezhttp/\">ezhttp 工具</a> 来进行服务器环境的安装, 他的简介是这样的: </p>\n<p>ezhttp是一个<a href=\"https://www.centos.bz/tag/linux/\">Linux</a>一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,<a href=\"https://www.centos.bz/tag/lnamp/\">LNAMP</a>环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<a href=\"https://github.com/centos-bz/ezhttp\">https://github.com/centos-bz/ezhttp</a>。</p>\n<h4 id=\"配置nginx服务器\"><a href=\"#配置nginx服务器\" class=\"headerlink\" title=\"配置nginx服务器\"></a>配置nginx服务器</h4><p>安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. </p>\n<p>找到<code>nginx</code>配置文件, 假定你安装在<code>/usr/local/nginx</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /user/local/nginx/conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> vhost</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> myblog.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容, 修改包含注释的位置为你的实际内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        # 网站的IP地址</span><br><span class=\"line\">        server_name blog.plcent.com;</span><br><span class=\"line\">        index index.html index.php index.htm;</span><br><span class=\"line\">        # 指定的站点目录</span><br><span class=\"line\">        root /home/website/myblog;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri $uri/index.html @apache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location @apache &#123;</span><br><span class=\"line\">            internal;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*\\.(php|php5)?$ &#123;</span><br><span class=\"line\">             proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">             include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你可以为内一个站点配置一个文件</p>\n</blockquote>\n<p>重启服务器, 使得新配置生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"建立git账号\"><a href=\"#建立git账号\" class=\"headerlink\" title=\"建立git账号\"></a>建立git账号</h4><p>你需要在服务器上建立一个<code>git</code>账号, 用来推送仓库使用(因为使用<code>root</code>账号并不是很安全)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加git用户</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">useradd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为用户设置密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">passwd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了安全, 只为git用户配置git shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">usermod -s /bin/git-shell git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"建立空仓库\"><a href=\"#建立空仓库\" class=\"headerlink\" title=\"建立空仓库\"></a>建立空仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入自己的git仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化一个空仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">git init --bare myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库修改权限\"><a href=\"#仓库修改权限\" class=\"headerlink\" title=\"仓库修改权限\"></a>仓库修改权限</h4><p>正常情况下, 你建立仓库时是使用<code>root</code>账号创立的, <code>git</code>用户无权操作该目录, 你需要将该仓库的操作权限交给<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"> <span class=\"built_in\">chown</span> -R git:git myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-R</code> 一定要添加, 该属性将递归修改所有文件的权限</p>\n</blockquote>\n<h4 id=\"hexo-配置推送仓库\"><a href=\"#hexo-配置推送仓库\" class=\"headerlink\" title=\"hexo 配置推送仓库\"></a>hexo 配置推送仓库</h4><p>在hexo根目录的 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@your_server_IP:/data/gitstore/myblog</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换<code>your_server_IP</code>为你服务器实际的IP地址</p>\n<p>替换<code>/data/gitstore/myblog</code>为你git仓库的实际路径</p>\n</blockquote>\n<h4 id=\"hexo-d-推送仓库到自己服务器\"><a href=\"#hexo-d-推送仓库到自己服务器\" class=\"headerlink\" title=\"hexo d 推送仓库到自己服务器\"></a>hexo d 推送仓库到自己服务器</h4><p>在使用<code>hexo d</code> 命令推送编译好的博客内容到仓库时, 你需要在本地先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后, 使用 <code>hexo d</code> 推送试试, 推送成功将显示:</p>\n<p><img src=\"/2019/11/08/how-to-deploy-hexo-to-self-server/1573175297499.png\" alt=\"推送成功\"></p>\n<p>查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录</p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><p><a href=\"https://www.cnblogs.com/feiffy/p/8995003.html\">设置 SSH Key 登录服务器和 Git 服务器</a></p>\n<h3 id=\"让服务器git自动部署博客\"><a href=\"#让服务器git自动部署博客\" class=\"headerlink\" title=\"让服务器git自动部署博客\"></a>让服务器git自动部署博客</h3><p>自动部署的原理就是利用<code>git</code>钩子<code>post-receive</code>在仓库被提交之后执行钩子中定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入git仓库hooks目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore/myblog.git/hooks</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果没有post-receive文件则新建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> post-receive</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">vi post-receive</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#指定我的代码检出目录</span><br><span class=\"line\">DIR=/home/wwwroot/myblog</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class=\"line\">#直接强制检出</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改<code>/home/wwwroot/myblog</code>为你网站实际部署的地址</p>\n</blockquote>\n<p>修改钩子文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为钩子文件添加可执行权限</span><br><span class=\"line\">&gt; chmod 766 post-receive</span><br><span class=\"line\"># 重新刷一遍仓库权限</span><br><span class=\"line\">&gt; cd ../../</span><br><span class=\"line\">&gt; chown -R git:git myblog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo g</span><br><span class=\"line\">&gt; hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p><a href=\"https://www.centos.bz/2017/02/ezhttp/\">Linux一键配置工具ezhttp介绍</a></p>\n<p><a href=\"https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/\">ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\">带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器</a></p>\n<p><a href=\"https://blog.csdn.net/sungdut/article/details/46129711\">git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法</a></p>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"服务器搭建\"><a href=\"#服务器搭建\" class=\"headerlink\" title=\"服务器搭建\"></a>服务器搭建</h3><h3 id=\"服务器准备信息\"><a href=\"#服务器准备信息\" class=\"headerlink\" title=\"服务器准备信息\"></a>服务器准备信息</h3><h4 id=\"购买云主机\"><a href=\"#购买云主机\" class=\"headerlink\" title=\"购买云主机\"></a>购买云主机</h4><p>完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的</p>\n<h4 id=\"相关软件安装\"><a href=\"#相关软件安装\" class=\"headerlink\" title=\"相关软件安装\"></a>相关软件安装</h4><p>这里推荐使用 <a href=\"https://www.centos.bz/2017/02/ezhttp/\">ezhttp 工具</a> 来进行服务器环境的安装, 他的简介是这样的: </p>\n<p>ezhttp是一个<a href=\"https://www.centos.bz/tag/linux/\">Linux</a>一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,<a href=\"https://www.centos.bz/tag/lnamp/\">LNAMP</a>环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<a href=\"https://github.com/centos-bz/ezhttp\">https://github.com/centos-bz/ezhttp</a>。</p>\n<h4 id=\"配置nginx服务器\"><a href=\"#配置nginx服务器\" class=\"headerlink\" title=\"配置nginx服务器\"></a>配置nginx服务器</h4><p>安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. </p>\n<p>找到<code>nginx</code>配置文件, 假定你安装在<code>/usr/local/nginx</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /user/local/nginx/conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> vhost</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> myblog.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容, 修改包含注释的位置为你的实际内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        # 网站的IP地址</span><br><span class=\"line\">        server_name blog.plcent.com;</span><br><span class=\"line\">        index index.html index.php index.htm;</span><br><span class=\"line\">        # 指定的站点目录</span><br><span class=\"line\">        root /home/website/myblog;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri $uri/index.html @apache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location @apache &#123;</span><br><span class=\"line\">            internal;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*\\.(php|php5)?$ &#123;</span><br><span class=\"line\">             proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">             include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你可以为内一个站点配置一个文件</p>\n</blockquote>\n<p>重启服务器, 使得新配置生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"建立git账号\"><a href=\"#建立git账号\" class=\"headerlink\" title=\"建立git账号\"></a>建立git账号</h4><p>你需要在服务器上建立一个<code>git</code>账号, 用来推送仓库使用(因为使用<code>root</code>账号并不是很安全)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加git用户</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">useradd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为用户设置密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">passwd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了安全, 只为git用户配置git shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">usermod -s /bin/git-shell git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"建立空仓库\"><a href=\"#建立空仓库\" class=\"headerlink\" title=\"建立空仓库\"></a>建立空仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入自己的git仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化一个空仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">git init --bare myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库修改权限\"><a href=\"#仓库修改权限\" class=\"headerlink\" title=\"仓库修改权限\"></a>仓库修改权限</h4><p>正常情况下, 你建立仓库时是使用<code>root</code>账号创立的, <code>git</code>用户无权操作该目录, 你需要将该仓库的操作权限交给<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"> <span class=\"built_in\">chown</span> -R git:git myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-R</code> 一定要添加, 该属性将递归修改所有文件的权限</p>\n</blockquote>\n<h4 id=\"hexo-配置推送仓库\"><a href=\"#hexo-配置推送仓库\" class=\"headerlink\" title=\"hexo 配置推送仓库\"></a>hexo 配置推送仓库</h4><p>在hexo根目录的 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@your_server_IP:/data/gitstore/myblog</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换<code>your_server_IP</code>为你服务器实际的IP地址</p>\n<p>替换<code>/data/gitstore/myblog</code>为你git仓库的实际路径</p>\n</blockquote>\n<h4 id=\"hexo-d-推送仓库到自己服务器\"><a href=\"#hexo-d-推送仓库到自己服务器\" class=\"headerlink\" title=\"hexo d 推送仓库到自己服务器\"></a>hexo d 推送仓库到自己服务器</h4><p>在使用<code>hexo d</code> 命令推送编译好的博客内容到仓库时, 你需要在本地先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后, 使用 <code>hexo d</code> 推送试试, 推送成功将显示:</p>\n<p><img src=\"/2019/11/08/how-to-deploy-hexo-to-self-server/1573175297499.png\" alt=\"推送成功\"></p>\n<p>查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录</p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><p><a href=\"https://www.cnblogs.com/feiffy/p/8995003.html\">设置 SSH Key 登录服务器和 Git 服务器</a></p>\n<h3 id=\"让服务器git自动部署博客\"><a href=\"#让服务器git自动部署博客\" class=\"headerlink\" title=\"让服务器git自动部署博客\"></a>让服务器git自动部署博客</h3><p>自动部署的原理就是利用<code>git</code>钩子<code>post-receive</code>在仓库被提交之后执行钩子中定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入git仓库hooks目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore/myblog.git/hooks</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果没有post-receive文件则新建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> post-receive</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">vi post-receive</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#指定我的代码检出目录</span><br><span class=\"line\">DIR=/home/wwwroot/myblog</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class=\"line\">#直接强制检出</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改<code>/home/wwwroot/myblog</code>为你网站实际部署的地址</p>\n</blockquote>\n<p>修改钩子文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为钩子文件添加可执行权限</span><br><span class=\"line\">&gt; chmod 766 post-receive</span><br><span class=\"line\"># 重新刷一遍仓库权限</span><br><span class=\"line\">&gt; cd ../../</span><br><span class=\"line\">&gt; chown -R git:git myblog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo g</span><br><span class=\"line\">&gt; hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p><a href=\"https://www.centos.bz/2017/02/ezhttp/\">Linux一键配置工具ezhttp介绍</a></p>\n<p><a href=\"https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/\">ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\">带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器</a></p>\n<p><a href=\"https://blog.csdn.net/sungdut/article/details/46129711\">git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法</a></p>\n"},{"title":"mysql-数据迁移","toc":true,"sidebar":true,"date":"2021-09-01T06:50:35.000Z","_content":"\n# mysql数据导入导出\n\n简单介绍mysql自带数据备份工具mysqldump和数据导入\n\n\n\n## mysqldump\n\n`mysqldump` 是 `MySQL` 自带的逻辑备份工具。\n\n它的备份原理是通过协议连接到 `MySQL` 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的`insert` 语句，当我们需要还原这些数据时，只要执行这些 `insert` 语句，即可将对应的数据还原。\n\n\n\n`mysqldump`优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。\n\n\n\nmysql 官方文档 [https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 命令格式\n\n```java\nmysqldump [options] db_name [tbl_name ...]\nmysqldump [options] --databases db_name ...\nmysqldump [options] --all-databases\n```\n\n\n\n### 常用选项说明\n\n| 参数名                                                       | 缩写 | 含义                                                         |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ |\n| --host                                                       | -h   | 服务器IP地址                                                 |\n| --port                                                       | -P   | 服务器端口号                                                 |\n| --user                                                       | -u   | MySQL 用户名                                                 |\n| --pasword                                                    | -p   | MySQL 密码                                                   |\n| --databases                                                  |      | 指定要备份的数据库                                           |\n| --all-databases                                              |      | 备份mysql服务器上的所有数据库                                |\n| [`--add-drop-database`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database) |      | 在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句       |\n| [--add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句 |\n| [--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt) |      | --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset 语句的简写。该选项默认启用。 |\n| [--skip-add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句         |\n| [--extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 使用多行 INSERT 语法。输出一条insert语句                     |\n| [--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 关闭--extended-insert。输出多条insert语句                    |\n| --compact                                                    |      | 压缩模式，产生更少的输出                                     |\n| --comments                                                   |      | 添加注释信息                                                 |\n| --complete-insert                                            |      | 输出完成的插入语句                                           |\n| --lock-tables                                                | -l   | 备份前，锁定所有数据库表                                     |\n| --no-create-db/--no-create-info                              |      | 禁止生成创建数据库语句                                       |\n| --no-data                                                    |      | 不写入任何表行信息（即不转储表内容）。如果您只想转储[`CREATE TABLE`](https://dev.mysql.com/doc/refman/5.6/en/create-table.html)表的语句 |\n| --force                                                      |      | 当出现错误时仍然继续备份操作                                 |\n| --default-character-set                                      |      | 指定默认字符集                                               |\n| [--add-locks](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks) |      | 备份数据库表时锁定数据库表。生产环境慎用                     |\n| --where='*`where_condition`*'                                | -w   | 仅转储由给定`WHERE`条件选择的行 。                           |\n| --quick`, `-q                                                | -q   | 一次一行地从服务器检索表的行                                 |\n| [--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction) |      | 在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份        |\n| --skip-opt                                                   |      | 关闭由 --opt 设置的选项。避免锁表备份                        |\n| --result-file                                                | >    | 导出结果输出到文件                                           |\n\n全部选项参见[https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 常见示例\n\n1. 导出所有数据库\n\n该命令会导出mysql中所有的数据库内容，如果你是全表备份，\n\n```mysql\nmysqldump -u用户名 -p密码 --all-databases > ~/all.sql\n```\n\n2. 导出指定数据库\n\n```\nmysqldump -u用户名 -p密码 --databases db1 > ~/db1.sql\n```\n\n该[`--databases`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases)选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，[**mysqldump**](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)将第一个名称视为数据库名称，将后面的名称视为表名称。\n\n3. 导出指定数据库的指定表\n\n```mysql\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF > ~/tableName.sql\n```\n\n4. 导出数据时指定条件--where\n\n```mysql\n# 只导出ID>10的记录\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=\"id>10\" > ~/tableName.sql\n```\n\n\n\n\n\n### 常见问题\n\n#### 避免锁表\n\n默认mysqldump备份会`lock-tables`，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表\n\n##### --single-transaction\n\n[--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction)是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。\n\n##### --skip-opt\n\n由于[--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt)选项默认启用，因此您只需指定其相反的选项 [`--skip-opt`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt)即可关闭几个默认设置。\n\n##### --skip-lock-tables\n\n使用`--opt`选项时，会自动启动`--lock-tables`，如果你不想锁表操作，可以指定`--skip-opt`或者追加`--skip-lock-tables`属性来覆盖它。\n\n\n\n#### 一条记录输出一条insert语句\n\n[--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) 语句可以关闭默认的多行 INSERT 语法。\n\n```mysql\nmysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName > ~/tableName.sql\n```\n\n\n\n#### 转储大表\n\n[--quick](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick) 该选项用于转储大的表。它强制**mysqldump**从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。\n\n\n\n### 导入\n\n#### 重新导入有mysqldump导出的SQL文件\n\n1. 直接通过mysql导入\n\n```shell\n# 如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql\nshell> mysql < dump.sql\n# 如果不存在，在加载转储文件时指定数据库名称\nshell> mysql db1 < dump.sql\n```\n\n2. 使用source命令\n\n进入mysql命令行，使用mysql中的source命令导入\n\n```mysql\nmysql> source dump.sql\n```\n\n如果文件不包含`CREATE_DATABASE`和`USE`语句，需要提前创建数据库\n\n```shell\nshell> mysqladmin create db1\n```\n\n或者\n\n```mysq\nmysql> CREATE DATABASE IF NOT EXISTS db1;\nmysql> USE db1;\nmysql> source dump.sql\n```\n\n\n\n","source":"_posts/mysql-dump-source.md","raw":"---\ntitle: mysql-数据迁移\ntoc: true\nsidebar: true\ndate: 2021-09-01 14:50:35\ntags: \n- mysql\ncategories:\n- mysq\n---\n\n# mysql数据导入导出\n\n简单介绍mysql自带数据备份工具mysqldump和数据导入\n\n\n\n## mysqldump\n\n`mysqldump` 是 `MySQL` 自带的逻辑备份工具。\n\n它的备份原理是通过协议连接到 `MySQL` 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的`insert` 语句，当我们需要还原这些数据时，只要执行这些 `insert` 语句，即可将对应的数据还原。\n\n\n\n`mysqldump`优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。\n\n\n\nmysql 官方文档 [https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 命令格式\n\n```java\nmysqldump [options] db_name [tbl_name ...]\nmysqldump [options] --databases db_name ...\nmysqldump [options] --all-databases\n```\n\n\n\n### 常用选项说明\n\n| 参数名                                                       | 缩写 | 含义                                                         |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ |\n| --host                                                       | -h   | 服务器IP地址                                                 |\n| --port                                                       | -P   | 服务器端口号                                                 |\n| --user                                                       | -u   | MySQL 用户名                                                 |\n| --pasword                                                    | -p   | MySQL 密码                                                   |\n| --databases                                                  |      | 指定要备份的数据库                                           |\n| --all-databases                                              |      | 备份mysql服务器上的所有数据库                                |\n| [`--add-drop-database`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database) |      | 在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句       |\n| [--add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句 |\n| [--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt) |      | --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset 语句的简写。该选项默认启用。 |\n| [--skip-add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句         |\n| [--extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 使用多行 INSERT 语法。输出一条insert语句                     |\n| [--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 关闭--extended-insert。输出多条insert语句                    |\n| --compact                                                    |      | 压缩模式，产生更少的输出                                     |\n| --comments                                                   |      | 添加注释信息                                                 |\n| --complete-insert                                            |      | 输出完成的插入语句                                           |\n| --lock-tables                                                | -l   | 备份前，锁定所有数据库表                                     |\n| --no-create-db/--no-create-info                              |      | 禁止生成创建数据库语句                                       |\n| --no-data                                                    |      | 不写入任何表行信息（即不转储表内容）。如果您只想转储[`CREATE TABLE`](https://dev.mysql.com/doc/refman/5.6/en/create-table.html)表的语句 |\n| --force                                                      |      | 当出现错误时仍然继续备份操作                                 |\n| --default-character-set                                      |      | 指定默认字符集                                               |\n| [--add-locks](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks) |      | 备份数据库表时锁定数据库表。生产环境慎用                     |\n| --where='*`where_condition`*'                                | -w   | 仅转储由给定`WHERE`条件选择的行 。                           |\n| --quick`, `-q                                                | -q   | 一次一行地从服务器检索表的行                                 |\n| [--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction) |      | 在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份        |\n| --skip-opt                                                   |      | 关闭由 --opt 设置的选项。避免锁表备份                        |\n| --result-file                                                | >    | 导出结果输出到文件                                           |\n\n全部选项参见[https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 常见示例\n\n1. 导出所有数据库\n\n该命令会导出mysql中所有的数据库内容，如果你是全表备份，\n\n```mysql\nmysqldump -u用户名 -p密码 --all-databases > ~/all.sql\n```\n\n2. 导出指定数据库\n\n```\nmysqldump -u用户名 -p密码 --databases db1 > ~/db1.sql\n```\n\n该[`--databases`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases)选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，[**mysqldump**](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)将第一个名称视为数据库名称，将后面的名称视为表名称。\n\n3. 导出指定数据库的指定表\n\n```mysql\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF > ~/tableName.sql\n```\n\n4. 导出数据时指定条件--where\n\n```mysql\n# 只导出ID>10的记录\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=\"id>10\" > ~/tableName.sql\n```\n\n\n\n\n\n### 常见问题\n\n#### 避免锁表\n\n默认mysqldump备份会`lock-tables`，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表\n\n##### --single-transaction\n\n[--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction)是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。\n\n##### --skip-opt\n\n由于[--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt)选项默认启用，因此您只需指定其相反的选项 [`--skip-opt`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt)即可关闭几个默认设置。\n\n##### --skip-lock-tables\n\n使用`--opt`选项时，会自动启动`--lock-tables`，如果你不想锁表操作，可以指定`--skip-opt`或者追加`--skip-lock-tables`属性来覆盖它。\n\n\n\n#### 一条记录输出一条insert语句\n\n[--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) 语句可以关闭默认的多行 INSERT 语法。\n\n```mysql\nmysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName > ~/tableName.sql\n```\n\n\n\n#### 转储大表\n\n[--quick](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick) 该选项用于转储大的表。它强制**mysqldump**从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。\n\n\n\n### 导入\n\n#### 重新导入有mysqldump导出的SQL文件\n\n1. 直接通过mysql导入\n\n```shell\n# 如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql\nshell> mysql < dump.sql\n# 如果不存在，在加载转储文件时指定数据库名称\nshell> mysql db1 < dump.sql\n```\n\n2. 使用source命令\n\n进入mysql命令行，使用mysql中的source命令导入\n\n```mysql\nmysql> source dump.sql\n```\n\n如果文件不包含`CREATE_DATABASE`和`USE`语句，需要提前创建数据库\n\n```shell\nshell> mysqladmin create db1\n```\n\n或者\n\n```mysq\nmysql> CREATE DATABASE IF NOT EXISTS db1;\nmysql> USE db1;\nmysql> source dump.sql\n```\n\n\n\n","slug":"mysql-dump-source","published":1,"updated":"2022-04-16T14:51:10.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0r000hvcv6ca8i2rfh","content":"<h1 id=\"mysql数据导入导出\"><a href=\"#mysql数据导入导出\" class=\"headerlink\" title=\"mysql数据导入导出\"></a>mysql数据导入导出</h1><p>简单介绍mysql自带数据备份工具mysqldump和数据导入</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p><code>mysqldump</code> 是 <code>MySQL</code> 自带的逻辑备份工具。</p>\n<p>它的备份原理是通过协议连接到 <code>MySQL</code> 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的<code>insert</code> 语句，当我们需要还原这些数据时，只要执行这些 <code>insert</code> 语句，即可将对应的数据还原。</p>\n<p><code>mysqldump</code>优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。</p>\n<p>mysql 官方文档 <a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [options] db_name [tbl_name ...]</span><br><span class=\"line\">mysqldump [options] --databases db_name ...</span><br><span class=\"line\">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用选项说明\"><a href=\"#常用选项说明\" class=\"headerlink\" title=\"常用选项说明\"></a>常用选项说明</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>缩写</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–host</td>\n<td>-h</td>\n<td>服务器IP地址</td>\n</tr>\n<tr>\n<td>–port</td>\n<td>-P</td>\n<td>服务器端口号</td>\n</tr>\n<tr>\n<td>–user</td>\n<td>-u</td>\n<td>MySQL 用户名</td>\n</tr>\n<tr>\n<td>–pasword</td>\n<td>-p</td>\n<td>MySQL 密码</td>\n</tr>\n<tr>\n<td>–databases</td>\n<td></td>\n<td>指定要备份的数据库</td>\n</tr>\n<tr>\n<td>–all-databases</td>\n<td></td>\n<td>备份mysql服务器上的所有数据库</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database\"><code>--add-drop-database</code></a></td>\n<td></td>\n<td>在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–add-drop-table</a></td>\n<td></td>\n<td>在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a></td>\n<td></td>\n<td>–add-drop-table –add-locks –create-options –disable-keys –extended-insert –lock-tables –quick –set-charset 语句的简写。该选项默认启用。</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–skip-add-drop-table</a></td>\n<td></td>\n<td>不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–extended-insert</a></td>\n<td></td>\n<td>使用多行 INSERT 语法。输出一条insert语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a></td>\n<td></td>\n<td>关闭–extended-insert。输出多条insert语句</td>\n</tr>\n<tr>\n<td>–compact</td>\n<td></td>\n<td>压缩模式，产生更少的输出</td>\n</tr>\n<tr>\n<td>–comments</td>\n<td></td>\n<td>添加注释信息</td>\n</tr>\n<tr>\n<td>–complete-insert</td>\n<td></td>\n<td>输出完成的插入语句</td>\n</tr>\n<tr>\n<td>–lock-tables</td>\n<td>-l</td>\n<td>备份前，锁定所有数据库表</td>\n</tr>\n<tr>\n<td>–no-create-db/–no-create-info</td>\n<td></td>\n<td>禁止生成创建数据库语句</td>\n</tr>\n<tr>\n<td>–no-data</td>\n<td></td>\n<td>不写入任何表行信息（即不转储表内容）。如果您只想转储<a href=\"https://dev.mysql.com/doc/refman/5.6/en/create-table.html\"><code>CREATE TABLE</code></a>表的语句</td>\n</tr>\n<tr>\n<td>–force</td>\n<td></td>\n<td>当出现错误时仍然继续备份操作</td>\n</tr>\n<tr>\n<td>–default-character-set</td>\n<td></td>\n<td>指定默认字符集</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks\">–add-locks</a></td>\n<td></td>\n<td>备份数据库表时锁定数据库表。生产环境慎用</td>\n</tr>\n<tr>\n<td>–where=’<em><code>where_condition</code></em>‘</td>\n<td>-w</td>\n<td>仅转储由给定<code>WHERE</code>条件选择的行 。</td>\n</tr>\n<tr>\n<td>–quick<code>,</code>-q</td>\n<td>-q</td>\n<td>一次一行地从服务器检索表的行</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a></td>\n<td></td>\n<td>在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份</td>\n</tr>\n<tr>\n<td>–skip-opt</td>\n<td></td>\n<td>关闭由 –opt 设置的选项。避免锁表备份</td>\n</tr>\n<tr>\n<td>–result-file</td>\n<td>&gt;</td>\n<td>导出结果输出到文件</td>\n</tr>\n</tbody></table>\n<p>全部选项参见<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"常见示例\"><a href=\"#常见示例\" class=\"headerlink\" title=\"常见示例\"></a>常见示例</h3><ol>\n<li>导出所有数据库</li>\n</ol>\n<p>该命令会导出mysql中所有的数据库内容，如果你是全表备份，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --all-databases &gt; ~/all.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导出指定数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --databases db1 &gt; ~/db1.sql</span><br></pre></td></tr></table></figure>\n\n<p>该<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases\"><code>--databases</code></a>选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\"><strong>mysqldump</strong></a>将第一个名称视为数据库名称，将后面的名称视为表名称。</p>\n<ol start=\"3\">\n<li>导出指定数据库的指定表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>导出数据时指定条件–where</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只导出ID&gt;10的记录</span><br><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=&quot;id&gt;10&quot; &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"避免锁表\"><a href=\"#避免锁表\" class=\"headerlink\" title=\"避免锁表\"></a>避免锁表</h4><p>默认mysqldump备份会<code>lock-tables</code>，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表</p>\n<h5 id=\"–single-transaction\"><a href=\"#–single-transaction\" class=\"headerlink\" title=\"–single-transaction\"></a>–single-transaction</h5><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a>是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。</p>\n<h5 id=\"–skip-opt\"><a href=\"#–skip-opt\" class=\"headerlink\" title=\"–skip-opt\"></a>–skip-opt</h5><p>由于<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a>选项默认启用，因此您只需指定其相反的选项 <a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt\"><code>--skip-opt</code></a>即可关闭几个默认设置。</p>\n<h5 id=\"–skip-lock-tables\"><a href=\"#–skip-lock-tables\" class=\"headerlink\" title=\"–skip-lock-tables\"></a>–skip-lock-tables</h5><p>使用<code>--opt</code>选项时，会自动启动<code>--lock-tables</code>，如果你不想锁表操作，可以指定<code>--skip-opt</code>或者追加<code>--skip-lock-tables</code>属性来覆盖它。</p>\n<h4 id=\"一条记录输出一条insert语句\"><a href=\"#一条记录输出一条insert语句\" class=\"headerlink\" title=\"一条记录输出一条insert语句\"></a>一条记录输出一条insert语句</h4><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a> 语句可以关闭默认的多行 INSERT 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转储大表\"><a href=\"#转储大表\" class=\"headerlink\" title=\"转储大表\"></a>转储大表</h4><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick\">–quick</a> 该选项用于转储大的表。它强制<strong>mysqldump</strong>从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"重新导入有mysqldump导出的SQL文件\"><a href=\"#重新导入有mysqldump导出的SQL文件\" class=\"headerlink\" title=\"重新导入有mysqldump导出的SQL文件\"></a>重新导入有mysqldump导出的SQL文件</h4><ol>\n<li>直接通过mysql导入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql &lt; dump.sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果不存在，在加载转储文件时指定数据库名称</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql db1 &lt; dump.sql</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用source命令</li>\n</ol>\n<p>进入mysql命令行，使用mysql中的source命令导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果文件不包含<code>CREATE_DATABASE</code>和<code>USE</code>语句，需要提前创建数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysqladmin create db1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS db1;</span><br><span class=\"line\">mysql&gt; USE db1;</span><br><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"mysql数据导入导出\"><a href=\"#mysql数据导入导出\" class=\"headerlink\" title=\"mysql数据导入导出\"></a>mysql数据导入导出</h1><p>简单介绍mysql自带数据备份工具mysqldump和数据导入</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p><code>mysqldump</code> 是 <code>MySQL</code> 自带的逻辑备份工具。</p>\n<p>它的备份原理是通过协议连接到 <code>MySQL</code> 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的<code>insert</code> 语句，当我们需要还原这些数据时，只要执行这些 <code>insert</code> 语句，即可将对应的数据还原。</p>\n<p><code>mysqldump</code>优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。</p>\n<p>mysql 官方文档 <a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [options] db_name [tbl_name ...]</span><br><span class=\"line\">mysqldump [options] --databases db_name ...</span><br><span class=\"line\">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用选项说明\"><a href=\"#常用选项说明\" class=\"headerlink\" title=\"常用选项说明\"></a>常用选项说明</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>缩写</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–host</td>\n<td>-h</td>\n<td>服务器IP地址</td>\n</tr>\n<tr>\n<td>–port</td>\n<td>-P</td>\n<td>服务器端口号</td>\n</tr>\n<tr>\n<td>–user</td>\n<td>-u</td>\n<td>MySQL 用户名</td>\n</tr>\n<tr>\n<td>–pasword</td>\n<td>-p</td>\n<td>MySQL 密码</td>\n</tr>\n<tr>\n<td>–databases</td>\n<td></td>\n<td>指定要备份的数据库</td>\n</tr>\n<tr>\n<td>–all-databases</td>\n<td></td>\n<td>备份mysql服务器上的所有数据库</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database\"><code>--add-drop-database</code></a></td>\n<td></td>\n<td>在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–add-drop-table</a></td>\n<td></td>\n<td>在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a></td>\n<td></td>\n<td>–add-drop-table –add-locks –create-options –disable-keys –extended-insert –lock-tables –quick –set-charset 语句的简写。该选项默认启用。</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–skip-add-drop-table</a></td>\n<td></td>\n<td>不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–extended-insert</a></td>\n<td></td>\n<td>使用多行 INSERT 语法。输出一条insert语句</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a></td>\n<td></td>\n<td>关闭–extended-insert。输出多条insert语句</td>\n</tr>\n<tr>\n<td>–compact</td>\n<td></td>\n<td>压缩模式，产生更少的输出</td>\n</tr>\n<tr>\n<td>–comments</td>\n<td></td>\n<td>添加注释信息</td>\n</tr>\n<tr>\n<td>–complete-insert</td>\n<td></td>\n<td>输出完成的插入语句</td>\n</tr>\n<tr>\n<td>–lock-tables</td>\n<td>-l</td>\n<td>备份前，锁定所有数据库表</td>\n</tr>\n<tr>\n<td>–no-create-db/–no-create-info</td>\n<td></td>\n<td>禁止生成创建数据库语句</td>\n</tr>\n<tr>\n<td>–no-data</td>\n<td></td>\n<td>不写入任何表行信息（即不转储表内容）。如果您只想转储<a href=\"https://dev.mysql.com/doc/refman/5.6/en/create-table.html\"><code>CREATE TABLE</code></a>表的语句</td>\n</tr>\n<tr>\n<td>–force</td>\n<td></td>\n<td>当出现错误时仍然继续备份操作</td>\n</tr>\n<tr>\n<td>–default-character-set</td>\n<td></td>\n<td>指定默认字符集</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks\">–add-locks</a></td>\n<td></td>\n<td>备份数据库表时锁定数据库表。生产环境慎用</td>\n</tr>\n<tr>\n<td>–where=’<em><code>where_condition</code></em>‘</td>\n<td>-w</td>\n<td>仅转储由给定<code>WHERE</code>条件选择的行 。</td>\n</tr>\n<tr>\n<td>–quick<code>,</code>-q</td>\n<td>-q</td>\n<td>一次一行地从服务器检索表的行</td>\n</tr>\n<tr>\n<td><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a></td>\n<td></td>\n<td>在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份</td>\n</tr>\n<tr>\n<td>–skip-opt</td>\n<td></td>\n<td>关闭由 –opt 设置的选项。避免锁表备份</td>\n</tr>\n<tr>\n<td>–result-file</td>\n<td>&gt;</td>\n<td>导出结果输出到文件</td>\n</tr>\n</tbody></table>\n<p>全部选项参见<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"常见示例\"><a href=\"#常见示例\" class=\"headerlink\" title=\"常见示例\"></a>常见示例</h3><ol>\n<li>导出所有数据库</li>\n</ol>\n<p>该命令会导出mysql中所有的数据库内容，如果你是全表备份，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --all-databases &gt; ~/all.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导出指定数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --databases db1 &gt; ~/db1.sql</span><br></pre></td></tr></table></figure>\n\n<p>该<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases\"><code>--databases</code></a>选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\"><strong>mysqldump</strong></a>将第一个名称视为数据库名称，将后面的名称视为表名称。</p>\n<ol start=\"3\">\n<li>导出指定数据库的指定表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>导出数据时指定条件–where</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只导出ID&gt;10的记录</span><br><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=&quot;id&gt;10&quot; &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"避免锁表\"><a href=\"#避免锁表\" class=\"headerlink\" title=\"避免锁表\"></a>避免锁表</h4><p>默认mysqldump备份会<code>lock-tables</code>，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表</p>\n<h5 id=\"–single-transaction\"><a href=\"#–single-transaction\" class=\"headerlink\" title=\"–single-transaction\"></a>–single-transaction</h5><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a>是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。</p>\n<h5 id=\"–skip-opt\"><a href=\"#–skip-opt\" class=\"headerlink\" title=\"–skip-opt\"></a>–skip-opt</h5><p>由于<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a>选项默认启用，因此您只需指定其相反的选项 <a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt\"><code>--skip-opt</code></a>即可关闭几个默认设置。</p>\n<h5 id=\"–skip-lock-tables\"><a href=\"#–skip-lock-tables\" class=\"headerlink\" title=\"–skip-lock-tables\"></a>–skip-lock-tables</h5><p>使用<code>--opt</code>选项时，会自动启动<code>--lock-tables</code>，如果你不想锁表操作，可以指定<code>--skip-opt</code>或者追加<code>--skip-lock-tables</code>属性来覆盖它。</p>\n<h4 id=\"一条记录输出一条insert语句\"><a href=\"#一条记录输出一条insert语句\" class=\"headerlink\" title=\"一条记录输出一条insert语句\"></a>一条记录输出一条insert语句</h4><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a> 语句可以关闭默认的多行 INSERT 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转储大表\"><a href=\"#转储大表\" class=\"headerlink\" title=\"转储大表\"></a>转储大表</h4><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick\">–quick</a> 该选项用于转储大的表。它强制<strong>mysqldump</strong>从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"重新导入有mysqldump导出的SQL文件\"><a href=\"#重新导入有mysqldump导出的SQL文件\" class=\"headerlink\" title=\"重新导入有mysqldump导出的SQL文件\"></a>重新导入有mysqldump导出的SQL文件</h4><ol>\n<li>直接通过mysql导入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql &lt; dump.sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果不存在，在加载转储文件时指定数据库名称</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql db1 &lt; dump.sql</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用source命令</li>\n</ol>\n<p>进入mysql命令行，使用mysql中的source命令导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果文件不包含<code>CREATE_DATABASE</code>和<code>USE</code>语句，需要提前创建数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysqladmin create db1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS db1;</span><br><span class=\"line\">mysql&gt; USE db1;</span><br><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"手写命令行脚本傻瓜式的使用hexo","toc":true,"sidebar":true,"date":"2020-05-28T08:11:51.000Z","_content":"\n\n\n## 为何要写这样一个脚本\n\n每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 `cd` 到博客目录，`hexo create xxxx` ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。\n\n所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）\n\n![img](so-simple-to-write-blog/3064F5DA.gif)\n\n最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!\n\n所有当我想写博客时，我就可以这样做：\n\n![20200528_161248](so-simple-to-write-blog/20200528_161248.gif)\n\n我要做的只是输入文章的名字，其他的所有都交给脚本去执行。\n\n为了方便使用，我设置了一下五个功能：\n\n![1590654652879](so-simple-to-write-blog/1590654652879.png)\n\n> 脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置\n>\n>  [blog.sh](so-simple-to-write-blog\\blog.sh) \n\n\n\n## 参数修改\n\n在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\n# ***** 修改为你本地的博客仓库地址 *****\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\n# 改地址不用修改\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n```\n\n## 相关命令设置\n因为脚本中直接使用了 `hexo` 、`Typora` 命令，需要先安装/创建相关命令\n\n1. 安装 `hexo`\n\n```\nnpm install  hexo -g\n```\n\n2. 安装 `Typora`  >>> [下载Typora](https://www.typora.io/)\n\n   `Typora` 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等....\n\n3. 将`Typora`设为全局命令\n\n   - 找到你的安装路径，`Typora.exe` 运行程序右键创建快捷方式 \n\n   - 将快捷方式复制到 `C:\\Users\\你的计算机用户名\\.link` 下，没有`.link` 目录的手动创建一个。然后重命名为 `Typora`\n\n   - windows10 : `开始` - `设置` - `主页` - `系统` - `关于` - `系统信息` - `高级环境变量` - `环境变量` 将 `C:\\Users\\你的计算机用户名\\.link` 地址添加到系统环境变量 `PATH` 中。其他系统自行设置。\n\n\n此时应该可以在命令行使用 `hexo` 和  `Typora` 命令了\n\n   ![1590655537760](so-simple-to-write-blog/1590655537760.png)\n\n   ![1590655829098](so-simple-to-write-blog/1590655829098.png)\n\n   ![1590656080311](so-simple-to-write-blog/1590656080311.png)\n\n\n##  功能介绍\n\n### 写一篇新文章\n\n该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora\n\n这要求你需要全局按照了`hexo`命令，并将Typora设为全局命令\n\n\n### 继续写作\n\n该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写\n\n![20200528_171021](so-simple-to-write-blog/20200528_171021.gif)\n\n### 发布\n\n编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择`3`，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。\n\n```shell\nclear\necho \"发布站点\"\necho \"1. 正在清除博客信息...\"\nhexo clean\necho \"2. 正在生成博客内容...\"\nhexo g\necho \"3. 正在发布博客..\"\nhexo d\n```\n\n> 如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：\n> [hexo搭建个人博客并部署到个人服务器](https://blog.plcent.com/2019/11/04/hello-hexo/)\n> [如果优雅的部署hexo博客到自己的服务器](https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/)\n\n![20200528_172321](so-simple-to-write-blog/20200528_172321.gif)\n\n\n\n### 推送git仓库\n\n该部分模拟了手动提交仓库的操作，需要你录入一个提交日志\n\n\n```shell\nclear\nread -p \"推送日志> \" commitMsg\n# 如果你没有录入日志信息，使用当前日期作为日志推送\nif [[ -z commitMsg ]]; then\n  commitDate=`date \"+%Y/%m/%d\"`\n  commitMsg=\"更新博客-$commitDate\"\nfi\necho \"推送代码到git仓库\"\necho $commitMsg\ngit add .\ngit commit -m \"$commitMsg\"\ngit push\n```\n\n![20200528_175335](so-simple-to-write-blog/20200528_175335.gif)\n\n### 拉取仓库\n\n该部分只执行了 `git pull`命令而已\n\n```shell\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n```\n\n\n\n### 进入仓库目录\n\n双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。\n\n\n\n## 脚本源码\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n\n# 进入指定文件夹\ncd \"$blogPath\"\n\n\n# 输出错误信息\nechoError() {\n  echo \"  --------------------------------\"\n  echo \"    $1\"\n  echo \"  --------------------------------\"\n}\n\n# 输入任意键退出\npauseAnyKeyExit(){\n  read -p '输入任意键退出(输入0返回主菜单)...' key\n  if [[ $key = '0' ]]; then\n    # 返回主选择\n    main\n  fi\n}\n\n# 打开Typora编辑器\nopenTypora(){\n  echo \"打开Typora编辑器\"\n  start Typora \"$blogPath$writePath\"\n}\n\n# 打开新git bash窗口\nopenNewGitBash(){\n  echo \"启动新git bash\"\n  start gitBash --cd=\"$blogPath\"\n}\n\n# 是否当前文章已经存在\nisExitPaper() {\n  # 博客目录下当前博客是否存在\n  return $(-e \"$blogPath$writePath$1.md\")\n}\n\n\n# ------------------------------------------------------------\n\n# 1. 新写一篇文章\nwriteNewPost() {\n  clear\n  read -p \"写篇什么> \" name\n\n  if [[ $name = '0' ]]; then\n    # 返回主选择\n    main\n  elif [[ -n $name ]]; then\n    echo \"新建文章: $name.md\"\n    hexo new post \"$name\"\n    #打开编辑器\n    openTypora\n  else\n    # 错误提示\n    echoError \"请输入文章名称。(退出请输入0)\"\n    # 重新执行\n    writeNewPost\n  fi\n}\n\n# 2. 继续写作\ncontinueWrite() {\n  clear\n  echo \"正在打开编辑器Typora\"\n  # 打开编辑器\n  openTypora\n  echo \"开始书写博客吧...\"\n}\n\n# 3. 发布站点\ndisplayWebsite(){\n  clear\n  echo \"发布站点\"\n  echo \"1. 正在清除博客信息...\"\n  echo \"> hexo clean\"\n  hexo clean\n  echo \"2. 正在生成博客内容...\"\n  echo \"> hexo g\"\n  hexo g\n  echo \"3. 正在发布博客..\"\n  echo \"> hexo d\"\n  hexo d\n  \n  pauseAnyKeyExit\n}\n\n# 4. 推送代码到git仓库\ngitPush(){\n  clear\n  read -p \"推送日志> \" commitMsg\n  if [[ -z $commitMsg ]]; then\n    commitDate=`date \"+%Y/%m/%d\"`\n    commitMsg=\"更新博客-$commitDate\"\n  fi\n  echo \"推送代码到git仓库\"\n  echo \"推送日志> $commitMsg\"\n  echo \"> git add .\"\n  git add .\n  echo \"> git commit -m $commitMsg\"\n  git commit -m \"$commitMsg\"\n  echo \"> git push\"\n  git push\n\n  pauseAnyKeyExit\n}\n\n# 5. 拉取仓库\ngitPull() {\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n\npauseAnyKeyExit\n}\n\n\n\n# 入口\nmain(){\n  # 选择操作类型\n  echo \"你想干什么:\"\n  echo -e \"\\t1. 写一篇新文章\"\n  echo -e \"\\t2. 继续写作\"\n  echo -e \"\\t3. 发布\"\n  echo -e \"\\t4. 推送git仓库\"\n  echo -e \"\\t5. 拉取git仓库\"\n  echo -e \"\\t0. 退出\"\n  echo -e \"> 直接回车将进入博客目录\"\n  echo -e \"\\n\"\n  read -p \"选择> \" choose\n\n  \n  #开始写作\n  if [[ $choose = '1' ]]; then\n    writeNewPost \n  elif [[ $choose = '2' ]]; then\n    continueWrite\n  elif [[ $choose = '3' ]]; then\n    displayWebsite\n  elif [[ $choose = '4' ]]; then\n    gitPush\n  elif [[ $choose = '5' ]]; then\n    gitPull\n  elif [[ $choose = '0' ]]; then\n    exit\n  elif [ -n $choose ]; then\n    # 打开一个新的git bash\n    openNewGitBash\n  else\n    echoError \"选择有误，请重新选择。\"\n    # 继续选择\n    main\n  fi\n}\n\n# 开始执行\nmain\n```\n\n","source":"_posts/so-simple-to-write-blog.md","raw":"---\ntitle: 手写命令行脚本傻瓜式的使用hexo\ntoc: true\nsidebar: true\ndate: 2020-05-28 16:11:51\ntags:\n- hexo \ncategories:\n- hexo\n---\n\n\n\n## 为何要写这样一个脚本\n\n每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 `cd` 到博客目录，`hexo create xxxx` ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。\n\n所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）\n\n![img](so-simple-to-write-blog/3064F5DA.gif)\n\n最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!\n\n所有当我想写博客时，我就可以这样做：\n\n![20200528_161248](so-simple-to-write-blog/20200528_161248.gif)\n\n我要做的只是输入文章的名字，其他的所有都交给脚本去执行。\n\n为了方便使用，我设置了一下五个功能：\n\n![1590654652879](so-simple-to-write-blog/1590654652879.png)\n\n> 脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置\n>\n>  [blog.sh](so-simple-to-write-blog\\blog.sh) \n\n\n\n## 参数修改\n\n在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\n# ***** 修改为你本地的博客仓库地址 *****\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\n# 改地址不用修改\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n```\n\n## 相关命令设置\n因为脚本中直接使用了 `hexo` 、`Typora` 命令，需要先安装/创建相关命令\n\n1. 安装 `hexo`\n\n```\nnpm install  hexo -g\n```\n\n2. 安装 `Typora`  >>> [下载Typora](https://www.typora.io/)\n\n   `Typora` 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等....\n\n3. 将`Typora`设为全局命令\n\n   - 找到你的安装路径，`Typora.exe` 运行程序右键创建快捷方式 \n\n   - 将快捷方式复制到 `C:\\Users\\你的计算机用户名\\.link` 下，没有`.link` 目录的手动创建一个。然后重命名为 `Typora`\n\n   - windows10 : `开始` - `设置` - `主页` - `系统` - `关于` - `系统信息` - `高级环境变量` - `环境变量` 将 `C:\\Users\\你的计算机用户名\\.link` 地址添加到系统环境变量 `PATH` 中。其他系统自行设置。\n\n\n此时应该可以在命令行使用 `hexo` 和  `Typora` 命令了\n\n   ![1590655537760](so-simple-to-write-blog/1590655537760.png)\n\n   ![1590655829098](so-simple-to-write-blog/1590655829098.png)\n\n   ![1590656080311](so-simple-to-write-blog/1590656080311.png)\n\n\n##  功能介绍\n\n### 写一篇新文章\n\n该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora\n\n这要求你需要全局按照了`hexo`命令，并将Typora设为全局命令\n\n\n### 继续写作\n\n该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写\n\n![20200528_171021](so-simple-to-write-blog/20200528_171021.gif)\n\n### 发布\n\n编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择`3`，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。\n\n```shell\nclear\necho \"发布站点\"\necho \"1. 正在清除博客信息...\"\nhexo clean\necho \"2. 正在生成博客内容...\"\nhexo g\necho \"3. 正在发布博客..\"\nhexo d\n```\n\n> 如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：\n> [hexo搭建个人博客并部署到个人服务器](https://blog.plcent.com/2019/11/04/hello-hexo/)\n> [如果优雅的部署hexo博客到自己的服务器](https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/)\n\n![20200528_172321](so-simple-to-write-blog/20200528_172321.gif)\n\n\n\n### 推送git仓库\n\n该部分模拟了手动提交仓库的操作，需要你录入一个提交日志\n\n\n```shell\nclear\nread -p \"推送日志> \" commitMsg\n# 如果你没有录入日志信息，使用当前日期作为日志推送\nif [[ -z commitMsg ]]; then\n  commitDate=`date \"+%Y/%m/%d\"`\n  commitMsg=\"更新博客-$commitDate\"\nfi\necho \"推送代码到git仓库\"\necho $commitMsg\ngit add .\ngit commit -m \"$commitMsg\"\ngit push\n```\n\n![20200528_175335](so-simple-to-write-blog/20200528_175335.gif)\n\n### 拉取仓库\n\n该部分只执行了 `git pull`命令而已\n\n```shell\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n```\n\n\n\n### 进入仓库目录\n\n双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。\n\n\n\n## 脚本源码\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n\n# 进入指定文件夹\ncd \"$blogPath\"\n\n\n# 输出错误信息\nechoError() {\n  echo \"  --------------------------------\"\n  echo \"    $1\"\n  echo \"  --------------------------------\"\n}\n\n# 输入任意键退出\npauseAnyKeyExit(){\n  read -p '输入任意键退出(输入0返回主菜单)...' key\n  if [[ $key = '0' ]]; then\n    # 返回主选择\n    main\n  fi\n}\n\n# 打开Typora编辑器\nopenTypora(){\n  echo \"打开Typora编辑器\"\n  start Typora \"$blogPath$writePath\"\n}\n\n# 打开新git bash窗口\nopenNewGitBash(){\n  echo \"启动新git bash\"\n  start gitBash --cd=\"$blogPath\"\n}\n\n# 是否当前文章已经存在\nisExitPaper() {\n  # 博客目录下当前博客是否存在\n  return $(-e \"$blogPath$writePath$1.md\")\n}\n\n\n# ------------------------------------------------------------\n\n# 1. 新写一篇文章\nwriteNewPost() {\n  clear\n  read -p \"写篇什么> \" name\n\n  if [[ $name = '0' ]]; then\n    # 返回主选择\n    main\n  elif [[ -n $name ]]; then\n    echo \"新建文章: $name.md\"\n    hexo new post \"$name\"\n    #打开编辑器\n    openTypora\n  else\n    # 错误提示\n    echoError \"请输入文章名称。(退出请输入0)\"\n    # 重新执行\n    writeNewPost\n  fi\n}\n\n# 2. 继续写作\ncontinueWrite() {\n  clear\n  echo \"正在打开编辑器Typora\"\n  # 打开编辑器\n  openTypora\n  echo \"开始书写博客吧...\"\n}\n\n# 3. 发布站点\ndisplayWebsite(){\n  clear\n  echo \"发布站点\"\n  echo \"1. 正在清除博客信息...\"\n  echo \"> hexo clean\"\n  hexo clean\n  echo \"2. 正在生成博客内容...\"\n  echo \"> hexo g\"\n  hexo g\n  echo \"3. 正在发布博客..\"\n  echo \"> hexo d\"\n  hexo d\n  \n  pauseAnyKeyExit\n}\n\n# 4. 推送代码到git仓库\ngitPush(){\n  clear\n  read -p \"推送日志> \" commitMsg\n  if [[ -z $commitMsg ]]; then\n    commitDate=`date \"+%Y/%m/%d\"`\n    commitMsg=\"更新博客-$commitDate\"\n  fi\n  echo \"推送代码到git仓库\"\n  echo \"推送日志> $commitMsg\"\n  echo \"> git add .\"\n  git add .\n  echo \"> git commit -m $commitMsg\"\n  git commit -m \"$commitMsg\"\n  echo \"> git push\"\n  git push\n\n  pauseAnyKeyExit\n}\n\n# 5. 拉取仓库\ngitPull() {\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n\npauseAnyKeyExit\n}\n\n\n\n# 入口\nmain(){\n  # 选择操作类型\n  echo \"你想干什么:\"\n  echo -e \"\\t1. 写一篇新文章\"\n  echo -e \"\\t2. 继续写作\"\n  echo -e \"\\t3. 发布\"\n  echo -e \"\\t4. 推送git仓库\"\n  echo -e \"\\t5. 拉取git仓库\"\n  echo -e \"\\t0. 退出\"\n  echo -e \"> 直接回车将进入博客目录\"\n  echo -e \"\\n\"\n  read -p \"选择> \" choose\n\n  \n  #开始写作\n  if [[ $choose = '1' ]]; then\n    writeNewPost \n  elif [[ $choose = '2' ]]; then\n    continueWrite\n  elif [[ $choose = '3' ]]; then\n    displayWebsite\n  elif [[ $choose = '4' ]]; then\n    gitPush\n  elif [[ $choose = '5' ]]; then\n    gitPull\n  elif [[ $choose = '0' ]]; then\n    exit\n  elif [ -n $choose ]; then\n    # 打开一个新的git bash\n    openNewGitBash\n  else\n    echoError \"选择有误，请重新选择。\"\n    # 继续选择\n    main\n  fi\n}\n\n# 开始执行\nmain\n```\n\n","slug":"so-simple-to-write-blog","published":1,"updated":"2020-05-28T10:21:48.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0s000lvcv6dfj60bk7","content":"<h2 id=\"为何要写这样一个脚本\"><a href=\"#为何要写这样一个脚本\" class=\"headerlink\" title=\"为何要写这样一个脚本\"></a>为何要写这样一个脚本</h2><p>每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 <code>cd</code> 到博客目录，<code>hexo create xxxx</code> ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。</p>\n<p>所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/3064F5DA.gif\" alt=\"img\"></p>\n<p>最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!</p>\n<p>所有当我想写博客时，我就可以这样做：</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_161248.gif\" alt=\"20200528_161248\"></p>\n<p>我要做的只是输入文章的名字，其他的所有都交给脚本去执行。</p>\n<p>为了方便使用，我设置了一下五个功能：</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/1590654652879.png\" alt=\"1590654652879\"></p>\n<blockquote>\n<p>脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置</p>\n<p> <a href=\"so-simple-to-write-blog\\blog.sh\">blog.sh</a> </p>\n</blockquote>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><p>在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">***** 修改为你本地的博客仓库地址 *****</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改地址不用修改</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关命令设置\"><a href=\"#相关命令设置\" class=\"headerlink\" title=\"相关命令设置\"></a>相关命令设置</h2><p>因为脚本中直接使用了 <code>hexo</code> 、<code>Typora</code> 命令，需要先安装/创建相关命令</p>\n<ol>\n<li>安装 <code>hexo</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  hexo -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装 <code>Typora</code>  &gt;&gt;&gt; <a href=\"https://www.typora.io/\">下载Typora</a></p>\n<p><code>Typora</code> 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等….</p>\n</li>\n<li><p>将<code>Typora</code>设为全局命令</p>\n<ul>\n<li><p>找到你的安装路径，<code>Typora.exe</code> 运行程序右键创建快捷方式 </p>\n</li>\n<li><p>将快捷方式复制到 <code>C:\\Users\\你的计算机用户名\\.link</code> 下，没有<code>.link</code> 目录的手动创建一个。然后重命名为 <code>Typora</code></p>\n</li>\n<li><p>windows10 : <code>开始</code> - <code>设置</code> - <code>主页</code> - <code>系统</code> - <code>关于</code> - <code>系统信息</code> - <code>高级环境变量</code> - <code>环境变量</code> 将 <code>C:\\Users\\你的计算机用户名\\.link</code> 地址添加到系统环境变量 <code>PATH</code> 中。其他系统自行设置。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>此时应该可以在命令行使用 <code>hexo</code> 和  <code>Typora</code> 命令了</p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590655537760.png\" alt=\"1590655537760\"></p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590655829098.png\" alt=\"1590655829098\"></p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590656080311.png\" alt=\"1590656080311\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><h3 id=\"写一篇新文章\"><a href=\"#写一篇新文章\" class=\"headerlink\" title=\"写一篇新文章\"></a>写一篇新文章</h3><p>该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora</p>\n<p>这要求你需要全局按照了<code>hexo</code>命令，并将Typora设为全局命令</p>\n<h3 id=\"继续写作\"><a href=\"#继续写作\" class=\"headerlink\" title=\"继续写作\"></a>继续写作</h3><p>该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_171021.gif\" alt=\"20200528_171021\"></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择<code>3</code>，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;发布站点&quot;</span><br><span class=\"line\">echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：<br><a href=\"https://blog.plcent.com/2019/11/04/hello-hexo/\">hexo搭建个人博客并部署到个人服务器</a><br><a href=\"https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/\">如果优雅的部署hexo博客到自己的服务器</a></p>\n</blockquote>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_172321.gif\" alt=\"20200528_172321\"></p>\n<h3 id=\"推送git仓库\"><a href=\"#推送git仓库\" class=\"headerlink\" title=\"推送git仓库\"></a>推送git仓库</h3><p>该部分模拟了手动提交仓库的操作，需要你录入一个提交日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果你没有录入日志信息，使用当前日期作为日志推送</span></span><br><span class=\"line\">if [[ -z commitMsg ]]; then</span><br><span class=\"line\">  commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">  commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">echo $commitMsg</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_175335.gif\" alt=\"20200528_175335\"></p>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><p>该部分只执行了 <code>git pull</code>命令而已</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入仓库目录\"><a href=\"#进入仓库目录\" class=\"headerlink\" title=\"进入仓库目录\"></a>进入仓库目录</h3><p>双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。</p>\n<h2 id=\"脚本源码\"><a href=\"#脚本源码\" class=\"headerlink\" title=\"脚本源码\"></a>脚本源码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入指定文件夹</span></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出错误信息</span></span><br><span class=\"line\">echoError() &#123;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">  echo &quot;    $1&quot;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入任意键退出</span></span><br><span class=\"line\">pauseAnyKeyExit()&#123;</span><br><span class=\"line\">  read -p &#x27;输入任意键退出(输入0返回主菜单)...&#x27; key</span><br><span class=\"line\">  if [[ $key = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开Typora编辑器</span></span><br><span class=\"line\">openTypora()&#123;</span><br><span class=\"line\">  echo &quot;打开Typora编辑器&quot;</span><br><span class=\"line\">  start Typora &quot;$blogPath$writePath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开新git bash窗口</span></span><br><span class=\"line\">openNewGitBash()&#123;</span><br><span class=\"line\">  echo &quot;启动新git bash&quot;</span><br><span class=\"line\">  start gitBash --cd=&quot;$blogPath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否当前文章已经存在</span></span><br><span class=\"line\">isExitPaper() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">博客目录下当前博客是否存在</span></span><br><span class=\"line\">  return $(-e &quot;$blogPath$writePath$1.md&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 新写一篇文章</span></span><br><span class=\"line\">writeNewPost() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;写篇什么&gt; &quot; name</span><br><span class=\"line\"></span><br><span class=\"line\">  if [[ $name = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  elif [[ -n $name ]]; then</span><br><span class=\"line\">    echo &quot;新建文章: $name.md&quot;</span><br><span class=\"line\">    hexo new post &quot;$name&quot;</span><br><span class=\"line\">    #打开编辑器</span><br><span class=\"line\">    openTypora</span><br><span class=\"line\">  else</span><br><span class=\"line\">    # 错误提示</span><br><span class=\"line\">    echoError &quot;请输入文章名称。(退出请输入0)&quot;</span><br><span class=\"line\">    # 重新执行</span><br><span class=\"line\">    writeNewPost</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 继续写作</span></span><br><span class=\"line\">continueWrite() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;正在打开编辑器Typora&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">打开编辑器</span></span><br><span class=\"line\">  openTypora</span><br><span class=\"line\">  echo &quot;开始书写博客吧...&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 发布站点</span></span><br><span class=\"line\">displayWebsite()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;发布站点&quot;</span><br><span class=\"line\">  echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo clean&quot;</span><br><span class=\"line\">  hexo clean</span><br><span class=\"line\">  echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo g&quot;</span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo d&quot;</span><br><span class=\"line\">  hexo d</span><br><span class=\"line\">  </span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 推送代码到git仓库</span></span><br><span class=\"line\">gitPush()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\">  if [[ -z $commitMsg ]]; then</span><br><span class=\"line\">    commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">    commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">  echo &quot;推送日志&gt; $commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git add .&quot;</span><br><span class=\"line\">  git add .</span><br><span class=\"line\">  echo &quot;&gt; git commit -m $commitMsg&quot;</span><br><span class=\"line\">  git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git push&quot;</span><br><span class=\"line\">  git push</span><br><span class=\"line\"></span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 拉取仓库</span></span><br><span class=\"line\">gitPull() &#123;</span><br><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口</span></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">选择操作类型</span></span><br><span class=\"line\">  echo &quot;你想干什么:&quot;</span><br><span class=\"line\">  echo -e &quot;\\t1. 写一篇新文章&quot;</span><br><span class=\"line\">  echo -e &quot;\\t2. 继续写作&quot;</span><br><span class=\"line\">  echo -e &quot;\\t3. 发布&quot;</span><br><span class=\"line\">  echo -e &quot;\\t4. 推送git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t5. 拉取git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t0. 退出&quot;</span><br><span class=\"line\">  echo -e &quot;&gt; 直接回车将进入博客目录&quot;</span><br><span class=\"line\">  echo -e &quot;\\n&quot;</span><br><span class=\"line\">  read -p &quot;选择&gt; &quot; choose</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">  if [[ $choose = &#x27;1&#x27; ]]; then</span><br><span class=\"line\">    writeNewPost </span><br><span class=\"line\">  elif [[ $choose = &#x27;2&#x27; ]]; then</span><br><span class=\"line\">    continueWrite</span><br><span class=\"line\">  elif [[ $choose = &#x27;3&#x27; ]]; then</span><br><span class=\"line\">    displayWebsite</span><br><span class=\"line\">  elif [[ $choose = &#x27;4&#x27; ]]; then</span><br><span class=\"line\">    gitPush</span><br><span class=\"line\">  elif [[ $choose = &#x27;5&#x27; ]]; then</span><br><span class=\"line\">    gitPull</span><br><span class=\"line\">  elif [[ $choose = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    exit</span><br><span class=\"line\">  elif [ -n $choose ]; then</span><br><span class=\"line\">    # 打开一个新的git bash</span><br><span class=\"line\">    openNewGitBash</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echoError &quot;选择有误，请重新选择。&quot;</span><br><span class=\"line\">    # 继续选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始执行</span></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"为何要写这样一个脚本\"><a href=\"#为何要写这样一个脚本\" class=\"headerlink\" title=\"为何要写这样一个脚本\"></a>为何要写这样一个脚本</h2><p>每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 <code>cd</code> 到博客目录，<code>hexo create xxxx</code> ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。</p>\n<p>所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/3064F5DA.gif\" alt=\"img\"></p>\n<p>最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!</p>\n<p>所有当我想写博客时，我就可以这样做：</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_161248.gif\" alt=\"20200528_161248\"></p>\n<p>我要做的只是输入文章的名字，其他的所有都交给脚本去执行。</p>\n<p>为了方便使用，我设置了一下五个功能：</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/1590654652879.png\" alt=\"1590654652879\"></p>\n<blockquote>\n<p>脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置</p>\n<p> <a href=\"so-simple-to-write-blog\\blog.sh\">blog.sh</a> </p>\n</blockquote>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><p>在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">***** 修改为你本地的博客仓库地址 *****</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改地址不用修改</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关命令设置\"><a href=\"#相关命令设置\" class=\"headerlink\" title=\"相关命令设置\"></a>相关命令设置</h2><p>因为脚本中直接使用了 <code>hexo</code> 、<code>Typora</code> 命令，需要先安装/创建相关命令</p>\n<ol>\n<li>安装 <code>hexo</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  hexo -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装 <code>Typora</code>  &gt;&gt;&gt; <a href=\"https://www.typora.io/\">下载Typora</a></p>\n<p><code>Typora</code> 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等….</p>\n</li>\n<li><p>将<code>Typora</code>设为全局命令</p>\n<ul>\n<li><p>找到你的安装路径，<code>Typora.exe</code> 运行程序右键创建快捷方式 </p>\n</li>\n<li><p>将快捷方式复制到 <code>C:\\Users\\你的计算机用户名\\.link</code> 下，没有<code>.link</code> 目录的手动创建一个。然后重命名为 <code>Typora</code></p>\n</li>\n<li><p>windows10 : <code>开始</code> - <code>设置</code> - <code>主页</code> - <code>系统</code> - <code>关于</code> - <code>系统信息</code> - <code>高级环境变量</code> - <code>环境变量</code> 将 <code>C:\\Users\\你的计算机用户名\\.link</code> 地址添加到系统环境变量 <code>PATH</code> 中。其他系统自行设置。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>此时应该可以在命令行使用 <code>hexo</code> 和  <code>Typora</code> 命令了</p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590655537760.png\" alt=\"1590655537760\"></p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590655829098.png\" alt=\"1590655829098\"></p>\n<p>   <img src=\"/2020/05/28/so-simple-to-write-blog/1590656080311.png\" alt=\"1590656080311\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><h3 id=\"写一篇新文章\"><a href=\"#写一篇新文章\" class=\"headerlink\" title=\"写一篇新文章\"></a>写一篇新文章</h3><p>该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora</p>\n<p>这要求你需要全局按照了<code>hexo</code>命令，并将Typora设为全局命令</p>\n<h3 id=\"继续写作\"><a href=\"#继续写作\" class=\"headerlink\" title=\"继续写作\"></a>继续写作</h3><p>该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写</p>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_171021.gif\" alt=\"20200528_171021\"></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择<code>3</code>，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;发布站点&quot;</span><br><span class=\"line\">echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：<br><a href=\"https://blog.plcent.com/2019/11/04/hello-hexo/\">hexo搭建个人博客并部署到个人服务器</a><br><a href=\"https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/\">如果优雅的部署hexo博客到自己的服务器</a></p>\n</blockquote>\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_172321.gif\" alt=\"20200528_172321\"></p>\n<h3 id=\"推送git仓库\"><a href=\"#推送git仓库\" class=\"headerlink\" title=\"推送git仓库\"></a>推送git仓库</h3><p>该部分模拟了手动提交仓库的操作，需要你录入一个提交日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果你没有录入日志信息，使用当前日期作为日志推送</span></span><br><span class=\"line\">if [[ -z commitMsg ]]; then</span><br><span class=\"line\">  commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">  commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">echo $commitMsg</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/28/so-simple-to-write-blog/20200528_175335.gif\" alt=\"20200528_175335\"></p>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><p>该部分只执行了 <code>git pull</code>命令而已</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入仓库目录\"><a href=\"#进入仓库目录\" class=\"headerlink\" title=\"进入仓库目录\"></a>进入仓库目录</h3><p>双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。</p>\n<h2 id=\"脚本源码\"><a href=\"#脚本源码\" class=\"headerlink\" title=\"脚本源码\"></a>脚本源码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入指定文件夹</span></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出错误信息</span></span><br><span class=\"line\">echoError() &#123;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">  echo &quot;    $1&quot;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入任意键退出</span></span><br><span class=\"line\">pauseAnyKeyExit()&#123;</span><br><span class=\"line\">  read -p &#x27;输入任意键退出(输入0返回主菜单)...&#x27; key</span><br><span class=\"line\">  if [[ $key = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开Typora编辑器</span></span><br><span class=\"line\">openTypora()&#123;</span><br><span class=\"line\">  echo &quot;打开Typora编辑器&quot;</span><br><span class=\"line\">  start Typora &quot;$blogPath$writePath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开新git bash窗口</span></span><br><span class=\"line\">openNewGitBash()&#123;</span><br><span class=\"line\">  echo &quot;启动新git bash&quot;</span><br><span class=\"line\">  start gitBash --cd=&quot;$blogPath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否当前文章已经存在</span></span><br><span class=\"line\">isExitPaper() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">博客目录下当前博客是否存在</span></span><br><span class=\"line\">  return $(-e &quot;$blogPath$writePath$1.md&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 新写一篇文章</span></span><br><span class=\"line\">writeNewPost() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;写篇什么&gt; &quot; name</span><br><span class=\"line\"></span><br><span class=\"line\">  if [[ $name = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  elif [[ -n $name ]]; then</span><br><span class=\"line\">    echo &quot;新建文章: $name.md&quot;</span><br><span class=\"line\">    hexo new post &quot;$name&quot;</span><br><span class=\"line\">    #打开编辑器</span><br><span class=\"line\">    openTypora</span><br><span class=\"line\">  else</span><br><span class=\"line\">    # 错误提示</span><br><span class=\"line\">    echoError &quot;请输入文章名称。(退出请输入0)&quot;</span><br><span class=\"line\">    # 重新执行</span><br><span class=\"line\">    writeNewPost</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 继续写作</span></span><br><span class=\"line\">continueWrite() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;正在打开编辑器Typora&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">打开编辑器</span></span><br><span class=\"line\">  openTypora</span><br><span class=\"line\">  echo &quot;开始书写博客吧...&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 发布站点</span></span><br><span class=\"line\">displayWebsite()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;发布站点&quot;</span><br><span class=\"line\">  echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo clean&quot;</span><br><span class=\"line\">  hexo clean</span><br><span class=\"line\">  echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo g&quot;</span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo d&quot;</span><br><span class=\"line\">  hexo d</span><br><span class=\"line\">  </span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 推送代码到git仓库</span></span><br><span class=\"line\">gitPush()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\">  if [[ -z $commitMsg ]]; then</span><br><span class=\"line\">    commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">    commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">  echo &quot;推送日志&gt; $commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git add .&quot;</span><br><span class=\"line\">  git add .</span><br><span class=\"line\">  echo &quot;&gt; git commit -m $commitMsg&quot;</span><br><span class=\"line\">  git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git push&quot;</span><br><span class=\"line\">  git push</span><br><span class=\"line\"></span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 拉取仓库</span></span><br><span class=\"line\">gitPull() &#123;</span><br><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口</span></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">选择操作类型</span></span><br><span class=\"line\">  echo &quot;你想干什么:&quot;</span><br><span class=\"line\">  echo -e &quot;\\t1. 写一篇新文章&quot;</span><br><span class=\"line\">  echo -e &quot;\\t2. 继续写作&quot;</span><br><span class=\"line\">  echo -e &quot;\\t3. 发布&quot;</span><br><span class=\"line\">  echo -e &quot;\\t4. 推送git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t5. 拉取git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t0. 退出&quot;</span><br><span class=\"line\">  echo -e &quot;&gt; 直接回车将进入博客目录&quot;</span><br><span class=\"line\">  echo -e &quot;\\n&quot;</span><br><span class=\"line\">  read -p &quot;选择&gt; &quot; choose</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">  if [[ $choose = &#x27;1&#x27; ]]; then</span><br><span class=\"line\">    writeNewPost </span><br><span class=\"line\">  elif [[ $choose = &#x27;2&#x27; ]]; then</span><br><span class=\"line\">    continueWrite</span><br><span class=\"line\">  elif [[ $choose = &#x27;3&#x27; ]]; then</span><br><span class=\"line\">    displayWebsite</span><br><span class=\"line\">  elif [[ $choose = &#x27;4&#x27; ]]; then</span><br><span class=\"line\">    gitPush</span><br><span class=\"line\">  elif [[ $choose = &#x27;5&#x27; ]]; then</span><br><span class=\"line\">    gitPull</span><br><span class=\"line\">  elif [[ $choose = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    exit</span><br><span class=\"line\">  elif [ -n $choose ]; then</span><br><span class=\"line\">    # 打开一个新的git bash</span><br><span class=\"line\">    openNewGitBash</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echoError &quot;选择有误，请重新选择。&quot;</span><br><span class=\"line\">    # 继续选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始执行</span></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n"},{"title":"2019 年终总结和反思","toc":true,"sidebar":true,"date":"2019-12-12T05:08:06.000Z","password":3597,"_content":"\n### 2019 年终总结和反思\n\n2019，毕业后踏入工作完完整整的第一年。\n\n这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。\n\n这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。\n\n#### 为什么会这么忙\n\n从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。\n\n1. 临时的任务不断的导致里程碑的变更\n2. 代码质量不高，不断的在修复BUG、修复BUG\n\n忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。\n\n#### 为什么BUG会这么多\n\n这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。\n\n1. 开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；\n2. 开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；\n3. 前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；\n4. 除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。\n\n#### 为什么之前没想过改变\n\n为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。\n\n\n\n\n\n","source":"_posts/summary-and-relection-in-2019.md","raw":"---\ntitle: 2019 年终总结和反思\ntoc: true\nsidebar: true\ndate: 2019-12-12 13:08:06\ntags:\n- 个人\n\ncategories:\n- 个人\n\npassword: 3597\n---\n\n### 2019 年终总结和反思\n\n2019，毕业后踏入工作完完整整的第一年。\n\n这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。\n\n这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。\n\n#### 为什么会这么忙\n\n从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。\n\n1. 临时的任务不断的导致里程碑的变更\n2. 代码质量不高，不断的在修复BUG、修复BUG\n\n忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。\n\n#### 为什么BUG会这么多\n\n这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。\n\n1. 开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；\n2. 开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；\n3. 前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；\n4. 除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。\n\n#### 为什么之前没想过改变\n\n为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。\n\n\n\n\n\n","slug":"summary-and-relection-in-2019","published":1,"updated":"2020-01-13T00:54:06.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0v000nvcv6d78e5yk4","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"密码错误，请重试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">继续阅读请输入密码！</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c918340635d8f659456bf063fc7176b0ae0554fd7365a4d01d6fedd08cf4fb83\"></script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"这是一篇私密文章！","more":"这是一篇私密文章！","origin":"<h3 id=\"2019-年终总结和反思\"><a href=\"#2019-年终总结和反思\" class=\"headerlink\" title=\"2019 年终总结和反思\"></a>2019 年终总结和反思</h3><p>2019，毕业后踏入工作完完整整的第一年。</p>\n<p>这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。</p>\n<p>这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。</p>\n<h4 id=\"为什么会这么忙\"><a href=\"#为什么会这么忙\" class=\"headerlink\" title=\"为什么会这么忙\"></a>为什么会这么忙</h4><p>从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。</p>\n<ol>\n<li>临时的任务不断的导致里程碑的变更</li>\n<li>代码质量不高，不断的在修复BUG、修复BUG</li>\n</ol>\n<p>忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。</p>\n<h4 id=\"为什么BUG会这么多\"><a href=\"#为什么BUG会这么多\" class=\"headerlink\" title=\"为什么BUG会这么多\"></a>为什么BUG会这么多</h4><p>这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。</p>\n<ol>\n<li>开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；</li>\n<li>开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；</li>\n<li>前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；</li>\n<li>除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。</li>\n</ol>\n<h4 id=\"为什么之前没想过改变\"><a href=\"#为什么之前没想过改变\" class=\"headerlink\" title=\"为什么之前没想过改变\"></a>为什么之前没想过改变</h4><p>为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。</p>\n","encrypt":true},{"title":"vue-cli3修改打包输出文件目录结构","toc":true,"sidebar":true,"date":"2021-09-02T06:32:49.000Z","_content":"\n[vue-cli3](https://cli.vuejs.org/zh/config/)关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：\n\n- publicPath\n  用来控制各种资源引用的路径，\n\n- outputDir\n- assetsDir\n- indexPath\n","source":"_posts/vue-cli3-change-build-dir.md","raw":"---\ntitle: vue-cli3修改打包输出文件目录结构\ntoc: true\nsidebar: true\ndate: 2021-09-02 14:32:49\ntags:\n  - vue\n\ncategories:\n  - vue\n---\n\n[vue-cli3](https://cli.vuejs.org/zh/config/)关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：\n\n- publicPath\n  用来控制各种资源引用的路径，\n\n- outputDir\n- assetsDir\n- indexPath\n","slug":"vue-cli3-change-build-dir","published":1,"updated":"2022-04-16T14:54:25.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak0x000svcv67nlsfyju","content":"<p><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli3</a>关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：</p>\n<ul>\n<li><p>publicPath<br>用来控制各种资源引用的路径，</p>\n</li>\n<li><p>outputDir</p>\n</li>\n<li><p>assetsDir</p>\n</li>\n<li><p>indexPath</p>\n</li>\n</ul>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli3</a>关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：</p>\n<ul>\n<li><p>publicPath<br>用来控制各种资源引用的路径，</p>\n</li>\n<li><p>outputDir</p>\n</li>\n<li><p>assetsDir</p>\n</li>\n<li><p>indexPath</p>\n</li>\n</ul>\n"},{"title":"使用Taro开发小程序指南","toc":true,"sidebar":true,"date":"2022-04-16T15:31:14.000Z","_content":"\n**阅读对象**：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。\n\n---\n\n随着小程序的发展，现在主流厂商均有自己的小程序框架，如：`微信`、`京东`、`百度`、`支付宝`、`字节跳动`、`QQ`、`飞书`，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。\n\n目前常见的开发模式有：\n\n1. 针对每一个小程序做单独开发，研发投入成本较大；即原生开发；\n2. 开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的`kbone`；\n3. 使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：`Taro`、`uni-app`；\n\n本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：`Taro`、`WePY` 、`uni-app`、`mpvue`、`chameleon`、`kbone`。那技术栈如何选型？\n\n## 小程序多端框架横向对比\n\n市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。\n\n[小程序框架全面测评（2019-03-12），来自 Taro 官方](https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review)\n[跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金](https://juejin.cn/post/6844904118901817351)\n\n这里需要提的是微信官方推出的[kbone](https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D)，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。\n\n截止目前来看，在小程序开发领域，国内开发者使用最多的应当是`Taro`、`uni-app`、`kbone`。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。\n\n## 如何使用 Taro\n\n如果你不了解[Taro](https://taro-docs.jd.com/taro/docs)，可以在官网了解[https://taro-docs.jd.com/taro/docs](https://taro-docs.jd.com/taro/docs/)。\n\n官方提供了比较详细的教程告知如何初始化 Taro 项目，[Taro 安装及使用](https://taro-docs.jd.com/taro/docs/GETTING-STARTED)，你可以按照[基础教程](https://taro-docs.jd.com/taro/docs/folder)>[进阶教程](https://taro-docs.jd.com/taro/docs/config-detail)的方式进行入门。\n\n当然官方也有入门教程可以参考[Taro 渐进式入门教程](https://taro-docs.jd.com/taro/docs/guide)，看完基本了解如何使用 Taro 了。\n\n其中你需要了解 Taro 的[编译配置](https://taro-docs.jd.com/taro/docs/config)，以及 Taro 如何定义[设计稿及尺寸单位](https://taro-docs.jd.com/taro/docs/size)。\n\n### 编译配置\n\n编译配置存放于项目根目录下的 config 目录中，包含三个文件：\n\n- index.js 是通用配置\n- dev.js 是项目预览时的配置\n- prod.js 是项目打包时的配置\n\n详细的编译配置参数参见[编译配置详情](https://taro-docs.jd.com/taro/docs/config-detail)。按照文档介绍配置项目即可。\n\n其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：\n\n- 微信小程序限制单包大小不得超过 2M，总包不得超过 20M。[微信小程序开发文档-分包加载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n- 支付宝小程序单包大小不得超过 2M，总包不得超过 8M。[支付宝小程序开发文档-分包大小限制](https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6)\n- 字节小程序单包大小不得超过 2M，总包不得超过 16M。[字节小程序开发温暖的-分包简介](https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction)\n\n在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：\n\n- 移除包中的静态资源，改成服务器加载，例如图片上传到 CDN\n- 压缩代码\n\n#### 使用 terser-webpack-plugin 压缩代码\n\n在`/config/dev.js`中添加以下配置\n\n```js\nconst TerserPlugin = require(\"terser-webpack-plugin\");\n\nmodule.exports = {\n  mini: {\n    webpackChain: (chain) => {\n      chain.merge({\n        optimization: {\n          minimize: true,\n          minimizer: [\n            new TerserPlugin({\n              test: [\"common.js\", \"taro.js\", \"vendors.js\", \"app.js\"], // 参与压缩的文件\n            }),\n          ],\n        },\n      });\n    },\n  },\n};\n```\n\n在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。\n\n### 设计稿及尺寸单位\n\nTaro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。\n\n或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读\n[移动开发的设计稿为什么大多数是 750px](https://blog.csdn.net/weixin_45785873/article/details/106948607)。\n[移动端 Web 页面适配浅析](https://www.jianshu.com/p/cf600c2930cb)\n[深入浅出移动端适配（总结版）](https://juejin.cn/post/6844903951012200456#heading-24)\n\n总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。\n\n你需要如下定义\n\n```js\n// /config/index.js\n{\n  designWidth: 750, // 设计稿尺寸\n  deviceRatio: { // 针对不同设计稿尺寸的处理换算规则\n    640: 2.34 / 2,\n    750: 1,\n    828: 1.81 / 2,\n    375: 2 / 1\n  },\n}\n```\n\n如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。\n\n## Vue 的支持\n\nTaro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。\n主要的差别有：\n\n- 事件，使用`@tap`替代`@click`\n- 在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber\n- 无法使用 stopPropagation[阻止滚动穿透](https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F)\n\n> 经过测试，`@tap=\"e => {e.stopPropagation(); handleTapEvent(); }\"` 这种写法可以阻止冒泡\n\n- Taro 中 [ref](https://taro-docs.jd.com/taro/docs/vue-overall#ref) 存在差别，无法获取大大小信息\n- 不支持 `<style scoped>`，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。[#6662](https://github.com/NervJS/taro/issues/6662)。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过`namespace`的方式进行屏蔽。\n- 不支持 vue-router，可以使用官方的[路由](https://taro-docs.jd.com/taro/docs/router)方案\n\n官方列出了一个不能完全兼容 Vue 的情况。参见[其他限制](https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6)\n\n## 如何选择 UI 框架\n\nTaro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。\n\n由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。\n\n### NutUI\n\n[NutUI 3.0](https://nutui.jd.com/#/intro)\n\n京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为[v3.1.18](https://github.com/jdf2e/nutui/releases/tag/v3.1.18)。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。\n\n### taro-ui-vue3\n\n[taro-ui-vue3](https://b2nil.github.io/taro-ui-vue3/)\n\ntaro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。\n\n### Taroify\n\n[Taroify](https://taroify.gitee.io/taroify.com/introduce/)\n\nTaroify 是移动端组件库 [Vant](https://github.com/youzan/vant) 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯[Vant](https://github.com/youzan/vant)进行开发，可以尝试。\n\n### taro-color-ui\n\n[taro-color-ui](https://gengar-666.github.io/taro-color-ui/#/)\n\ncolor-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。\n\n## Taro 物料市场\n\n[Taro 物料市场](https://taro-ext.jd.com/)\n\ntaro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。\n\n### Taro 社区\n\n[Taro 社区](https://taro-club.jd.com/)\n\n可以在社区中查找常见问题的处理方法\n\n## 结束语\n\nTaro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。\n\n借助`kbone`文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。\n","source":"_posts/taro-init-project.md","raw":"---\ntitle: 使用Taro开发小程序指南\ntoc: true\nsidebar: true\ndate: 2022-04-16 23:31:14\ntags:\n  - taro\n  - wechat\n  - miniprograme\ncategories:\n  - taro\n---\n\n**阅读对象**：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。\n\n---\n\n随着小程序的发展，现在主流厂商均有自己的小程序框架，如：`微信`、`京东`、`百度`、`支付宝`、`字节跳动`、`QQ`、`飞书`，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。\n\n目前常见的开发模式有：\n\n1. 针对每一个小程序做单独开发，研发投入成本较大；即原生开发；\n2. 开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的`kbone`；\n3. 使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：`Taro`、`uni-app`；\n\n本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：`Taro`、`WePY` 、`uni-app`、`mpvue`、`chameleon`、`kbone`。那技术栈如何选型？\n\n## 小程序多端框架横向对比\n\n市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。\n\n[小程序框架全面测评（2019-03-12），来自 Taro 官方](https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review)\n[跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金](https://juejin.cn/post/6844904118901817351)\n\n这里需要提的是微信官方推出的[kbone](https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D)，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。\n\n截止目前来看，在小程序开发领域，国内开发者使用最多的应当是`Taro`、`uni-app`、`kbone`。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。\n\n## 如何使用 Taro\n\n如果你不了解[Taro](https://taro-docs.jd.com/taro/docs)，可以在官网了解[https://taro-docs.jd.com/taro/docs](https://taro-docs.jd.com/taro/docs/)。\n\n官方提供了比较详细的教程告知如何初始化 Taro 项目，[Taro 安装及使用](https://taro-docs.jd.com/taro/docs/GETTING-STARTED)，你可以按照[基础教程](https://taro-docs.jd.com/taro/docs/folder)>[进阶教程](https://taro-docs.jd.com/taro/docs/config-detail)的方式进行入门。\n\n当然官方也有入门教程可以参考[Taro 渐进式入门教程](https://taro-docs.jd.com/taro/docs/guide)，看完基本了解如何使用 Taro 了。\n\n其中你需要了解 Taro 的[编译配置](https://taro-docs.jd.com/taro/docs/config)，以及 Taro 如何定义[设计稿及尺寸单位](https://taro-docs.jd.com/taro/docs/size)。\n\n### 编译配置\n\n编译配置存放于项目根目录下的 config 目录中，包含三个文件：\n\n- index.js 是通用配置\n- dev.js 是项目预览时的配置\n- prod.js 是项目打包时的配置\n\n详细的编译配置参数参见[编译配置详情](https://taro-docs.jd.com/taro/docs/config-detail)。按照文档介绍配置项目即可。\n\n其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：\n\n- 微信小程序限制单包大小不得超过 2M，总包不得超过 20M。[微信小程序开发文档-分包加载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n- 支付宝小程序单包大小不得超过 2M，总包不得超过 8M。[支付宝小程序开发文档-分包大小限制](https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6)\n- 字节小程序单包大小不得超过 2M，总包不得超过 16M。[字节小程序开发温暖的-分包简介](https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction)\n\n在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：\n\n- 移除包中的静态资源，改成服务器加载，例如图片上传到 CDN\n- 压缩代码\n\n#### 使用 terser-webpack-plugin 压缩代码\n\n在`/config/dev.js`中添加以下配置\n\n```js\nconst TerserPlugin = require(\"terser-webpack-plugin\");\n\nmodule.exports = {\n  mini: {\n    webpackChain: (chain) => {\n      chain.merge({\n        optimization: {\n          minimize: true,\n          minimizer: [\n            new TerserPlugin({\n              test: [\"common.js\", \"taro.js\", \"vendors.js\", \"app.js\"], // 参与压缩的文件\n            }),\n          ],\n        },\n      });\n    },\n  },\n};\n```\n\n在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。\n\n### 设计稿及尺寸单位\n\nTaro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。\n\n或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读\n[移动开发的设计稿为什么大多数是 750px](https://blog.csdn.net/weixin_45785873/article/details/106948607)。\n[移动端 Web 页面适配浅析](https://www.jianshu.com/p/cf600c2930cb)\n[深入浅出移动端适配（总结版）](https://juejin.cn/post/6844903951012200456#heading-24)\n\n总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。\n\n你需要如下定义\n\n```js\n// /config/index.js\n{\n  designWidth: 750, // 设计稿尺寸\n  deviceRatio: { // 针对不同设计稿尺寸的处理换算规则\n    640: 2.34 / 2,\n    750: 1,\n    828: 1.81 / 2,\n    375: 2 / 1\n  },\n}\n```\n\n如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。\n\n## Vue 的支持\n\nTaro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。\n主要的差别有：\n\n- 事件，使用`@tap`替代`@click`\n- 在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber\n- 无法使用 stopPropagation[阻止滚动穿透](https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F)\n\n> 经过测试，`@tap=\"e => {e.stopPropagation(); handleTapEvent(); }\"` 这种写法可以阻止冒泡\n\n- Taro 中 [ref](https://taro-docs.jd.com/taro/docs/vue-overall#ref) 存在差别，无法获取大大小信息\n- 不支持 `<style scoped>`，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。[#6662](https://github.com/NervJS/taro/issues/6662)。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过`namespace`的方式进行屏蔽。\n- 不支持 vue-router，可以使用官方的[路由](https://taro-docs.jd.com/taro/docs/router)方案\n\n官方列出了一个不能完全兼容 Vue 的情况。参见[其他限制](https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6)\n\n## 如何选择 UI 框架\n\nTaro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。\n\n由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。\n\n### NutUI\n\n[NutUI 3.0](https://nutui.jd.com/#/intro)\n\n京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为[v3.1.18](https://github.com/jdf2e/nutui/releases/tag/v3.1.18)。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。\n\n### taro-ui-vue3\n\n[taro-ui-vue3](https://b2nil.github.io/taro-ui-vue3/)\n\ntaro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。\n\n### Taroify\n\n[Taroify](https://taroify.gitee.io/taroify.com/introduce/)\n\nTaroify 是移动端组件库 [Vant](https://github.com/youzan/vant) 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯[Vant](https://github.com/youzan/vant)进行开发，可以尝试。\n\n### taro-color-ui\n\n[taro-color-ui](https://gengar-666.github.io/taro-color-ui/#/)\n\ncolor-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。\n\n## Taro 物料市场\n\n[Taro 物料市场](https://taro-ext.jd.com/)\n\ntaro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。\n\n### Taro 社区\n\n[Taro 社区](https://taro-club.jd.com/)\n\n可以在社区中查找常见问题的处理方法\n\n## 结束语\n\nTaro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。\n\n借助`kbone`文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。\n","slug":"taro-init-project","published":1,"updated":"2022-04-17T03:56:02.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak1c001pvcv631e81mmw","content":"<p><strong>阅读对象</strong>：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。</p>\n<hr>\n<p>随着小程序的发展，现在主流厂商均有自己的小程序框架，如：<code>微信</code>、<code>京东</code>、<code>百度</code>、<code>支付宝</code>、<code>字节跳动</code>、<code>QQ</code>、<code>飞书</code>，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。</p>\n<p>目前常见的开发模式有：</p>\n<ol>\n<li>针对每一个小程序做单独开发，研发投入成本较大；即原生开发；</li>\n<li>开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的<code>kbone</code>；</li>\n<li>使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：<code>Taro</code>、<code>uni-app</code>；</li>\n</ol>\n<p>本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：<code>Taro</code>、<code>WePY</code> 、<code>uni-app</code>、<code>mpvue</code>、<code>chameleon</code>、<code>kbone</code>。那技术栈如何选型？</p>\n<h2 id=\"小程序多端框架横向对比\"><a href=\"#小程序多端框架横向对比\" class=\"headerlink\" title=\"小程序多端框架横向对比\"></a>小程序多端框架横向对比</h2><p>市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。</p>\n<p><a href=\"https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review\">小程序框架全面测评（2019-03-12），来自 Taro 官方</a><br><a href=\"https://juejin.cn/post/6844904118901817351\">跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金</a></p>\n<p>这里需要提的是微信官方推出的<a href=\"https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D\">kbone</a>，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。</p>\n<p>截止目前来看，在小程序开发领域，国内开发者使用最多的应当是<code>Taro</code>、<code>uni-app</code>、<code>kbone</code>。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。</p>\n<h2 id=\"如何使用-Taro\"><a href=\"#如何使用-Taro\" class=\"headerlink\" title=\"如何使用 Taro\"></a>如何使用 Taro</h2><p>如果你不了解<a href=\"https://taro-docs.jd.com/taro/docs\">Taro</a>，可以在官网了解<a href=\"https://taro-docs.jd.com/taro/docs/\">https://taro-docs.jd.com/taro/docs</a>。</p>\n<p>官方提供了比较详细的教程告知如何初始化 Taro 项目，<a href=\"https://taro-docs.jd.com/taro/docs/GETTING-STARTED\">Taro 安装及使用</a>，你可以按照<a href=\"https://taro-docs.jd.com/taro/docs/folder\">基础教程</a>&gt;<a href=\"https://taro-docs.jd.com/taro/docs/config-detail\">进阶教程</a>的方式进行入门。</p>\n<p>当然官方也有入门教程可以参考<a href=\"https://taro-docs.jd.com/taro/docs/guide\">Taro 渐进式入门教程</a>，看完基本了解如何使用 Taro 了。</p>\n<p>其中你需要了解 Taro 的<a href=\"https://taro-docs.jd.com/taro/docs/config\">编译配置</a>，以及 Taro 如何定义<a href=\"https://taro-docs.jd.com/taro/docs/size\">设计稿及尺寸单位</a>。</p>\n<h3 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h3><p>编译配置存放于项目根目录下的 config 目录中，包含三个文件：</p>\n<ul>\n<li>index.js 是通用配置</li>\n<li>dev.js 是项目预览时的配置</li>\n<li>prod.js 是项目打包时的配置</li>\n</ul>\n<p>详细的编译配置参数参见<a href=\"https://taro-docs.jd.com/taro/docs/config-detail\">编译配置详情</a>。按照文档介绍配置项目即可。</p>\n<p>其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：</p>\n<ul>\n<li>微信小程序限制单包大小不得超过 2M，总包不得超过 20M。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\">微信小程序开发文档-分包加载</a></li>\n<li>支付宝小程序单包大小不得超过 2M，总包不得超过 8M。<a href=\"https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6\">支付宝小程序开发文档-分包大小限制</a></li>\n<li>字节小程序单包大小不得超过 2M，总包不得超过 16M。<a href=\"https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction\">字节小程序开发温暖的-分包简介</a></li>\n</ul>\n<p>在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：</p>\n<ul>\n<li>移除包中的静态资源，改成服务器加载，例如图片上传到 CDN</li>\n<li>压缩代码</li>\n</ul>\n<h4 id=\"使用-terser-webpack-plugin-压缩代码\"><a href=\"#使用-terser-webpack-plugin-压缩代码\" class=\"headerlink\" title=\"使用 terser-webpack-plugin 压缩代码\"></a>使用 terser-webpack-plugin 压缩代码</h4><p>在<code>/config/dev.js</code>中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mini</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">webpackChain</span>: <span class=\"function\">(<span class=\"params\">chain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      chain.<span class=\"title function_\">merge</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">test</span>: [<span class=\"string\">&quot;common.js&quot;</span>, <span class=\"string\">&quot;taro.js&quot;</span>, <span class=\"string\">&quot;vendors.js&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>], <span class=\"comment\">// 参与压缩的文件</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。</p>\n<h3 id=\"设计稿及尺寸单位\"><a href=\"#设计稿及尺寸单位\" class=\"headerlink\" title=\"设计稿及尺寸单位\"></a>设计稿及尺寸单位</h3><p>Taro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。</p>\n<p>或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读<br><a href=\"https://blog.csdn.net/weixin_45785873/article/details/106948607\">移动开发的设计稿为什么大多数是 750px</a>。<br><a href=\"https://www.jianshu.com/p/cf600c2930cb\">移动端 Web 页面适配浅析</a><br><a href=\"https://juejin.cn/post/6844903951012200456#heading-24\">深入浅出移动端适配（总结版）</a></p>\n<p>总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。</p>\n<p>你需要如下定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /config/index.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">designWidth</span>: <span class=\"number\">750</span>, <span class=\"comment\">// 设计稿尺寸</span></span><br><span class=\"line\">  <span class=\"attr\">deviceRatio</span>: &#123; <span class=\"comment\">// 针对不同设计稿尺寸的处理换算规则</span></span><br><span class=\"line\">    <span class=\"number\">640</span>: <span class=\"number\">2.34</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">750</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">828</span>: <span class=\"number\">1.81</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">375</span>: <span class=\"number\">2</span> / <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。</p>\n<h2 id=\"Vue-的支持\"><a href=\"#Vue-的支持\" class=\"headerlink\" title=\"Vue 的支持\"></a>Vue 的支持</h2><p>Taro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。<br>主要的差别有：</p>\n<ul>\n<li>事件，使用<code>@tap</code>替代<code>@click</code></li>\n<li>在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber</li>\n<li>无法使用 stopPropagation<a href=\"https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F\">阻止滚动穿透</a></li>\n</ul>\n<blockquote>\n<p>经过测试，<code>@tap=&quot;e =&gt; &#123;e.stopPropagation(); handleTapEvent(); &#125;&quot;</code> 这种写法可以阻止冒泡</p>\n</blockquote>\n<ul>\n<li>Taro 中 <a href=\"https://taro-docs.jd.com/taro/docs/vue-overall#ref\">ref</a> 存在差别，无法获取大大小信息</li>\n<li>不支持 <code>&lt;style scoped&gt;</code>，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。<a href=\"https://github.com/NervJS/taro/issues/6662\">#6662</a>。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过<code>namespace</code>的方式进行屏蔽。</li>\n<li>不支持 vue-router，可以使用官方的<a href=\"https://taro-docs.jd.com/taro/docs/router\">路由</a>方案</li>\n</ul>\n<p>官方列出了一个不能完全兼容 Vue 的情况。参见<a href=\"https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6\">其他限制</a></p>\n<h2 id=\"如何选择-UI-框架\"><a href=\"#如何选择-UI-框架\" class=\"headerlink\" title=\"如何选择 UI 框架\"></a>如何选择 UI 框架</h2><p>Taro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。</p>\n<p>由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。</p>\n<h3 id=\"NutUI\"><a href=\"#NutUI\" class=\"headerlink\" title=\"NutUI\"></a>NutUI</h3><p><a href=\"https://nutui.jd.com/#/intro\">NutUI 3.0</a></p>\n<p>京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为<a href=\"https://github.com/jdf2e/nutui/releases/tag/v3.1.18\">v3.1.18</a>。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。</p>\n<h3 id=\"taro-ui-vue3\"><a href=\"#taro-ui-vue3\" class=\"headerlink\" title=\"taro-ui-vue3\"></a>taro-ui-vue3</h3><p><a href=\"https://b2nil.github.io/taro-ui-vue3/\">taro-ui-vue3</a></p>\n<p>taro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。</p>\n<h3 id=\"Taroify\"><a href=\"#Taroify\" class=\"headerlink\" title=\"Taroify\"></a>Taroify</h3><p><a href=\"https://taroify.gitee.io/taroify.com/introduce/\">Taroify</a></p>\n<p>Taroify 是移动端组件库 <a href=\"https://github.com/youzan/vant\">Vant</a> 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯<a href=\"https://github.com/youzan/vant\">Vant</a>进行开发，可以尝试。</p>\n<h3 id=\"taro-color-ui\"><a href=\"#taro-color-ui\" class=\"headerlink\" title=\"taro-color-ui\"></a>taro-color-ui</h3><p><a href=\"https://gengar-666.github.io/taro-color-ui/#/\">taro-color-ui</a></p>\n<p>color-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。</p>\n<h2 id=\"Taro-物料市场\"><a href=\"#Taro-物料市场\" class=\"headerlink\" title=\"Taro 物料市场\"></a>Taro 物料市场</h2><p><a href=\"https://taro-ext.jd.com/\">Taro 物料市场</a></p>\n<p>taro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。</p>\n<h3 id=\"Taro-社区\"><a href=\"#Taro-社区\" class=\"headerlink\" title=\"Taro 社区\"></a>Taro 社区</h3><p><a href=\"https://taro-club.jd.com/\">Taro 社区</a></p>\n<p>可以在社区中查找常见问题的处理方法</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Taro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。</p>\n<p>借助<code>kbone</code>文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。</p>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p><strong>阅读对象</strong>：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。</p>\n<hr>\n<p>随着小程序的发展，现在主流厂商均有自己的小程序框架，如：<code>微信</code>、<code>京东</code>、<code>百度</code>、<code>支付宝</code>、<code>字节跳动</code>、<code>QQ</code>、<code>飞书</code>，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。</p>\n<p>目前常见的开发模式有：</p>\n<ol>\n<li>针对每一个小程序做单独开发，研发投入成本较大；即原生开发；</li>\n<li>开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的<code>kbone</code>；</li>\n<li>使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：<code>Taro</code>、<code>uni-app</code>；</li>\n</ol>\n<p>本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：<code>Taro</code>、<code>WePY</code> 、<code>uni-app</code>、<code>mpvue</code>、<code>chameleon</code>、<code>kbone</code>。那技术栈如何选型？</p>\n<h2 id=\"小程序多端框架横向对比\"><a href=\"#小程序多端框架横向对比\" class=\"headerlink\" title=\"小程序多端框架横向对比\"></a>小程序多端框架横向对比</h2><p>市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。</p>\n<p><a href=\"https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review\">小程序框架全面测评（2019-03-12），来自 Taro 官方</a><br><a href=\"https://juejin.cn/post/6844904118901817351\">跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金</a></p>\n<p>这里需要提的是微信官方推出的<a href=\"https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D\">kbone</a>，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。</p>\n<p>截止目前来看，在小程序开发领域，国内开发者使用最多的应当是<code>Taro</code>、<code>uni-app</code>、<code>kbone</code>。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。</p>\n<h2 id=\"如何使用-Taro\"><a href=\"#如何使用-Taro\" class=\"headerlink\" title=\"如何使用 Taro\"></a>如何使用 Taro</h2><p>如果你不了解<a href=\"https://taro-docs.jd.com/taro/docs\">Taro</a>，可以在官网了解<a href=\"https://taro-docs.jd.com/taro/docs/\">https://taro-docs.jd.com/taro/docs</a>。</p>\n<p>官方提供了比较详细的教程告知如何初始化 Taro 项目，<a href=\"https://taro-docs.jd.com/taro/docs/GETTING-STARTED\">Taro 安装及使用</a>，你可以按照<a href=\"https://taro-docs.jd.com/taro/docs/folder\">基础教程</a>&gt;<a href=\"https://taro-docs.jd.com/taro/docs/config-detail\">进阶教程</a>的方式进行入门。</p>\n<p>当然官方也有入门教程可以参考<a href=\"https://taro-docs.jd.com/taro/docs/guide\">Taro 渐进式入门教程</a>，看完基本了解如何使用 Taro 了。</p>\n<p>其中你需要了解 Taro 的<a href=\"https://taro-docs.jd.com/taro/docs/config\">编译配置</a>，以及 Taro 如何定义<a href=\"https://taro-docs.jd.com/taro/docs/size\">设计稿及尺寸单位</a>。</p>\n<h3 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h3><p>编译配置存放于项目根目录下的 config 目录中，包含三个文件：</p>\n<ul>\n<li>index.js 是通用配置</li>\n<li>dev.js 是项目预览时的配置</li>\n<li>prod.js 是项目打包时的配置</li>\n</ul>\n<p>详细的编译配置参数参见<a href=\"https://taro-docs.jd.com/taro/docs/config-detail\">编译配置详情</a>。按照文档介绍配置项目即可。</p>\n<p>其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：</p>\n<ul>\n<li>微信小程序限制单包大小不得超过 2M，总包不得超过 20M。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\">微信小程序开发文档-分包加载</a></li>\n<li>支付宝小程序单包大小不得超过 2M，总包不得超过 8M。<a href=\"https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6\">支付宝小程序开发文档-分包大小限制</a></li>\n<li>字节小程序单包大小不得超过 2M，总包不得超过 16M。<a href=\"https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction\">字节小程序开发温暖的-分包简介</a></li>\n</ul>\n<p>在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：</p>\n<ul>\n<li>移除包中的静态资源，改成服务器加载，例如图片上传到 CDN</li>\n<li>压缩代码</li>\n</ul>\n<h4 id=\"使用-terser-webpack-plugin-压缩代码\"><a href=\"#使用-terser-webpack-plugin-压缩代码\" class=\"headerlink\" title=\"使用 terser-webpack-plugin 压缩代码\"></a>使用 terser-webpack-plugin 压缩代码</h4><p>在<code>/config/dev.js</code>中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mini</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">webpackChain</span>: <span class=\"function\">(<span class=\"params\">chain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      chain.<span class=\"title function_\">merge</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">test</span>: [<span class=\"string\">&quot;common.js&quot;</span>, <span class=\"string\">&quot;taro.js&quot;</span>, <span class=\"string\">&quot;vendors.js&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>], <span class=\"comment\">// 参与压缩的文件</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。</p>\n<h3 id=\"设计稿及尺寸单位\"><a href=\"#设计稿及尺寸单位\" class=\"headerlink\" title=\"设计稿及尺寸单位\"></a>设计稿及尺寸单位</h3><p>Taro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。</p>\n<p>或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读<br><a href=\"https://blog.csdn.net/weixin_45785873/article/details/106948607\">移动开发的设计稿为什么大多数是 750px</a>。<br><a href=\"https://www.jianshu.com/p/cf600c2930cb\">移动端 Web 页面适配浅析</a><br><a href=\"https://juejin.cn/post/6844903951012200456#heading-24\">深入浅出移动端适配（总结版）</a></p>\n<p>总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。</p>\n<p>你需要如下定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /config/index.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">designWidth</span>: <span class=\"number\">750</span>, <span class=\"comment\">// 设计稿尺寸</span></span><br><span class=\"line\">  <span class=\"attr\">deviceRatio</span>: &#123; <span class=\"comment\">// 针对不同设计稿尺寸的处理换算规则</span></span><br><span class=\"line\">    <span class=\"number\">640</span>: <span class=\"number\">2.34</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">750</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">828</span>: <span class=\"number\">1.81</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">375</span>: <span class=\"number\">2</span> / <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。</p>\n<h2 id=\"Vue-的支持\"><a href=\"#Vue-的支持\" class=\"headerlink\" title=\"Vue 的支持\"></a>Vue 的支持</h2><p>Taro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。<br>主要的差别有：</p>\n<ul>\n<li>事件，使用<code>@tap</code>替代<code>@click</code></li>\n<li>在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber</li>\n<li>无法使用 stopPropagation<a href=\"https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F\">阻止滚动穿透</a></li>\n</ul>\n<blockquote>\n<p>经过测试，<code>@tap=&quot;e =&gt; &#123;e.stopPropagation(); handleTapEvent(); &#125;&quot;</code> 这种写法可以阻止冒泡</p>\n</blockquote>\n<ul>\n<li>Taro 中 <a href=\"https://taro-docs.jd.com/taro/docs/vue-overall#ref\">ref</a> 存在差别，无法获取大大小信息</li>\n<li>不支持 <code>&lt;style scoped&gt;</code>，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。<a href=\"https://github.com/NervJS/taro/issues/6662\">#6662</a>。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过<code>namespace</code>的方式进行屏蔽。</li>\n<li>不支持 vue-router，可以使用官方的<a href=\"https://taro-docs.jd.com/taro/docs/router\">路由</a>方案</li>\n</ul>\n<p>官方列出了一个不能完全兼容 Vue 的情况。参见<a href=\"https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6\">其他限制</a></p>\n<h2 id=\"如何选择-UI-框架\"><a href=\"#如何选择-UI-框架\" class=\"headerlink\" title=\"如何选择 UI 框架\"></a>如何选择 UI 框架</h2><p>Taro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。</p>\n<p>由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。</p>\n<h3 id=\"NutUI\"><a href=\"#NutUI\" class=\"headerlink\" title=\"NutUI\"></a>NutUI</h3><p><a href=\"https://nutui.jd.com/#/intro\">NutUI 3.0</a></p>\n<p>京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为<a href=\"https://github.com/jdf2e/nutui/releases/tag/v3.1.18\">v3.1.18</a>。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。</p>\n<h3 id=\"taro-ui-vue3\"><a href=\"#taro-ui-vue3\" class=\"headerlink\" title=\"taro-ui-vue3\"></a>taro-ui-vue3</h3><p><a href=\"https://b2nil.github.io/taro-ui-vue3/\">taro-ui-vue3</a></p>\n<p>taro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。</p>\n<h3 id=\"Taroify\"><a href=\"#Taroify\" class=\"headerlink\" title=\"Taroify\"></a>Taroify</h3><p><a href=\"https://taroify.gitee.io/taroify.com/introduce/\">Taroify</a></p>\n<p>Taroify 是移动端组件库 <a href=\"https://github.com/youzan/vant\">Vant</a> 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯<a href=\"https://github.com/youzan/vant\">Vant</a>进行开发，可以尝试。</p>\n<h3 id=\"taro-color-ui\"><a href=\"#taro-color-ui\" class=\"headerlink\" title=\"taro-color-ui\"></a>taro-color-ui</h3><p><a href=\"https://gengar-666.github.io/taro-color-ui/#/\">taro-color-ui</a></p>\n<p>color-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。</p>\n<h2 id=\"Taro-物料市场\"><a href=\"#Taro-物料市场\" class=\"headerlink\" title=\"Taro 物料市场\"></a>Taro 物料市场</h2><p><a href=\"https://taro-ext.jd.com/\">Taro 物料市场</a></p>\n<p>taro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。</p>\n<h3 id=\"Taro-社区\"><a href=\"#Taro-社区\" class=\"headerlink\" title=\"Taro 社区\"></a>Taro 社区</h3><p><a href=\"https://taro-club.jd.com/\">Taro 社区</a></p>\n<p>可以在社区中查找常见问题的处理方法</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Taro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。</p>\n<p>借助<code>kbone</code>文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。</p>\n"},{"title":"vuepress学习系列/1/初次认识","toc":true,"sidebar":true,"date":"2020-01-16T14:28:37.000Z","_content":"\n### vuepress 初识\n\n之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。\n\n\n\n翻了源码之后发现其使用`vue-markdown-loader`来加载`markdown`文档，按照这个原理，翻看`vue-loader`官网后,发现了`vuepress`。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了`vuepress`学习之旅。\n\n\n\n### vuepress 能做什么\n\n你看到的，`vue`、`vue-loader`、`vue-router`等 `vue `官方的文档,均是使用 `vuepress` 搭建的。\n\n\n\n### 上手\n\n开始前，先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/](https://vuepress.vuejs.org/zh/guide/)\n\n按照 [快速上手](https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) 的步骤，安装并初始化\n\n```shell\n# 安装\nyarn global add vuepress # 或者：npm install -g vuepress\n\n# 创建项目目录\nmkdir vuepress-starter && cd vuepress-starter\n\n# 新建一个 markdown 文件\n# 可能会导致乱码的问题\necho '# Hello VuePress!' > README.md\n\n# 开始写作\nvuepress dev .\n\n# 构建静态文件\nvuepress build .\n```\n\n> 问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 `README.md` 文件乱码导致的，将文件编码修改成 `utf-8` 即可解决该问题。\n\n","source":"_posts/vuepress-01-first-learning.md","raw":"---\ntitle: vuepress学习系列/1/初次认识\ntoc: true\nsidebar: true\ndate: 2020-01-16 22:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n### vuepress 初识\n\n之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。\n\n\n\n翻了源码之后发现其使用`vue-markdown-loader`来加载`markdown`文档，按照这个原理，翻看`vue-loader`官网后,发现了`vuepress`。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了`vuepress`学习之旅。\n\n\n\n### vuepress 能做什么\n\n你看到的，`vue`、`vue-loader`、`vue-router`等 `vue `官方的文档,均是使用 `vuepress` 搭建的。\n\n\n\n### 上手\n\n开始前，先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/](https://vuepress.vuejs.org/zh/guide/)\n\n按照 [快速上手](https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) 的步骤，安装并初始化\n\n```shell\n# 安装\nyarn global add vuepress # 或者：npm install -g vuepress\n\n# 创建项目目录\nmkdir vuepress-starter && cd vuepress-starter\n\n# 新建一个 markdown 文件\n# 可能会导致乱码的问题\necho '# Hello VuePress!' > README.md\n\n# 开始写作\nvuepress dev .\n\n# 构建静态文件\nvuepress build .\n```\n\n> 问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 `README.md` 文件乱码导致的，将文件编码修改成 `utf-8` 即可解决该问题。\n\n","slug":"vuepress-01-first-learning","published":1,"updated":"2020-05-29T08:56:56.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak1c001qvcv6eqcb41kh","content":"<h3 id=\"vuepress-初识\"><a href=\"#vuepress-初识\" class=\"headerlink\" title=\"vuepress 初识\"></a>vuepress 初识</h3><p>之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。</p>\n<p>翻了源码之后发现其使用<code>vue-markdown-loader</code>来加载<code>markdown</code>文档，按照这个原理，翻看<code>vue-loader</code>官网后,发现了<code>vuepress</code>。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了<code>vuepress</code>学习之旅。</p>\n<h3 id=\"vuepress-能做什么\"><a href=\"#vuepress-能做什么\" class=\"headerlink\" title=\"vuepress 能做什么\"></a>vuepress 能做什么</h3><p>你看到的，<code>vue</code>、<code>vue-loader</code>、<code>vue-router</code>等 <code>vue</code>官方的文档,均是使用 <code>vuepress</code> 搭建的。</p>\n<h3 id=\"上手\"><a href=\"#上手\" class=\"headerlink\" title=\"上手\"></a>上手</h3><p>开始前，先领取一份官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/\">https://vuepress.vuejs.org/zh/guide/</a></p>\n<p>按照 <a href=\"https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">快速上手</a> 的步骤，安装并初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yarn global add vuepress # 或者：npm install -g vuepress</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建项目目录</span></span><br><span class=\"line\">mkdir vuepress-starter &amp;&amp; cd vuepress-starter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可能会导致乱码的问题</span></span><br><span class=\"line\">echo &#x27;# Hello VuePress!&#x27; &gt; README.md</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">vuepress dev .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建静态文件</span></span><br><span class=\"line\">vuepress build .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 <code>README.md</code> 文件乱码导致的，将文件编码修改成 <code>utf-8</code> 即可解决该问题。</p>\n</blockquote>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"vuepress-初识\"><a href=\"#vuepress-初识\" class=\"headerlink\" title=\"vuepress 初识\"></a>vuepress 初识</h3><p>之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。</p>\n<p>翻了源码之后发现其使用<code>vue-markdown-loader</code>来加载<code>markdown</code>文档，按照这个原理，翻看<code>vue-loader</code>官网后,发现了<code>vuepress</code>。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了<code>vuepress</code>学习之旅。</p>\n<h3 id=\"vuepress-能做什么\"><a href=\"#vuepress-能做什么\" class=\"headerlink\" title=\"vuepress 能做什么\"></a>vuepress 能做什么</h3><p>你看到的，<code>vue</code>、<code>vue-loader</code>、<code>vue-router</code>等 <code>vue</code>官方的文档,均是使用 <code>vuepress</code> 搭建的。</p>\n<h3 id=\"上手\"><a href=\"#上手\" class=\"headerlink\" title=\"上手\"></a>上手</h3><p>开始前，先领取一份官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/\">https://vuepress.vuejs.org/zh/guide/</a></p>\n<p>按照 <a href=\"https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">快速上手</a> 的步骤，安装并初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yarn global add vuepress # 或者：npm install -g vuepress</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建项目目录</span></span><br><span class=\"line\">mkdir vuepress-starter &amp;&amp; cd vuepress-starter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可能会导致乱码的问题</span></span><br><span class=\"line\">echo &#x27;# Hello VuePress!&#x27; &gt; README.md</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">vuepress dev .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建静态文件</span></span><br><span class=\"line\">vuepress build .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 <code>README.md</code> 文件乱码导致的，将文件编码修改成 <code>utf-8</code> 即可解决该问题。</p>\n</blockquote>\n"},{"title":"vuepress学习系列/2/基本配置","toc":true,"sidebar":true,"date":"2020-01-16T14:28:37.000Z","_content":"\n### vuepress配置\n\n先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/basic-config.html](https://vuepress.vuejs.org/zh/guide/basic-config.html)\n\n`vuepress`的所有配置信息均放在 `docs/.vuepress` 目录下，因为 `vuepress` 建议的目录结构如下:\n\n```\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\n```\n\n目录结构文档：[https://vuepress.vuejs.org/zh/guide/directory-structure.html](https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由)\n\n\n\n新建配置文件只需要在`.vuepress`下新建文件`config.js`即可：\n\n```sh\n> mkdir .vuepress && touch .vuepress/config.js\n```\n\n一个 VuePress 网站必要的配置文件是 `.vuepress/config.js`，它应该导出一个 JavaScript 对象：\n\n```js\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around'\n}\n```\n\n\n\n### 完整基本配置 \n\n官方文档地址：[基本配置](https://vuepress.vuejs.org/zh/config/#基本配置)，具体配置请参照官方文档。这里只列出一些不好理解的属性。\n\n> 加 ☆ 的属性表示不知道该属性如何使用。\n\n- ☆ [temp](https://vuepress.vuejs.org/zh/config/#temp)  指定客户端文件的临时目录。\n\n  > 默认的临时文件放在 `node_modules/@vuepress/core/.temp` 下\n\n- ☆ [shouldPrefetch](https://vuepress.vuejs.org/zh/config/#shouldprefetch)  一个函数，用来控制对于哪些文件，是需要生成 `<link rel=\"prefetch\">` 资源提示的。请参考 [shouldPrefetch](https://ssr.vuejs.org/zh/api/#shouldprefetch)。\n\n  > 该参数用于服务端渲染\n\n- [cache](https://vuepress.vuejs.org/zh/config/#cache)  此选项可以用于指定 cache 的路径，同时也可以通过设置为 `false` 来在每次构建之前删除 cache。\n\n- [extraWatchFiles](https://vuepress.vuejs.org/zh/config/#extrawatchfiles)  指定额外的需要被监听的文件。\n\n- [patterns](https://vuepress.vuejs.org/zh/config/#patterns)  指定将解析哪些文件。默认值：`['**/*.md', '**/*.vue']`。\n\n  > 你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。`['**/page/*.md']`只包含`page`目录下的`.md`文件\n\n- ","source":"_posts/vuepress-02-basic-config.md","raw":"---\ntitle: vuepress学习系列/2/基本配置\ntoc: true\nsidebar: true\ndate: 2020-01-16 22:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n### vuepress配置\n\n先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/basic-config.html](https://vuepress.vuejs.org/zh/guide/basic-config.html)\n\n`vuepress`的所有配置信息均放在 `docs/.vuepress` 目录下，因为 `vuepress` 建议的目录结构如下:\n\n```\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\n```\n\n目录结构文档：[https://vuepress.vuejs.org/zh/guide/directory-structure.html](https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由)\n\n\n\n新建配置文件只需要在`.vuepress`下新建文件`config.js`即可：\n\n```sh\n> mkdir .vuepress && touch .vuepress/config.js\n```\n\n一个 VuePress 网站必要的配置文件是 `.vuepress/config.js`，它应该导出一个 JavaScript 对象：\n\n```js\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around'\n}\n```\n\n\n\n### 完整基本配置 \n\n官方文档地址：[基本配置](https://vuepress.vuejs.org/zh/config/#基本配置)，具体配置请参照官方文档。这里只列出一些不好理解的属性。\n\n> 加 ☆ 的属性表示不知道该属性如何使用。\n\n- ☆ [temp](https://vuepress.vuejs.org/zh/config/#temp)  指定客户端文件的临时目录。\n\n  > 默认的临时文件放在 `node_modules/@vuepress/core/.temp` 下\n\n- ☆ [shouldPrefetch](https://vuepress.vuejs.org/zh/config/#shouldprefetch)  一个函数，用来控制对于哪些文件，是需要生成 `<link rel=\"prefetch\">` 资源提示的。请参考 [shouldPrefetch](https://ssr.vuejs.org/zh/api/#shouldprefetch)。\n\n  > 该参数用于服务端渲染\n\n- [cache](https://vuepress.vuejs.org/zh/config/#cache)  此选项可以用于指定 cache 的路径，同时也可以通过设置为 `false` 来在每次构建之前删除 cache。\n\n- [extraWatchFiles](https://vuepress.vuejs.org/zh/config/#extrawatchfiles)  指定额外的需要被监听的文件。\n\n- [patterns](https://vuepress.vuejs.org/zh/config/#patterns)  指定将解析哪些文件。默认值：`['**/*.md', '**/*.vue']`。\n\n  > 你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。`['**/page/*.md']`只包含`page`目录下的`.md`文件\n\n- ","slug":"vuepress-02-basic-config","published":1,"updated":"2020-05-29T08:56:54.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak1d001tvcv60fyw3mjn","content":"<h3 id=\"vuepress配置\"><a href=\"#vuepress配置\" class=\"headerlink\" title=\"vuepress配置\"></a>vuepress配置</h3><p>先领取一份官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/basic-config.html\">https://vuepress.vuejs.org/zh/guide/basic-config.html</a></p>\n<p><code>vuepress</code>的所有配置信息均放在 <code>docs/.vuepress</code> 目录下，因为 <code>vuepress</code> 建议的目录结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress (可选的)</span><br><span class=\"line\">│   │   ├── components (可选的)</span><br><span class=\"line\">│   │   ├── theme (可选的)</span><br><span class=\"line\">│   │   │   └── Layout.vue</span><br><span class=\"line\">│   │   ├── public (可选的)</span><br><span class=\"line\">│   │   ├── styles (可选的)</span><br><span class=\"line\">│   │   │   ├── index.styl</span><br><span class=\"line\">│   │   │   └── palette.styl</span><br><span class=\"line\">│   │   ├── templates (可选的, 谨慎配置)</span><br><span class=\"line\">│   │   │   ├── dev.html</span><br><span class=\"line\">│   │   │   └── ssr.html</span><br><span class=\"line\">│   │   ├── config.js (可选的)</span><br><span class=\"line\">│   │   └── enhanceApp.js (可选的)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── guide</span><br><span class=\"line\">│   │   └── README.md</span><br><span class=\"line\">│   └── config.md</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>目录结构文档：<a href=\"https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由\">https://vuepress.vuejs.org/zh/guide/directory-structure.html</a></p>\n<p>新建配置文件只需要在<code>.vuepress</code>下新建文件<code>config.js</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">mkdir</span> .vuepress &amp;&amp; <span class=\"built_in\">touch</span> .vuepress/config.js</span><br></pre></td></tr></table></figure>\n\n<p>一个 VuePress 网站必要的配置文件是 <code>.vuepress/config.js</code>，它应该导出一个 JavaScript 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello VuePress&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;Just playing around&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整基本配置\"><a href=\"#完整基本配置\" class=\"headerlink\" title=\"完整基本配置\"></a>完整基本配置</h3><p>官方文档地址：<a href=\"https://vuepress.vuejs.org/zh/config/#基本配置\">基本配置</a>，具体配置请参照官方文档。这里只列出一些不好理解的属性。</p>\n<blockquote>\n<p>加 ☆ 的属性表示不知道该属性如何使用。</p>\n</blockquote>\n<ul>\n<li><p>☆ <a href=\"https://vuepress.vuejs.org/zh/config/#temp\">temp</a>  指定客户端文件的临时目录。</p>\n<blockquote>\n<p>默认的临时文件放在 <code>node_modules/@vuepress/core/.temp</code> 下</p>\n</blockquote>\n</li>\n<li><p>☆ <a href=\"https://vuepress.vuejs.org/zh/config/#shouldprefetch\">shouldPrefetch</a>  一个函数，用来控制对于哪些文件，是需要生成 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 资源提示的。请参考 <a href=\"https://ssr.vuejs.org/zh/api/#shouldprefetch\">shouldPrefetch</a>。</p>\n<blockquote>\n<p>该参数用于服务端渲染</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#cache\">cache</a>  此选项可以用于指定 cache 的路径，同时也可以通过设置为 <code>false</code> 来在每次构建之前删除 cache。</p>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#extrawatchfiles\">extraWatchFiles</a>  指定额外的需要被监听的文件。</p>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#patterns\">patterns</a>  指定将解析哪些文件。默认值：<code>[&#39;**/*.md&#39;, &#39;**/*.vue&#39;]</code>。</p>\n<blockquote>\n<p>你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。<code>[&#39;**/page/*.md&#39;]</code>只包含<code>page</code>目录下的<code>.md</code>文件</p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"vuepress配置\"><a href=\"#vuepress配置\" class=\"headerlink\" title=\"vuepress配置\"></a>vuepress配置</h3><p>先领取一份官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/basic-config.html\">https://vuepress.vuejs.org/zh/guide/basic-config.html</a></p>\n<p><code>vuepress</code>的所有配置信息均放在 <code>docs/.vuepress</code> 目录下，因为 <code>vuepress</code> 建议的目录结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress (可选的)</span><br><span class=\"line\">│   │   ├── components (可选的)</span><br><span class=\"line\">│   │   ├── theme (可选的)</span><br><span class=\"line\">│   │   │   └── Layout.vue</span><br><span class=\"line\">│   │   ├── public (可选的)</span><br><span class=\"line\">│   │   ├── styles (可选的)</span><br><span class=\"line\">│   │   │   ├── index.styl</span><br><span class=\"line\">│   │   │   └── palette.styl</span><br><span class=\"line\">│   │   ├── templates (可选的, 谨慎配置)</span><br><span class=\"line\">│   │   │   ├── dev.html</span><br><span class=\"line\">│   │   │   └── ssr.html</span><br><span class=\"line\">│   │   ├── config.js (可选的)</span><br><span class=\"line\">│   │   └── enhanceApp.js (可选的)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── guide</span><br><span class=\"line\">│   │   └── README.md</span><br><span class=\"line\">│   └── config.md</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>目录结构文档：<a href=\"https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由\">https://vuepress.vuejs.org/zh/guide/directory-structure.html</a></p>\n<p>新建配置文件只需要在<code>.vuepress</code>下新建文件<code>config.js</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">mkdir</span> .vuepress &amp;&amp; <span class=\"built_in\">touch</span> .vuepress/config.js</span><br></pre></td></tr></table></figure>\n\n<p>一个 VuePress 网站必要的配置文件是 <code>.vuepress/config.js</code>，它应该导出一个 JavaScript 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello VuePress&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;Just playing around&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整基本配置\"><a href=\"#完整基本配置\" class=\"headerlink\" title=\"完整基本配置\"></a>完整基本配置</h3><p>官方文档地址：<a href=\"https://vuepress.vuejs.org/zh/config/#基本配置\">基本配置</a>，具体配置请参照官方文档。这里只列出一些不好理解的属性。</p>\n<blockquote>\n<p>加 ☆ 的属性表示不知道该属性如何使用。</p>\n</blockquote>\n<ul>\n<li><p>☆ <a href=\"https://vuepress.vuejs.org/zh/config/#temp\">temp</a>  指定客户端文件的临时目录。</p>\n<blockquote>\n<p>默认的临时文件放在 <code>node_modules/@vuepress/core/.temp</code> 下</p>\n</blockquote>\n</li>\n<li><p>☆ <a href=\"https://vuepress.vuejs.org/zh/config/#shouldprefetch\">shouldPrefetch</a>  一个函数，用来控制对于哪些文件，是需要生成 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 资源提示的。请参考 <a href=\"https://ssr.vuejs.org/zh/api/#shouldprefetch\">shouldPrefetch</a>。</p>\n<blockquote>\n<p>该参数用于服务端渲染</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#cache\">cache</a>  此选项可以用于指定 cache 的路径，同时也可以通过设置为 <code>false</code> 来在每次构建之前删除 cache。</p>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#extrawatchfiles\">extraWatchFiles</a>  指定额外的需要被监听的文件。</p>\n</li>\n<li><p><a href=\"https://vuepress.vuejs.org/zh/config/#patterns\">patterns</a>  指定将解析哪些文件。默认值：<code>[&#39;**/*.md&#39;, &#39;**/*.vue&#39;]</code>。</p>\n<blockquote>\n<p>你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。<code>[&#39;**/page/*.md&#39;]</code>只包含<code>page</code>目录下的<code>.md</code>文件</p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n"},{"title":"vuepress学习系列/3/默认主题配置","toc":true,"sidebar":true,"date":"2020-01-20T03:28:37.000Z","_content":"\n官方文档参见：[默认主题配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页)\n\n\n\n开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容\n```\n.\n├── docs\n│   ├── .vuepress\n|\t|\t└── config.js (配置文件)\n|\t|\n│   ├── guide (指南)\n│   │   ├── README.md (指南首页)\n│   │   ├── basic-config (基本配置)\n│   │   │   └── README.vue (基本配置首页)\n│   │   └── info.md (相关信息页面)\n│   │ \n│   ├── about.md (关于我们)\n│   └── README.md (项目主页)\n│ \n└── package.json\n\n```\n\n\n# 导航栏\n\n\n\n\n\n# 侧边栏\n\n配置项 `themeConfig.sidebar`\n\n侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置`themeConfig.sidebar`\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      '/',\n      '/guide/',\n      '/guide/basic-config/',\n      '/guide/info',\n      '/about',\n    ]\n  }\n}\n```\n\n效果如下：\n\n![1579510148963](vuepress-03-default-theme-config/1579510148963.png)\n\n> 侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据`themeConfig.sidebar`参数内容生成。\n\n特别需要注意的是，文件和文件夹的设置方式的差别：\n\n> 文档中说：你可以省略 `.md` 拓展名，同时以 `/` 结尾的路径将会被视为 `*/README.md`\n\n这句话你可以理解成：针对于文件夹，请设置以 `/` 结尾。\n\n如果侧边栏路径指向一个实际的文件，例如`about.md`文件，侧边栏你可以设置成`/about`，他将实际使用 `/about.md`文件，将生成`http:localhost:8000/about.html`页面路径。\n\n如果是一个目录，例如`guide`，请设置成`/guide/`，他将实际使用 `/guide/README.md`文件，将生成`http:localhost:8000/guide/`\n\n\n\n## 侧边栏名称\n\n默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 `[link, text]` 的数组。\n\n\n\n## 侧边栏层级深度\n\n类似于官网中的侧边栏信息，他存在一定的层级深度。\n\n![1579510936334](vuepress-03-default-theme-config/1579510936334.png)\n\n默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。\n\n```markdown\n# 一级标题\n内容部分\n\n## 二级标题\n内容部分\n\n### 三级标题\n内容部分\n\n```\n\n![1579511258773](vuepress-03-default-theme-config/1579511258773.png)\n\n默认情况下，层级深度只展示到二级标题，但是你可通过`themeConfig.sidebarDepth`属性修改默认行为。\n\n`0`：禁用标题链接，只提取`h1`的标题；\n\n`1`：默认值，他将提取到`h1`、`h2`的标题；\n\n`2`：最大值，将提取`h1`、`h2`、`h3`的标题。\n\n\n\n设置方式有两种：\n\n1. 在`themeConfig.sidebarDepth`设置，他将影响所有页面的侧边栏层级。\n\n2. 在文件中使用`YAML`格式设置，将单独影响当前页面：\n\n   ```markdown\n   ---\n   sidebarDepth: 2\n   ---\n   ```\n\n## 显示所有页面的标题链接\n\n默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 `themeConfig.displayAllHeaders` 设置为 `true` 来显示所有页面的标题链接：\n\n```js\nmodule.exports = {\n  themeConfig: {\n    displayAllHeaders: true // 默认值：false\n  }\n}\n```\n\n> 设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。\n\n\n\n\n\n## 侧边栏分组\n\n分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：\n\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      \"/\",\n      {\n        title: \"指南分组\",  // 必须的\n        path: \"/guide/\",   // 可选的, 应该是一个绝对路径\n        collapsable: true, // 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态\n        sidebarDepth: 2,   // 可选的, 默认值是 1\n        children: [\"/guide/basic-config/\", \"/guide/info\"] // 可选的，没有时将不会有折叠效果\n      },\n\n      \"/about\"\n    ]\n  }\n}\n```\n\n他将生成如下的侧边栏：\n\n![1579512507035](vuepress-03-default-theme-config/1579512507035.png)\n\n## 多个侧边栏\n\n如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：\n\n```\n{\n  \"themeConfig\": {\n    sidebar: {\n      '/guide/': [\n        '',\n        'basic-config/',\n        'info'\n      ],\n      \"/\": [\n        '',\n        'about'\n      ],\n    }\n  }\n}\n```\n\n\n\n![1579513820591](vuepress-03-default-theme-config/1579513820591.png)\n\n>需要注意的是:\n>\n>`sidebar`属性是一个键值对对象，而不是数组。\n>\n>`/` 路径必须要在最后设置，`vuepress`会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置`/`，会导致之后的配置均无法找到，因为`/`可以匹配到任意模式。\n\n","source":"_posts/vuepress-03-default-theme-config.md","raw":"---\ntitle: vuepress学习系列/3/默认主题配置\ntoc: true\nsidebar: true\ndate: 2020-01-20 11:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n官方文档参见：[默认主题配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页)\n\n\n\n开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容\n```\n.\n├── docs\n│   ├── .vuepress\n|\t|\t└── config.js (配置文件)\n|\t|\n│   ├── guide (指南)\n│   │   ├── README.md (指南首页)\n│   │   ├── basic-config (基本配置)\n│   │   │   └── README.vue (基本配置首页)\n│   │   └── info.md (相关信息页面)\n│   │ \n│   ├── about.md (关于我们)\n│   └── README.md (项目主页)\n│ \n└── package.json\n\n```\n\n\n# 导航栏\n\n\n\n\n\n# 侧边栏\n\n配置项 `themeConfig.sidebar`\n\n侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置`themeConfig.sidebar`\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      '/',\n      '/guide/',\n      '/guide/basic-config/',\n      '/guide/info',\n      '/about',\n    ]\n  }\n}\n```\n\n效果如下：\n\n![1579510148963](vuepress-03-default-theme-config/1579510148963.png)\n\n> 侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据`themeConfig.sidebar`参数内容生成。\n\n特别需要注意的是，文件和文件夹的设置方式的差别：\n\n> 文档中说：你可以省略 `.md` 拓展名，同时以 `/` 结尾的路径将会被视为 `*/README.md`\n\n这句话你可以理解成：针对于文件夹，请设置以 `/` 结尾。\n\n如果侧边栏路径指向一个实际的文件，例如`about.md`文件，侧边栏你可以设置成`/about`，他将实际使用 `/about.md`文件，将生成`http:localhost:8000/about.html`页面路径。\n\n如果是一个目录，例如`guide`，请设置成`/guide/`，他将实际使用 `/guide/README.md`文件，将生成`http:localhost:8000/guide/`\n\n\n\n## 侧边栏名称\n\n默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 `[link, text]` 的数组。\n\n\n\n## 侧边栏层级深度\n\n类似于官网中的侧边栏信息，他存在一定的层级深度。\n\n![1579510936334](vuepress-03-default-theme-config/1579510936334.png)\n\n默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。\n\n```markdown\n# 一级标题\n内容部分\n\n## 二级标题\n内容部分\n\n### 三级标题\n内容部分\n\n```\n\n![1579511258773](vuepress-03-default-theme-config/1579511258773.png)\n\n默认情况下，层级深度只展示到二级标题，但是你可通过`themeConfig.sidebarDepth`属性修改默认行为。\n\n`0`：禁用标题链接，只提取`h1`的标题；\n\n`1`：默认值，他将提取到`h1`、`h2`的标题；\n\n`2`：最大值，将提取`h1`、`h2`、`h3`的标题。\n\n\n\n设置方式有两种：\n\n1. 在`themeConfig.sidebarDepth`设置，他将影响所有页面的侧边栏层级。\n\n2. 在文件中使用`YAML`格式设置，将单独影响当前页面：\n\n   ```markdown\n   ---\n   sidebarDepth: 2\n   ---\n   ```\n\n## 显示所有页面的标题链接\n\n默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 `themeConfig.displayAllHeaders` 设置为 `true` 来显示所有页面的标题链接：\n\n```js\nmodule.exports = {\n  themeConfig: {\n    displayAllHeaders: true // 默认值：false\n  }\n}\n```\n\n> 设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。\n\n\n\n\n\n## 侧边栏分组\n\n分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：\n\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      \"/\",\n      {\n        title: \"指南分组\",  // 必须的\n        path: \"/guide/\",   // 可选的, 应该是一个绝对路径\n        collapsable: true, // 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态\n        sidebarDepth: 2,   // 可选的, 默认值是 1\n        children: [\"/guide/basic-config/\", \"/guide/info\"] // 可选的，没有时将不会有折叠效果\n      },\n\n      \"/about\"\n    ]\n  }\n}\n```\n\n他将生成如下的侧边栏：\n\n![1579512507035](vuepress-03-default-theme-config/1579512507035.png)\n\n## 多个侧边栏\n\n如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：\n\n```\n{\n  \"themeConfig\": {\n    sidebar: {\n      '/guide/': [\n        '',\n        'basic-config/',\n        'info'\n      ],\n      \"/\": [\n        '',\n        'about'\n      ],\n    }\n  }\n}\n```\n\n\n\n![1579513820591](vuepress-03-default-theme-config/1579513820591.png)\n\n>需要注意的是:\n>\n>`sidebar`属性是一个键值对对象，而不是数组。\n>\n>`/` 路径必须要在最后设置，`vuepress`会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置`/`，会导致之后的配置均无法找到，因为`/`可以匹配到任意模式。\n\n","slug":"vuepress-03-default-theme-config","published":1,"updated":"2020-05-29T08:56:50.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl22rak1e001uvcv67te449jn","content":"<p>官方文档参见：<a href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页\">默认主题配置</a></p>\n<p>开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress</span><br><span class=\"line\">|\t|\t└── config.js (配置文件)</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">│   ├── guide (指南)</span><br><span class=\"line\">│   │   ├── README.md (指南首页)</span><br><span class=\"line\">│   │   ├── basic-config (基本配置)</span><br><span class=\"line\">│   │   │   └── README.vue (基本配置首页)</span><br><span class=\"line\">│   │   └── info.md (相关信息页面)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── about.md (关于我们)</span><br><span class=\"line\">│   └── README.md (项目主页)</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h1><h1 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h1><p>配置项 <code>themeConfig.sidebar</code></p>\n<p>侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置<code>themeConfig.sidebar</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      &#x27;/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/basic-config/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/info&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/about&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579510148963.png\" alt=\"1579510148963\"></p>\n<blockquote>\n<p>侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据<code>themeConfig.sidebar</code>参数内容生成。</p>\n</blockquote>\n<p>特别需要注意的是，文件和文件夹的设置方式的差别：</p>\n<blockquote>\n<p>文档中说：你可以省略 <code>.md</code> 拓展名，同时以 <code>/</code> 结尾的路径将会被视为 <code>*/README.md</code></p>\n</blockquote>\n<p>这句话你可以理解成：针对于文件夹，请设置以 <code>/</code> 结尾。</p>\n<p>如果侧边栏路径指向一个实际的文件，例如<code>about.md</code>文件，侧边栏你可以设置成<code>/about</code>，他将实际使用 <code>/about.md</code>文件，将生成<code>http:localhost:8000/about.html</code>页面路径。</p>\n<p>如果是一个目录，例如<code>guide</code>，请设置成<code>/guide/</code>，他将实际使用 <code>/guide/README.md</code>文件，将生成<code>http:localhost:8000/guide/</code></p>\n<h2 id=\"侧边栏名称\"><a href=\"#侧边栏名称\" class=\"headerlink\" title=\"侧边栏名称\"></a>侧边栏名称</h2><p>默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 <code>[link, text]</code> 的数组。</p>\n<h2 id=\"侧边栏层级深度\"><a href=\"#侧边栏层级深度\" class=\"headerlink\" title=\"侧边栏层级深度\"></a>侧边栏层级深度</h2><p>类似于官网中的侧边栏信息，他存在一定的层级深度。</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579510936334.png\" alt=\"1579510936334\"></p>\n<p>默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579511258773.png\" alt=\"1579511258773\"></p>\n<p>默认情况下，层级深度只展示到二级标题，但是你可通过<code>themeConfig.sidebarDepth</code>属性修改默认行为。</p>\n<p><code>0</code>：禁用标题链接，只提取<code>h1</code>的标题；</p>\n<p><code>1</code>：默认值，他将提取到<code>h1</code>、<code>h2</code>的标题；</p>\n<p><code>2</code>：最大值，将提取<code>h1</code>、<code>h2</code>、<code>h3</code>的标题。</p>\n<p>设置方式有两种：</p>\n<ol>\n<li><p>在<code>themeConfig.sidebarDepth</code>设置，他将影响所有页面的侧边栏层级。</p>\n</li>\n<li><p>在文件中使用<code>YAML</code>格式设置，将单独影响当前页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">sidebarDepth: 2</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"显示所有页面的标题链接\"><a href=\"#显示所有页面的标题链接\" class=\"headerlink\" title=\"显示所有页面的标题链接\"></a>显示所有页面的标题链接</h2><p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">themeConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">displayAllHeaders</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 默认值：false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。</p>\n</blockquote>\n<h2 id=\"侧边栏分组\"><a href=\"#侧边栏分组\" class=\"headerlink\" title=\"侧边栏分组\"></a>侧边栏分组</h2><p>分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        title<span class=\"punctuation\">:</span> <span class=\"string\">&quot;指南分组&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 必须的</span></span><br><span class=\"line\">        path<span class=\"punctuation\">:</span> <span class=\"string\">&quot;/guide/&quot;</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 应该是一个绝对路径</span></span><br><span class=\"line\">        collapsable<span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态</span></span><br><span class=\"line\">        sidebarDepth<span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 默认值是 1</span></span><br><span class=\"line\">        children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/guide/basic-config/&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/guide/info&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 可选的，没有时将不会有折叠效果</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">&quot;/about&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>他将生成如下的侧边栏：</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579512507035.png\" alt=\"1579512507035\"></p>\n<h2 id=\"多个侧边栏\"><a href=\"#多个侧边栏\" class=\"headerlink\" title=\"多个侧边栏\"></a>多个侧边栏</h2><p>如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;themeConfig&quot;: &#123;</span><br><span class=\"line\">    sidebar: &#123;</span><br><span class=\"line\">      &#x27;/guide/&#x27;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;basic-config/&#x27;,</span><br><span class=\"line\">        &#x27;info&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;/&quot;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;about&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579513820591.png\" alt=\"1579513820591\"></p>\n<blockquote>\n<p>需要注意的是:</p>\n<p><code>sidebar</code>属性是一个键值对对象，而不是数组。</p>\n<p><code>/</code> 路径必须要在最后设置，<code>vuepress</code>会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置<code>/</code>，会导致之后的配置均无法找到，因为<code>/</code>可以匹配到任意模式。</p>\n</blockquote>\n","site":{"data":{"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>官方文档参见：<a href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页\">默认主题配置</a></p>\n<p>开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress</span><br><span class=\"line\">|\t|\t└── config.js (配置文件)</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">│   ├── guide (指南)</span><br><span class=\"line\">│   │   ├── README.md (指南首页)</span><br><span class=\"line\">│   │   ├── basic-config (基本配置)</span><br><span class=\"line\">│   │   │   └── README.vue (基本配置首页)</span><br><span class=\"line\">│   │   └── info.md (相关信息页面)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── about.md (关于我们)</span><br><span class=\"line\">│   └── README.md (项目主页)</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h1><h1 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h1><p>配置项 <code>themeConfig.sidebar</code></p>\n<p>侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置<code>themeConfig.sidebar</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      &#x27;/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/basic-config/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/info&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/about&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579510148963.png\" alt=\"1579510148963\"></p>\n<blockquote>\n<p>侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据<code>themeConfig.sidebar</code>参数内容生成。</p>\n</blockquote>\n<p>特别需要注意的是，文件和文件夹的设置方式的差别：</p>\n<blockquote>\n<p>文档中说：你可以省略 <code>.md</code> 拓展名，同时以 <code>/</code> 结尾的路径将会被视为 <code>*/README.md</code></p>\n</blockquote>\n<p>这句话你可以理解成：针对于文件夹，请设置以 <code>/</code> 结尾。</p>\n<p>如果侧边栏路径指向一个实际的文件，例如<code>about.md</code>文件，侧边栏你可以设置成<code>/about</code>，他将实际使用 <code>/about.md</code>文件，将生成<code>http:localhost:8000/about.html</code>页面路径。</p>\n<p>如果是一个目录，例如<code>guide</code>，请设置成<code>/guide/</code>，他将实际使用 <code>/guide/README.md</code>文件，将生成<code>http:localhost:8000/guide/</code></p>\n<h2 id=\"侧边栏名称\"><a href=\"#侧边栏名称\" class=\"headerlink\" title=\"侧边栏名称\"></a>侧边栏名称</h2><p>默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 <code>[link, text]</code> 的数组。</p>\n<h2 id=\"侧边栏层级深度\"><a href=\"#侧边栏层级深度\" class=\"headerlink\" title=\"侧边栏层级深度\"></a>侧边栏层级深度</h2><p>类似于官网中的侧边栏信息，他存在一定的层级深度。</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579510936334.png\" alt=\"1579510936334\"></p>\n<p>默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579511258773.png\" alt=\"1579511258773\"></p>\n<p>默认情况下，层级深度只展示到二级标题，但是你可通过<code>themeConfig.sidebarDepth</code>属性修改默认行为。</p>\n<p><code>0</code>：禁用标题链接，只提取<code>h1</code>的标题；</p>\n<p><code>1</code>：默认值，他将提取到<code>h1</code>、<code>h2</code>的标题；</p>\n<p><code>2</code>：最大值，将提取<code>h1</code>、<code>h2</code>、<code>h3</code>的标题。</p>\n<p>设置方式有两种：</p>\n<ol>\n<li><p>在<code>themeConfig.sidebarDepth</code>设置，他将影响所有页面的侧边栏层级。</p>\n</li>\n<li><p>在文件中使用<code>YAML</code>格式设置，将单独影响当前页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">sidebarDepth: 2</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"显示所有页面的标题链接\"><a href=\"#显示所有页面的标题链接\" class=\"headerlink\" title=\"显示所有页面的标题链接\"></a>显示所有页面的标题链接</h2><p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">themeConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">displayAllHeaders</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 默认值：false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。</p>\n</blockquote>\n<h2 id=\"侧边栏分组\"><a href=\"#侧边栏分组\" class=\"headerlink\" title=\"侧边栏分组\"></a>侧边栏分组</h2><p>分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        title<span class=\"punctuation\">:</span> <span class=\"string\">&quot;指南分组&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 必须的</span></span><br><span class=\"line\">        path<span class=\"punctuation\">:</span> <span class=\"string\">&quot;/guide/&quot;</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 应该是一个绝对路径</span></span><br><span class=\"line\">        collapsable<span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态</span></span><br><span class=\"line\">        sidebarDepth<span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 默认值是 1</span></span><br><span class=\"line\">        children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/guide/basic-config/&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/guide/info&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 可选的，没有时将不会有折叠效果</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">&quot;/about&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>他将生成如下的侧边栏：</p>\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579512507035.png\" alt=\"1579512507035\"></p>\n<h2 id=\"多个侧边栏\"><a href=\"#多个侧边栏\" class=\"headerlink\" title=\"多个侧边栏\"></a>多个侧边栏</h2><p>如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;themeConfig&quot;: &#123;</span><br><span class=\"line\">    sidebar: &#123;</span><br><span class=\"line\">      &#x27;/guide/&#x27;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;basic-config/&#x27;,</span><br><span class=\"line\">        &#x27;info&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;/&quot;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;about&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2020/01/20/vuepress-03-default-theme-config/1579513820591.png\" alt=\"1579513820591\"></p>\n<blockquote>\n<p>需要注意的是:</p>\n<p><code>sidebar</code>属性是一个键值对对象，而不是数组。</p>\n<p><code>/</code> 路径必须要在最后设置，<code>vuepress</code>会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置<code>/</code>，会导致之后的配置均无法找到，因为<code>/</code>可以匹配到任意模式。</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/how-to-deploy-hexo-to-self-server/1573175297499.png","post":"cl22rak0p000fvcv6g9bva3m2","slug":"1573175297499.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590654652879.png","post":"cl22rak0s000lvcv6dfj60bk7","slug":"1590654652879.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590655537760.png","post":"cl22rak0s000lvcv6dfj60bk7","slug":"1590655537760.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590655829098.png","post":"cl22rak0s000lvcv6dfj60bk7","slug":"1590655829098.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590656080311.png","post":"cl22rak0s000lvcv6dfj60bk7","slug":"1590656080311.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_161248.gif","post":"cl22rak0s000lvcv6dfj60bk7","slug":"20200528_161248.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_171021.gif","post":"cl22rak0s000lvcv6dfj60bk7","slug":"20200528_171021.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_172321.gif","post":"cl22rak0s000lvcv6dfj60bk7","slug":"20200528_172321.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_175335.gif","post":"cl22rak0s000lvcv6dfj60bk7","slug":"20200528_175335.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/3064F5DA.gif","post":"cl22rak0s000lvcv6dfj60bk7","slug":"3064F5DA.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/blog.sh","post":"cl22rak0s000lvcv6dfj60bk7","slug":"blog.sh","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510148963.png","post":"cl22rak1e001uvcv67te449jn","slug":"1579510148963.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510936334.png","post":"cl22rak1e001uvcv67te449jn","slug":"1579510936334.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579511258773.png","post":"cl22rak1e001uvcv67te449jn","slug":"1579511258773.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579512507035.png","post":"cl22rak1e001uvcv67te449jn","slug":"1579512507035.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579513820591.png","post":"cl22rak1e001uvcv67te449jn","slug":"1579513820591.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl22rak0c0001vcv67phc69q4","category_id":"cl22rak0i0004vcv61ipi9dni","_id":"cl22rak0r000ivcv6cz3r39e4"},{"post_id":"cl22rak0g0003vcv60bwdam29","category_id":"cl22rak0o000cvcv6cilranie","_id":"cl22rak0x000pvcv62l62g1yh"},{"post_id":"cl22rak0k0007vcv6cv8g1d9w","category_id":"cl22rak0r000jvcv6bc27grk7","_id":"cl22rak0z000uvcv61zg19gan"},{"post_id":"cl22rak0m0009vcv6epb01qry","category_id":"cl22rak0x000qvcv6b5qzf8km","_id":"cl22rak11000yvcv68lzf5t8h"},{"post_id":"cl22rak0n000bvcv63xf5fbyb","category_id":"cl22rak0x000qvcv6b5qzf8km","_id":"cl22rak120012vcv6cx3v88dz"},{"post_id":"cl22rak0p000fvcv6g9bva3m2","category_id":"cl22rak0x000qvcv6b5qzf8km","_id":"cl22rak130016vcv6ehjn2cj9"},{"post_id":"cl22rak0r000hvcv6ca8i2rfh","category_id":"cl22rak120011vcv639s8epv5","_id":"cl22rak14001bvcv620rj7u8j"},{"post_id":"cl22rak0s000lvcv6dfj60bk7","category_id":"cl22rak0x000qvcv6b5qzf8km","_id":"cl22rak17001evcv6byz07xn0"},{"post_id":"cl22rak0v000nvcv6d78e5yk4","category_id":"cl22rak14001avcv64a276bgc","_id":"cl22rak18001ivcv6330p4v07"},{"post_id":"cl22rak0x000svcv67nlsfyju","category_id":"cl22rak17001fvcv6fii4539q","_id":"cl22rak19001lvcv67tt0331k"},{"post_id":"cl22rak1c001pvcv631e81mmw","category_id":"cl22rak1d001rvcv6cwsfa40g","_id":"cl22rak1g001xvcv603th3csc"},{"post_id":"cl22rak1c001qvcv6eqcb41kh","category_id":"cl22rak1f001vvcv625hydrat","_id":"cl22rak1h0021vcv69ibsa2g6"},{"post_id":"cl22rak1d001tvcv60fyw3mjn","category_id":"cl22rak1f001vvcv625hydrat","_id":"cl22rak1i0024vcv6byh83l09"},{"post_id":"cl22rak1e001uvcv67te449jn","category_id":"cl22rak1f001vvcv625hydrat","_id":"cl22rak1i0028vcv6ed49fhlq"}],"PostTag":[{"post_id":"cl22rak0c0001vcv67phc69q4","tag_id":"cl22rak0j0005vcv6g6pj2xva","_id":"cl22rak0t000mvcv6bbhs0003"},{"post_id":"cl22rak0c0001vcv67phc69q4","tag_id":"cl22rak0o000dvcv6b9ll26ia","_id":"cl22rak0w000ovcv6ag3a6i6q"},{"post_id":"cl22rak0g0003vcv60bwdam29","tag_id":"cl22rak0s000kvcv633wwaa8q","_id":"cl22rak0y000tvcv6faum9v7n"},{"post_id":"cl22rak0k0007vcv6cv8g1d9w","tag_id":"cl22rak0x000rvcv6camh733x","_id":"cl22rak120010vcv68wjfh93a"},{"post_id":"cl22rak0k0007vcv6cv8g1d9w","tag_id":"cl22rak0z000wvcv6a3a18le5","_id":"cl22rak120013vcv68ou37rqn"},{"post_id":"cl22rak0m0009vcv6epb01qry","tag_id":"cl22rak11000zvcv654smhbec","_id":"cl22rak130015vcv63r9ie4k2"},{"post_id":"cl22rak0n000bvcv63xf5fbyb","tag_id":"cl22rak120014vcv63vw59931","_id":"cl22rak140019vcv6eclb9ypi"},{"post_id":"cl22rak0p000fvcv6g9bva3m2","tag_id":"cl22rak11000zvcv654smhbec","_id":"cl22rak17001dvcv6eys0er6h"},{"post_id":"cl22rak0r000hvcv6ca8i2rfh","tag_id":"cl22rak14001cvcv63rs97ab5","_id":"cl22rak18001hvcv68mzu0322"},{"post_id":"cl22rak0s000lvcv6dfj60bk7","tag_id":"cl22rak11000zvcv654smhbec","_id":"cl22rak19001kvcv6316h9s7r"},{"post_id":"cl22rak0v000nvcv6d78e5yk4","tag_id":"cl22rak18001jvcv6h4wy2fy6","_id":"cl22rak19001nvcv6aifn79m9"},{"post_id":"cl22rak0x000svcv67nlsfyju","tag_id":"cl22rak19001mvcv68zo29tqs","_id":"cl22rak19001ovcv6hvatc64i"},{"post_id":"cl22rak1c001pvcv631e81mmw","tag_id":"cl22rak1d001svcv60x3w5n2t","_id":"cl22rak1h0023vcv69iyuh4u1"},{"post_id":"cl22rak1c001pvcv631e81mmw","tag_id":"cl22rak1f001wvcv6go2cgqot","_id":"cl22rak1i0025vcv6707434q4"},{"post_id":"cl22rak1c001pvcv631e81mmw","tag_id":"cl22rak1g001zvcv63hu56bxz","_id":"cl22rak1i0027vcv6g8iw41w0"},{"post_id":"cl22rak1c001qvcv6eqcb41kh","tag_id":"cl22rak1h0022vcv62iz89r5c","_id":"cl22rak1i0029vcv6a05315qd"},{"post_id":"cl22rak1d001tvcv60fyw3mjn","tag_id":"cl22rak1h0022vcv62iz89r5c","_id":"cl22rak1j002bvcv6gktq5bt7"},{"post_id":"cl22rak1e001uvcv67te449jn","tag_id":"cl22rak1h0022vcv62iz89r5c","_id":"cl22rak1j002cvcv661dh7u89"}],"Tag":[{"name":"测试","_id":"cl22rak0j0005vcv6g6pj2xva"},{"name":"单元测试","_id":"cl22rak0o000dvcv6b9ll26ia"},{"name":"element","_id":"cl22rak0s000kvcv633wwaa8q"},{"name":"fetch","_id":"cl22rak0x000rvcv6camh733x"},{"name":"javascript","_id":"cl22rak0z000wvcv6a3a18le5"},{"name":"hexo","_id":"cl22rak11000zvcv654smhbec"},{"name":"hexo主题","_id":"cl22rak120014vcv63vw59931"},{"name":"mysql","_id":"cl22rak14001cvcv63rs97ab5"},{"name":"个人","_id":"cl22rak18001jvcv6h4wy2fy6"},{"name":"vue","_id":"cl22rak19001mvcv68zo29tqs"},{"name":"taro","_id":"cl22rak1d001svcv60x3w5n2t"},{"name":"wechat","_id":"cl22rak1f001wvcv6go2cgqot"},{"name":"miniprograme","_id":"cl22rak1g001zvcv63hu56bxz"},{"name":"vuepress","_id":"cl22rak1h0022vcv62iz89r5c"}]}}