{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign.png","path":"images/favatar/idesign.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/meituan.jpg","path":"images/favatar/meituan.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/techblog.jpg","path":"images/favatar/techblog.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"da78c0444278f04f84dd26827f4336ac8a649dbd","modified":1630477743610},{"_id":"source/_drafts/what-is-unit-test.md","hash":"8f01618a79ec6168ebc45500ff2516217aa7be11","modified":1657850221401},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1630477743611},{"_id":"source/_data/links.yml","hash":"e8e8e0e8413f607e29fce4fed9de83a46e42f8ae","modified":1630477743612},{"_id":"source/_posts/fetch-api.md","hash":"5ec89b1a76be725075f0670266138e43d2cb43ef","modified":1631011914243},{"_id":"source/_posts/element-code-learning.md","hash":"8fc9b472f6649b433b00dfe04eda6da92ecd8256","modified":1630477743612},{"_id":"source/_posts/hexo-theme-pure.md","hash":"81afb959776d1ec3f99a9826971c57e86cd9653b","modified":1630477743614},{"_id":"source/_posts/hello-hexo.md","hash":"3d26618a85743f0b5971e7e07a2978ec4b98833e","modified":1630477743613},{"_id":"source/_posts/how-to-deploy-hexo-to-self-server.md","hash":"34484f1c25b06e1dbf75e584f681227ace645972","modified":1630477743614},{"_id":"source/_posts/learn-the-abc-of-docker-about-network.md","hash":"62c2105bf9c0d7c6afe8b0a0e20ce77c3b586468","modified":1657883547651},{"_id":"source/_posts/learn-the-abc-of-docker.md","hash":"2231731878b2fc6a6fa6444c0f2c64320b6b6d6a","modified":1657883624734},{"_id":"source/_posts/mysql-dump-source.md","hash":"b889c7995d2719f78bd9e93aaf0c65ebd13ce4cc","modified":1630562131709},{"_id":"source/_posts/summary-and-relection-in-2019.md","hash":"0fb17bf74ae3fa140773c571f61e2579795dd92d","modified":1630477743669},{"_id":"source/_posts/taro-init-project.md","hash":"866b5c1471f64fee830f0252dfc930dbad6b5c2b","modified":1657850221401},{"_id":"source/_posts/so-simple-to-write-blog.md","hash":"2b808c1fa9b36058f4dfa7f9cd6e213b2692a46b","modified":1657850221401},{"_id":"source/_posts/vue-cli3-change-build-dir.md","hash":"8ff63882715b490915862836c244b13472407093","modified":1657850221402},{"_id":"source/_posts/vuepress-01-first-learning.md","hash":"5b2ac83f6e312c7cd4503a9c4fa3e519ab688c74","modified":1657850221403},{"_id":"source/_posts/vuepress-02-basic-config.md","hash":"19b789b09380040a962cbd279efbd79c8b3b73ee","modified":1657850221403},{"_id":"source/_posts/vuepress-03-default-theme-config.md","hash":"c79b953f7a8664779029f35f5fb7be9c584b70f0","modified":1657850221404},{"_id":"source/about/index.md","hash":"bf478d10ece23e2dc43cd046fc12f52c38520664","modified":1630477951458},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1630477743676},{"_id":"source/categories/index.md","hash":"66026ba8e513c7c911eed56ec3c382b3cd106355","modified":1630477743677},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1630477743678},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1630477743678},{"_id":"source/tags/index.md","hash":"0ec2c1c69f1a5bd9d86ed7bc31b38da7be169be0","modified":1630477743679},{"_id":"source/_posts/how-to-deploy-hexo-to-self-server/1573175297499.png","hash":"fde1ca027df76caf3eb5c3b8fd65e289a0d8c2c7","modified":1630477743615},{"_id":"source/_posts/learn-the-abc-of-docker/1657758523904.png","hash":"6801d33067660fb60a21620a1a4cb4b350fc139f","modified":1657850230726},{"_id":"source/_posts/so-simple-to-write-blog/1590654652879.png","hash":"e07b0c9c7a4675babc413ba692b8574d56a4bc8c","modified":1630477743616},{"_id":"source/_posts/learn-the-abc-of-docker-about-network/1657882812055.png","hash":"1d8f330f5e483914f1d10334b9e3c8e0e28ccfac","modified":1657882812075},{"_id":"source/_posts/so-simple-to-write-blog/1590655829098.png","hash":"bee2c3e41e4f3a0c7485f593b7b3e20818987877","modified":1630477743618},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510148963.png","hash":"d02d5668441030c08ff364f77c6191c7b0a1bc17","modified":1630477743672},{"_id":"source/_posts/so-simple-to-write-blog/blog.sh","hash":"a45b7844a7212ab40f4fcfed9fa2c94f9f88e358","modified":1630477743669},{"_id":"source/_posts/vuepress-03-default-theme-config/1579511258773.png","hash":"aa7998184d0c5ec717389afc5755949bbf2d3c6d","modified":1630477743674},{"_id":"source/_posts/vuepress-03-default-theme-config/1579512507035.png","hash":"f49ba81539e99d153793b97fec3ee09f3053b88f","modified":1630477743674},{"_id":"source/_posts/vuepress-03-default-theme-config/1579513820591.png","hash":"a4e111d3de6aed5bbe1b60994044c6de7c3ba2cc","modified":1630477743675},{"_id":"source/_posts/learn-the-abc-of-docker-about-network/1657876653166.png","hash":"884f22b1aa2db388c33e8cbb7517c401bb816a4b","modified":1657876653198},{"_id":"source/_posts/so-simple-to-write-blog/1590655537760.png","hash":"d2f98c329e3052603d2136c395ba72ac3b50a738","modified":1630477743617},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510936334.png","hash":"243d1afa31aa20009f660fc760ef3662892cfcb3","modified":1630477743673},{"_id":"source/_posts/so-simple-to-write-blog/1590656080311.png","hash":"0f37c88703d1077862ce653ee7e20ce7f45dd103","modified":1630477743619},{"_id":"source/_posts/so-simple-to-write-blog/3064F5DA.gif","hash":"b6549912c9883c164e5e5bd9833ec3b4511084c9","modified":1630477743668},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1630477743704},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1630477743706},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1630477743705},{"_id":"themes/pure/_config.yml","hash":"45463382489c6e8fad61cf677fedded29cf6966f","modified":1630477743707},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1630477743707},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1630477743706},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1630477743749},{"_id":"themes/pure/.git.rename/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1630477743680},{"_id":"themes/pure/.git.rename/config","hash":"7dba24ba57e81cd54684ccd801f8bd890eb9bd78","modified":1630477743681},{"_id":"themes/pure/.git.rename/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1630477743681},{"_id":"themes/pure/.git.rename/index","hash":"8a97c32e705080691491200cd785773b3b2f17d1","modified":1630477743686},{"_id":"themes/pure/.git.rename/packed-refs","hash":"42f024248c0351deb4ab89bd8614290c2155d04d","modified":1630477743702},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1630477743714},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1630477743715},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1630477743715},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1630477743715},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1630477743744},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1630477743745},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1630477743745},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1630477743746},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1630477743746},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1630477743746},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1630477743747},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1630477743747},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1630477743747},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1630477743748},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1630477743748},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1630477743749},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1630477743749},{"_id":"themes/pure/source/favicon.png","hash":"d51ca3da3e44a4b89ffc1973a9113c30858d3ab0","modified":1630477743766},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1630477743763},{"_id":"themes/pure/.git.rename/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1630477743682},{"_id":"themes/pure/.git.rename/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1630477743682},{"_id":"themes/pure/.git.rename/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1630477743683},{"_id":"themes/pure/.git.rename/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1630477743683},{"_id":"themes/pure/.git.rename/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1630477743683},{"_id":"themes/pure/.git.rename/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1630477743683},{"_id":"themes/pure/.git.rename/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1630477743684},{"_id":"themes/pure/.git.rename/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1630477743684},{"_id":"themes/pure/.git.rename/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1630477743684},{"_id":"themes/pure/.git.rename/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1630477743685},{"_id":"themes/pure/.git.rename/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1630477743685},{"_id":"themes/pure/.git.rename/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1630477743686},{"_id":"themes/pure/.git.rename/logs/HEAD","hash":"381c35fd6f050fdbc6553eabbb8a1333fabd4145","modified":1630477743687},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1630477743708},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1630477743709},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1630477743709},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1630477743710},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1630477743710},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1630477743711},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1630477743712},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1630477743714},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1630477743713},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1630477743716},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1630477743717},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1630477743717},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1630477743718},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1630477743718},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1630477743719},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1630477743719},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1630477743720},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1630477743720},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1630477743720},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1630477743721},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1630477743721},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1630477743722},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1630477743722},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1630477743723},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1630477743723},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1630477743723},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1630477743729},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1630477743729},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1630477743730},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1630477743736},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1630477743737},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1630477743737},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1630477743738},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1630477743738},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1630477743739},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1630477743739},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1630477743739},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1630477743742},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1630477743743},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1630477743743},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1630477743743},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1630477743743},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1630477743744},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1630477743740},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1630477743740},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1630477743741},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1630477743741},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1630477743742},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1630477743767},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1630477743767},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1630477743769},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1630477743770},{"_id":"themes/pure/source/images/thumb-default.png","hash":"ec73772f4d88964c79c8318da9481d800fc3cbb0","modified":1630477743774},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1630477743775},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1630477743776},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1630477743776},{"_id":"themes/pure/.git.rename/refs/heads/master","hash":"27b3e45c36f92e067332428d34c55b39077e0068","modified":1630477743703},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1630477743724},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1630477743724},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1630477743725},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1630477743725},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1630477743726},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1630477743726},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1630477743727},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1630477743727},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1630477743727},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1630477743728},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1630477743728},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1630477743729},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1630477743731},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1630477743731},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1630477743732},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1630477743732},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1630477743733},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1630477743734},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1630477743734},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1630477743735},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1630477743735},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1630477743736},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1630477743736},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"e2d44d5af43d1b91350ba333e56657918c29d432","modified":1630477743771},{"_id":"themes/pure/source/images/favatar/idesign.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1630477743773},{"_id":"themes/pure/source/images/favatar/meituan.jpg","hash":"e92c43934927c049b59d9bf3de557917ee77efe1","modified":1630477743774},{"_id":"themes/pure/source/images/favatar/techblog.jpg","hash":"db9db2e6031b8a54a8aad631de3160c1e1b630d2","modified":1630477743774},{"_id":"themes/pure/.git.rename/logs/refs/heads/master","hash":"381c35fd6f050fdbc6553eabbb8a1333fabd4145","modified":1630477743688},{"_id":"themes/pure/.git.rename/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1630477743704},{"_id":"themes/pure/.git.rename/logs/refs/remotes/origin/HEAD","hash":"381c35fd6f050fdbc6553eabbb8a1333fabd4145","modified":1630477743689},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1630477743751},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1630477743752},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1630477743754},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1630477743755},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1630477743756},{"_id":"themes/pure/source/images/avatar.jpeg","hash":"13c7bb886d7880a382b180159ba448b1ef949d2e","modified":1630477743771},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1630477743777},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1630477743778},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1630477743780},{"_id":"themes/pure/.git.rename/objects/pack/pack-bb14913eeca1c1b8eab985f87845b342ecef88ec.idx","hash":"69e68fcfa314944a7d6d571491a32f0a012fedfe","modified":1630477743690},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"be0dc6088b900fcc5a89ac2799e9a871146333e0","modified":1630477743772},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1630477743765},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1630477743766},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1630477743769},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1630477743779},{"_id":"source/_posts/so-simple-to-write-blog/20200528_171021.gif","hash":"59ae1634056cde3432b3e1554ff2518ba6a046c7","modified":1630477743631},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1630477743762},{"_id":"source/_posts/so-simple-to-write-blog/20200528_161248.gif","hash":"a5c19d5e20e87f6e4b91d09f63ad1c3a6cec0074","modified":1630477743626},{"_id":"source/_posts/so-simple-to-write-blog/20200528_175335.gif","hash":"067b46477580d23277c6f3e0c8c9aace5dd98f28","modified":1630477743666},{"_id":"themes/pure/.git.rename/objects/pack/pack-bb14913eeca1c1b8eab985f87845b342ecef88ec.pack","hash":"cfe7226e94e90aa42ced1239b6060ed7d142618e","modified":1630477743701},{"_id":"source/_posts/so-simple-to-write-blog/20200528_172321.gif","hash":"28488d67d03faa64e63e29abdcab9e53cc427ecd","modified":1630477743657},{"_id":"public/content.json","hash":"a0ed927a1328807320e13419fdd4b210b0ad86b2","modified":1657883986053},{"_id":"public/baidusitemap.xml","hash":"a0dd818f2f5bdf0bb5114a0bc8ff03d556007dee","modified":1657883986053},{"_id":"public/atom.xml","hash":"4d0cff8ed4a02924030c4a6cdec410b727e5faf0","modified":1657883986053},{"_id":"public/sitemap.xml","hash":"94adb588e2ab19f9891a8fdde79535d4997b1046","modified":1657883986053},{"_id":"public/404.html","hash":"448d86c93f88692e29e0f3ea13630474c2821720","modified":1657883986053},{"_id":"public/about/index.html","hash":"c3ad526caf96c9b5dc663047694a75972ad48cd7","modified":1657883986053},{"_id":"public/books/index.html","hash":"ce0a5f056037cc2e283685988c17b1f289700c79","modified":1657883986053},{"_id":"public/categories/index.html","hash":"e46182c957f33ecffab794ec88886e5e5acbf1b5","modified":1657883986053},{"_id":"public/repository/index.html","hash":"e3788c7d722b62170bfb0832c583c26dfe3c5005","modified":1657883986053},{"_id":"public/links/index.html","hash":"014febe3babee3b3290e6641c224b99906719494","modified":1657883986053},{"_id":"public/tags/index.html","hash":"af4a1a9affcf9be6888bb89b8a067698250a3ab4","modified":1657883986053},{"_id":"public/2022/07/15/learn-the-abc-of-docker-about-network/index.html","hash":"011e2fef2293e2ad06640c6523875730fece3c1f","modified":1657883986053},{"_id":"public/2022/07/11/learn-the-abc-of-docker/index.html","hash":"6ec81a8421249b31781f47eeac32514c57780b55","modified":1657883986053},{"_id":"public/2022/04/16/taro-init-project/index.html","hash":"c1240f34351c93b6311dfa10a379c1499d41a9a1","modified":1657883986053},{"_id":"public/2021/09/07/fetch-api/index.html","hash":"d183eb4cf1a2e9d354fa116c242e9445855ebcd9","modified":1657883986053},{"_id":"public/2021/09/02/vue-cli3-change-build-dir/index.html","hash":"9765d00af1b78fc53d251fbbc74c14bd595efbd6","modified":1657883986053},{"_id":"public/2021/09/01/mysql-dump-source/index.html","hash":"66fbabd70c9013301dc3c24bc69eca7c5e7e7529","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/index.html","hash":"dfe0084e3593d9e58ef039828be68fcffc946063","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/index.html","hash":"3d1a0419c7d214f64c55c50cee64d0496f84bd4f","modified":1657883986053},{"_id":"public/2020/01/16/vuepress-01-first-learning/index.html","hash":"613ea66da398add7abde2dd1b5bcb91b265de46e","modified":1657883986053},{"_id":"public/2020/01/16/vuepress-02-basic-config/index.html","hash":"ff9031cbc902b4ba119edb7f09603bd9978c07aa","modified":1657883986053},{"_id":"public/2020/01/16/element-code-learning/index.html","hash":"89e7daf1ceb13a8c52c6356aea845b837399b9ad","modified":1657883986053},{"_id":"public/2019/12/12/summary-and-relection-in-2019/index.html","hash":"aad2b3cfa5fd32519adfaced5486a0ddc9866d41","modified":1657883986053},{"_id":"public/2019/11/08/how-to-deploy-hexo-to-self-server/index.html","hash":"f0b63cc78407d35baa3365152f35acaafdeb13b4","modified":1657883986053},{"_id":"public/2019/11/05/hexo-theme-pure/index.html","hash":"e3f7b3de409a004644d4d7d12531bb71e77681ac","modified":1657883986053},{"_id":"public/2019/11/04/hello-hexo/index.html","hash":"c6f4fbfb117443ac1be1768f992610b6d79abb75","modified":1657883986053},{"_id":"public/archives/index.html","hash":"5cf47201f1353b634f307143cdd42cfd332f701e","modified":1657883986053},{"_id":"public/archives/page/2/index.html","hash":"9b0ece1d71e61290541e2eac0431c5c04380c643","modified":1657883986053},{"_id":"public/archives/2019/index.html","hash":"2aef1cfe6a883030960b6b56d66ed6ebe14726aa","modified":1657883986053},{"_id":"public/archives/2019/11/index.html","hash":"65dda7ce88b37504cd62497e3d6a08531fec4582","modified":1657883986053},{"_id":"public/archives/2019/12/index.html","hash":"d6a2f0f11101b23c85484fb7362a4c8c66423b42","modified":1657883986053},{"_id":"public/archives/2020/index.html","hash":"763d3238e10a6c9f78422b1ced8d25a43396c2b8","modified":1657883986053},{"_id":"public/archives/2020/01/index.html","hash":"0cdf1bf0ae53a9956bcf54741fae724084aaea58","modified":1657883986053},{"_id":"public/archives/2020/05/index.html","hash":"0ca7be94dd3067b4eb8b03d3988da6b62ae1a4a7","modified":1657883986053},{"_id":"public/archives/2021/index.html","hash":"7bfedb9b4629818fb8ff53e7c364653050e1644b","modified":1657883986053},{"_id":"public/archives/2021/09/index.html","hash":"95d45ab7a8e6d1fbf52789c1020b9f239d8dde6e","modified":1657883986053},{"_id":"public/archives/2022/index.html","hash":"f4e2f8ec68855be906d275a3b8df3dc71773950f","modified":1657883986053},{"_id":"public/archives/2022/04/index.html","hash":"45e3525853ea79a03d9a1998ec53ce2b764f4525","modified":1657883986053},{"_id":"public/archives/2022/07/index.html","hash":"b5338ba3377d874adc8599941e2ba65f0397b389","modified":1657883986053},{"_id":"public/categories/javascript/index.html","hash":"1acce153c6b111cd4fb60e26d6d8982b49659545","modified":1657883986053},{"_id":"public/categories/hexo/index.html","hash":"58a3208343aa3cfbc731d73f6bf50fb42ef1a7c1","modified":1657883986053},{"_id":"public/categories/element/index.html","hash":"f610aa53fbb2f36d436985cbb35b3c9490a0dfbe","modified":1657883986053},{"_id":"public/categories/docker/index.html","hash":"70b1c746505374304f840b0aa0f3d808d77176f8","modified":1657883986053},{"_id":"public/categories/mysq/index.html","hash":"28a0ef3276e16fd5dc74f25398bf5079a0654a68","modified":1657883986053},{"_id":"public/categories/taro/index.html","hash":"8e1ae44114e0c87109b004bbb60136e78dbb5590","modified":1657883986053},{"_id":"public/categories/个人/index.html","hash":"f33fa3c5a9704d5d98570e5f010b28dd74135f16","modified":1657883986053},{"_id":"public/index.html","hash":"4551c0fd462a72edf96a1e21a64a411319ece5de","modified":1657883986053},{"_id":"public/categories/vuepress/index.html","hash":"c445c3121e16f9fae84beaf7f57b23cc446fcf81","modified":1657883986053},{"_id":"public/categories/vue/index.html","hash":"8d4789913c5992e659b30896628e3da98a438c4f","modified":1657883986053},{"_id":"public/page/2/index.html","hash":"7a57e8109ee36701d0c2fcdde4e5dbf16d70517f","modified":1657883986053},{"_id":"public/tags/fetch/index.html","hash":"740c4f3f81f7c5ca313631ceb82cfd4545bcd8b0","modified":1657883986053},{"_id":"public/tags/javascript/index.html","hash":"39c19256c2dac604f022a97da0b194ebe1fc9507","modified":1657883986053},{"_id":"public/tags/hexo/index.html","hash":"b9aaddf417d75c2c37362fdaab0212bc170ae9a2","modified":1657883986053},{"_id":"public/tags/element/index.html","hash":"6e17537ca04da2e6bbb65fdd05e86e8d08eaefdb","modified":1657883986053},{"_id":"public/tags/hexo主题/index.html","hash":"7eba1f346d89dc250dfcb9fd594a3d3f34409783","modified":1657883986053},{"_id":"public/tags/docker/index.html","hash":"ab794281852520098a910baffa39bf8795498bdd","modified":1657883986053},{"_id":"public/tags/mysql/index.html","hash":"62eba6165b4c7f5f2b6acd22a041681432ab4699","modified":1657883986053},{"_id":"public/tags/taro/index.html","hash":"ef29b7e69b12f933c632868edbfdfe79460d7c18","modified":1657883986053},{"_id":"public/tags/wechat/index.html","hash":"06abd2a4f92cdde4388c47c9e2cf2d2deb619f4a","modified":1657883986053},{"_id":"public/tags/miniprograme/index.html","hash":"6c9e641a059e95d371dccba93ff691a58cca286f","modified":1657883986053},{"_id":"public/tags/个人/index.html","hash":"60074efd75d90bf1052974ac1c15825f48f666d7","modified":1657883986053},{"_id":"public/tags/vuepress/index.html","hash":"a2485afa2e357985c4e5960802042fc0597fd9c7","modified":1657883986053},{"_id":"public/tags/vue/index.html","hash":"a8eb515921ab0ab889d190e353989d1f1d8cdad6","modified":1657883986053},{"_id":"public/favicon.png","hash":"d51ca3da3e44a4b89ffc1973a9113c30858d3ab0","modified":1657883986053},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1657883986053},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1657883986053},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1657883986053},{"_id":"public/images/thumb-default.png","hash":"ec73772f4d88964c79c8318da9481d800fc3cbb0","modified":1657883986053},{"_id":"public/images/donate/alipayimg.png","hash":"e2d44d5af43d1b91350ba333e56657918c29d432","modified":1657883986053},{"_id":"public/images/favatar/idesign.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1657883986053},{"_id":"public/images/favatar/meituan.jpg","hash":"e92c43934927c049b59d9bf3de557917ee77efe1","modified":1657883986053},{"_id":"public/2019/11/08/how-to-deploy-hexo-to-self-server/1573175297499.png","hash":"fde1ca027df76caf3eb5c3b8fd65e289a0d8c2c7","modified":1657883986053},{"_id":"public/images/favatar/techblog.jpg","hash":"db9db2e6031b8a54a8aad631de3160c1e1b630d2","modified":1657883986053},{"_id":"public/2022/07/15/learn-the-abc-of-docker-about-network/1657882812055.png","hash":"1d8f330f5e483914f1d10334b9e3c8e0e28ccfac","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590654652879.png","hash":"e07b0c9c7a4675babc413ba692b8574d56a4bc8c","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590655829098.png","hash":"bee2c3e41e4f3a0c7485f593b7b3e20818987877","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/blog.sh","hash":"a45b7844a7212ab40f4fcfed9fa2c94f9f88e358","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579510148963.png","hash":"d02d5668441030c08ff364f77c6191c7b0a1bc17","modified":1657883986053},{"_id":"public/images/avatar.jpeg","hash":"13c7bb886d7880a382b180159ba448b1ef949d2e","modified":1657883986053},{"_id":"public/images/donate/wechatpayimg.png","hash":"be0dc6088b900fcc5a89ac2799e9a871146333e0","modified":1657883986053},{"_id":"public/2022/07/15/learn-the-abc-of-docker-about-network/1657876653166.png","hash":"884f22b1aa2db388c33e8cbb7517c401bb816a4b","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590655537760.png","hash":"d2f98c329e3052603d2136c395ba72ac3b50a738","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579511258773.png","hash":"aa7998184d0c5ec717389afc5755949bbf2d3c6d","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579512507035.png","hash":"f49ba81539e99d153793b97fec3ee09f3053b88f","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579513820591.png","hash":"a4e111d3de6aed5bbe1b60994044c6de7c3ba2cc","modified":1657883986053},{"_id":"public/2022/07/11/learn-the-abc-of-docker/1657758523904.png","hash":"6801d33067660fb60a21620a1a4cb4b350fc139f","modified":1657883986053},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1657883986053},{"_id":"public/lib/blog-encrypt.js","hash":"96509f92b7037e8f750e4684cd440a3af98d9fec","modified":1657883986053},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1657883986053},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/1590656080311.png","hash":"0f37c88703d1077862ce653ee7e20ce7f45dd103","modified":1657883986053},{"_id":"public/2020/01/20/vuepress-03-default-theme-config/1579510936334.png","hash":"243d1afa31aa20009f660fc760ef3662892cfcb3","modified":1657883986053},{"_id":"public/fonts/README.html","hash":"7c1128fed284d2fb7fee743e8a739da99385b358","modified":1657883986053},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1657883986053},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1657883986053},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/3064F5DA.gif","hash":"b6549912c9883c164e5e5bd9833ec3b4511084c9","modified":1657883986053},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1657883986053},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1657883986053},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1657883986053},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1657883986053},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_171021.gif","hash":"59ae1634056cde3432b3e1554ff2518ba6a046c7","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_161248.gif","hash":"a5c19d5e20e87f6e4b91d09f63ad1c3a6cec0074","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_175335.gif","hash":"067b46477580d23277c6f3e0c8c9aace5dd98f28","modified":1657883986053},{"_id":"public/2020/05/28/so-simple-to-write-blog/20200528_172321.gif","hash":"28488d67d03faa64e63e29abdcab9e53cc427ecd","modified":1657883986053}],"Category":[{"name":"javascript","_id":"cl5mdbjbh0004owgn2oxn1ycs"},{"name":"测试","_id":"cl5mdbjbm000cowgna6p6g23e"},{"name":"hexo","_id":"cl5mdbjbp000jowgn7det5n2y"},{"name":"element","_id":"cl5mdbjbq000powgn9nw5gnhh"},{"name":"docker","_id":"cl5mdbjbt0010owgngld53hba"},{"name":"mysq","_id":"cl5mdbjbu0015owgnhwtu4efj"},{"name":"taro","_id":"cl5mdbjc0001howgnhxhq7v9m"},{"name":"个人","_id":"cl5mdbjc2001nowgnaff0czu2"},{"name":"vuepress","_id":"cl5mdbjc4001towgn4h6xhld7"},{"name":"vue","_id":"cl5mdbjc60022owgnbgmo0y22"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404-该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404-该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n","date":"2021-09-01T06:29:03.610Z","updated":"2021-09-01T06:29:03.610Z","path":"/404.html","layout":"page","_id":"cl5mdbjbb0000owgn38rcfk5w","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"\n一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发\n\n```json\n{\n  personalInformation: {\n    name: \"曹一山\",\n    age: 27,\n    gender: \"男\",\n    experience: \"3年\",\n    address: \"江苏-苏州\",\n    education: \"硕士研究生\",\n    email: \"caoruiy@plcent.com\",\n    description: \"致力于网站开发, 以及在大前端的思潮下向前奔跑\",\n  },\n  skills: [\n    [\"Html\", \"Javascript\", \"Css\", \"ES6\", \"Node\"],\n    [\"Webpack\", \"Gulp\"],\n    [\"Git\", \"SVN\"],\n    [\"TypeScript\", \"Pug\", \"Less\"]\n    [\"Vue\"],\n    [\"ElementUI\", \"weUI\"],\n    [\"PHP\",  \"Python\", \"Dart\"],\n    [\"ThinkPHP\", \"Yii2\"],\n    [\"Selenium\"],\n    [\"Linux\"]\n  ]\n}\n```\n","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n\n一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发\n\n```json\n{\n  personalInformation: {\n    name: \"曹一山\",\n    age: 27,\n    gender: \"男\",\n    experience: \"3年\",\n    address: \"江苏-苏州\",\n    education: \"硕士研究生\",\n    email: \"caoruiy@plcent.com\",\n    description: \"致力于网站开发, 以及在大前端的思潮下向前奔跑\",\n  },\n  skills: [\n    [\"Html\", \"Javascript\", \"Css\", \"ES6\", \"Node\"],\n    [\"Webpack\", \"Gulp\"],\n    [\"Git\", \"SVN\"],\n    [\"TypeScript\", \"Pug\", \"Less\"]\n    [\"Vue\"],\n    [\"ElementUI\", \"weUI\"],\n    [\"PHP\",  \"Python\", \"Dart\"],\n    [\"ThinkPHP\", \"Yii2\"],\n    [\"Selenium\"],\n    [\"Linux\"]\n  ]\n}\n```\n","date":"2021-09-01T06:32:31.458Z","updated":"2021-09-01T06:32:31.458Z","path":"about/index.html","_id":"cl5mdbjbg0002owgnebdj0ig4","content":"<p>一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  personalInformation<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;曹一山&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    age<span class=\"punctuation\">:</span> <span class=\"number\">27</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    gender<span class=\"punctuation\">:</span> <span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    experience<span class=\"punctuation\">:</span> <span class=\"string\">&quot;3年&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    address<span class=\"punctuation\">:</span> <span class=\"string\">&quot;江苏-苏州&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    education<span class=\"punctuation\">:</span> <span class=\"string\">&quot;硕士研究生&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    email<span class=\"punctuation\">:</span> <span class=\"string\">&quot;caoruiy@plcent.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    description<span class=\"punctuation\">:</span> <span class=\"string\">&quot;致力于网站开发, 以及在大前端的思潮下向前奔跑&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  skills<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Node&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Webpack&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Gulp&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Git&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;SVN&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;TypeScript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pug&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Less&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ElementUI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;weUI&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;PHP&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;Python&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dart&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ThinkPHP&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Yii2&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Selenium&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Linux&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>一个刚毕业的职场新人，从事前端开发相关工作，对新事物保持着好奇，热爱工作，坚持保养头发</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  personalInformation<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;曹一山&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    age<span class=\"punctuation\">:</span> <span class=\"number\">27</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    gender<span class=\"punctuation\">:</span> <span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    experience<span class=\"punctuation\">:</span> <span class=\"string\">&quot;3年&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    address<span class=\"punctuation\">:</span> <span class=\"string\">&quot;江苏-苏州&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    education<span class=\"punctuation\">:</span> <span class=\"string\">&quot;硕士研究生&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    email<span class=\"punctuation\">:</span> <span class=\"string\">&quot;caoruiy@plcent.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    description<span class=\"punctuation\">:</span> <span class=\"string\">&quot;致力于网站开发, 以及在大前端的思潮下向前奔跑&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  skills<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Node&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Webpack&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Gulp&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Git&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;SVN&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;TypeScript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pug&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Less&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ElementUI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;weUI&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;PHP&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;Python&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dart&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;ThinkPHP&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Yii2&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Selenium&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;Linux&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2021-09-01T06:29:03.676Z","updated":"2021-09-01T06:29:03.676Z","path":"books/index.html","_id":"cl5mdbjbj0006owgnfk9p5to7","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","date":"2019-11-06T07:55:00.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-11-06 15:55:00\ntype: \"categories\"\nlayout: categories\ncomments: false\n---\n","updated":"2021-09-01T06:29:03.677Z","path":"categories/index.html","_id":"cl5mdbjbk0008owgn38731k1r","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-09-01T06:29:03.678Z","updated":"2021-09-01T06:29:03.678Z","path":"links/index.html","_id":"cl5mdbjbl000aowgn0y7xchoo","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-09-01T06:29:03.678Z","updated":"2021-09-01T06:29:03.678Z","path":"repository/index.html","_id":"cl5mdbjbm000eowgnbx6v0nej","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","date":"2019-11-06T07:55:13.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-06 15:55:13\ntype: \"tags\"\nlayout: tags\ncomments: false\n---\n","updated":"2021-09-01T06:29:03.679Z","path":"tags/index.html","_id":"cl5mdbjbo000gowgndtlh2wik","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"fetch用法","toc":true,"sidebar":true,"date":"2021-09-07T06:52:03.000Z","_content":"\n# Fetch API\n\n详尽的MDN文档：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\n\n使用Fetch：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n## 语法\n\n```javascript\nPromise<Response> fetch(input[, init]);\n```\n\n#### input <String | [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)>\n\n定义要获取的资源。他接受一个字符串或者一个[`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)对象。`Request()` 和 `fetch()` 接受同样的参数。你可以这样使用：\n\n```javascript\nlet request = new Request('xxx.png', init)\nfetch(request)\n\n# 等价于\nfetch('xxx.png', init)\n```\n\n\n\n\n\n#### init `可选`\n\n一个配置参数对象，可选的配置项包括：\n\n- `method`：请求方式，`GET`、`POST`、`DELETE`、`PUT`等\n\n- `headers`：请求头。形式为 [`Headers`](https://developer.mozilla.org/zh-CN/docs/Web/API/Headers) 的对象 或 一个对象。大概形式如下：\n\n  ```javascript\n  let headers = new Headers()\n  headers.append('content-type', 'application/json')\n  \n  fetch(input, {\n  \theaders: headers\n  })\n  ```\n\n  ```javascript\n  fetch(input, {\n  \theaders: {\n          content-type: 'application/json'\n      }\n  })\n  ```\n\n- `body`：请求体。可能是一个 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)、[`BufferSource` (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource)、[`FormData`](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)、[`URLSearchParams`](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams) 或者 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString) 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n\n  > 正常的`POST`请求中，`body`入参是一个字符串，所以发送一个`JSON`对象需要经过`JSON.stringify`处理。在`GET`、 `HEAD`请求中，不可以指定`body`参数，否则会报错。\n\n- `mode`: 请求跨域设置。接受以下数据枚举： `cors`、 `no-cors`或者 `same-origin（默认值）`\n\n  - `same-origin（默认值）`：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的`response.type`为`basic`。\n  - `cors`：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的`response.type`为`cors`。\n  - `no-cors`：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的`response.type`为`opaque`。\n\n  > 设置该字段，会被赋值到请求头字段`Sec-Fetch-Mode`中，根据设置字段的不同，在响应对象`response.type`中会返回不同的信息\n\n- `credentials`：请求cookie。接受以下数据枚举：`omit`（默认值）、`same-origin`或者 `include`。\n\n  > （自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 `same-origin`。Firefox 也在 61.0b13 版本中进行了修改，参见：[Request.credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials)）。为了保证各个版本的一致性，建议使用是明确指定credentials。\n  >\n  > \n  >\n  > 注：fetch-polyfill whatwg-fetch采用默认值`same-origin`：[fetch.js#L367](https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367)\n\n  - `omit`：从不发送cookies\n  - `same-origin`：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n  -  `include`：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)\n\n- `cache`：请求的 cache 模式。接受以下数据枚举： `default`、 `no-store`、 `reload` 、 `no-cache `、 `force-cache `或者 `only-if-cached` 。\n\n  > 详细参见MDN说明：[Fetch Request Cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache)、[HTTP Headers Cache-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)\n\n  - `default`：表示请求时不传 `Cache-Control` 这个标头。\n  - `reload`：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 `Cache-Control` 标头的值来进行缓存存储。跟 `no-store` 的不同点在于 `no-store` 本次请求强制刷新了，下次如果另一个请求 `Cache-Control` 再指定成别的值比如 `only-if-cached`，完全不会命中缓存，因为 `no-store` 压根没把响应结果存在本地；而 `reload` 第一次强制刷新，第二次是的 `only-if-cached` 之类的就会命中缓存。\n\n- `redirect`：重定向设置。`follow` (自动重定向)、`error` (如果产生重定向将自动终止并且抛出一个错误）、`manual` (手动处理重定向)。在Chrome中默认使用`follow（`Chrome 47之前的默认值是`manual`）。\n  - `follow`：默认值，`fetch()`跟随 HTTP 跳转。\n  - `error`：如果发生跳转，`fetch()`就报错。\n  - `manual`：`fetch()`不跟随 HTTP 跳转，但是`response.url`属性会指向新的 URL，`response.redirected`属性会变为`true`，由开发者自己决定后续如何处理跳转。\n- `referrer`：请求的引用者设置。可以为任意字符串，如果`referrer`的值为空字符串，则不发送referrer表头。\n- `referrerPolicy`：指定了HTTP头部referer字段的值。可能为以下值之一： `no-referrer`、 `no-referrer-when-downgrade` 、`origin`、 `origin-when-cross-origin`、 `unsafe-url `。\n  - `no-referrer-when-downgrade`：默认值，总是发送`Referer`标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。\n  - `no-referrer`：不发送`Referer`标头。\n  - `origin`：`Referer`标头只包含域名，不包含完整的路径。\n  - `origin-when-cross-origin`：同源请求`Referer`标头包含完整的路径，跨域请求只包含域名。\n  - `same-origin`：跨域请求不发送`Referer`，同源请求发送。\n  - `strict-origin`：`Referer`标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送`Referer`标头。\n  - `strict-origin-when-cross-origin`：同源请求时`Referer`标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。\n  - `unsafe-url`：不管什么情况，总是发送`Referer`标头。\n\n> 由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见[Request](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)文档\n\n","source":"_posts/fetch-api.md","raw":"---\ntitle: fetch用法\ntoc: true\nsidebar: true\ndate: 2021-09-07 14:52:03\ntags:\n- fetch\n- javascript\n\ncategories:\n- javascript\n---\n\n# Fetch API\n\n详尽的MDN文档：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\n\n使用Fetch：[https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n## 语法\n\n```javascript\nPromise<Response> fetch(input[, init]);\n```\n\n#### input <String | [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)>\n\n定义要获取的资源。他接受一个字符串或者一个[`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)对象。`Request()` 和 `fetch()` 接受同样的参数。你可以这样使用：\n\n```javascript\nlet request = new Request('xxx.png', init)\nfetch(request)\n\n# 等价于\nfetch('xxx.png', init)\n```\n\n\n\n\n\n#### init `可选`\n\n一个配置参数对象，可选的配置项包括：\n\n- `method`：请求方式，`GET`、`POST`、`DELETE`、`PUT`等\n\n- `headers`：请求头。形式为 [`Headers`](https://developer.mozilla.org/zh-CN/docs/Web/API/Headers) 的对象 或 一个对象。大概形式如下：\n\n  ```javascript\n  let headers = new Headers()\n  headers.append('content-type', 'application/json')\n  \n  fetch(input, {\n  \theaders: headers\n  })\n  ```\n\n  ```javascript\n  fetch(input, {\n  \theaders: {\n          content-type: 'application/json'\n      }\n  })\n  ```\n\n- `body`：请求体。可能是一个 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)、[`BufferSource` (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource)、[`FormData`](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)、[`URLSearchParams`](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams) 或者 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString) 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n\n  > 正常的`POST`请求中，`body`入参是一个字符串，所以发送一个`JSON`对象需要经过`JSON.stringify`处理。在`GET`、 `HEAD`请求中，不可以指定`body`参数，否则会报错。\n\n- `mode`: 请求跨域设置。接受以下数据枚举： `cors`、 `no-cors`或者 `same-origin（默认值）`\n\n  - `same-origin（默认值）`：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的`response.type`为`basic`。\n  - `cors`：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的`response.type`为`cors`。\n  - `no-cors`：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的`response.type`为`opaque`。\n\n  > 设置该字段，会被赋值到请求头字段`Sec-Fetch-Mode`中，根据设置字段的不同，在响应对象`response.type`中会返回不同的信息\n\n- `credentials`：请求cookie。接受以下数据枚举：`omit`（默认值）、`same-origin`或者 `include`。\n\n  > （自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 `same-origin`。Firefox 也在 61.0b13 版本中进行了修改，参见：[Request.credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials)）。为了保证各个版本的一致性，建议使用是明确指定credentials。\n  >\n  > \n  >\n  > 注：fetch-polyfill whatwg-fetch采用默认值`same-origin`：[fetch.js#L367](https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367)\n\n  - `omit`：从不发送cookies\n  - `same-origin`：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n  -  `include`：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)\n\n- `cache`：请求的 cache 模式。接受以下数据枚举： `default`、 `no-store`、 `reload` 、 `no-cache `、 `force-cache `或者 `only-if-cached` 。\n\n  > 详细参见MDN说明：[Fetch Request Cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache)、[HTTP Headers Cache-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)\n\n  - `default`：表示请求时不传 `Cache-Control` 这个标头。\n  - `reload`：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 `Cache-Control` 标头的值来进行缓存存储。跟 `no-store` 的不同点在于 `no-store` 本次请求强制刷新了，下次如果另一个请求 `Cache-Control` 再指定成别的值比如 `only-if-cached`，完全不会命中缓存，因为 `no-store` 压根没把响应结果存在本地；而 `reload` 第一次强制刷新，第二次是的 `only-if-cached` 之类的就会命中缓存。\n\n- `redirect`：重定向设置。`follow` (自动重定向)、`error` (如果产生重定向将自动终止并且抛出一个错误）、`manual` (手动处理重定向)。在Chrome中默认使用`follow（`Chrome 47之前的默认值是`manual`）。\n  - `follow`：默认值，`fetch()`跟随 HTTP 跳转。\n  - `error`：如果发生跳转，`fetch()`就报错。\n  - `manual`：`fetch()`不跟随 HTTP 跳转，但是`response.url`属性会指向新的 URL，`response.redirected`属性会变为`true`，由开发者自己决定后续如何处理跳转。\n- `referrer`：请求的引用者设置。可以为任意字符串，如果`referrer`的值为空字符串，则不发送referrer表头。\n- `referrerPolicy`：指定了HTTP头部referer字段的值。可能为以下值之一： `no-referrer`、 `no-referrer-when-downgrade` 、`origin`、 `origin-when-cross-origin`、 `unsafe-url `。\n  - `no-referrer-when-downgrade`：默认值，总是发送`Referer`标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。\n  - `no-referrer`：不发送`Referer`标头。\n  - `origin`：`Referer`标头只包含域名，不包含完整的路径。\n  - `origin-when-cross-origin`：同源请求`Referer`标头包含完整的路径，跨域请求只包含域名。\n  - `same-origin`：跨域请求不发送`Referer`，同源请求发送。\n  - `strict-origin`：`Referer`标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送`Referer`标头。\n  - `strict-origin-when-cross-origin`：同源请求时`Referer`标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。\n  - `unsafe-url`：不管什么情况，总是发送`Referer`标头。\n\n> 由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见[Request](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)文档\n\n","slug":"fetch-api","published":1,"updated":"2021-09-07T10:51:54.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbe0001owgn9gnca1ex","content":"<h1 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h1><p>详尽的MDN文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></p>\n<p>使用Fetch：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Response</span>&gt; <span class=\"title function_\">fetch</span>(input[, init]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"input-lt-String-Request-gt\"><a href=\"#input-lt-String-Request-gt\" class=\"headerlink\" title=\"input &lt;String | Request&gt;\"></a>input &lt;String | <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>&gt;</h4><p>定义要获取的资源。他接受一个字符串或者一个<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>对象。<code>Request()</code> 和 <code>fetch()</code> 接受同样的参数。你可以这样使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(request)</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"init-可选\"><a href=\"#init-可选\" class=\"headerlink\" title=\"init 可选\"></a>init <code>可选</code></h4><p>一个配置参数对象，可选的配置项包括：</p>\n<ul>\n<li><p><code>method</code>：请求方式，<code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code>等</p>\n</li>\n<li><p><code>headers</code>：请求头。形式为 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a> 的对象 或 一个对象。大概形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>()</span><br><span class=\"line\">headers.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: headers</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        content-<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>body</code>：请求体。可能是一个 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/BufferSource\"><code>BufferSource</code> (en-US)</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 或者 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a> 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</p>\n<blockquote>\n<p>正常的<code>POST</code>请求中，<code>body</code>入参是一个字符串，所以发送一个<code>JSON</code>对象需要经过<code>JSON.stringify</code>处理。在<code>GET</code>、 <code>HEAD</code>请求中，不可以指定<code>body</code>参数，否则会报错。</p>\n</blockquote>\n</li>\n<li><p><code>mode</code>: 请求跨域设置。接受以下数据枚举： <code>cors</code>、 <code>no-cors</code>或者 <code>same-origin（默认值）</code></p>\n<ul>\n<li><code>same-origin（默认值）</code>：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的<code>response.type</code>为<code>basic</code>。</li>\n<li><code>cors</code>：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的<code>response.type</code>为<code>cors</code>。</li>\n<li><code>no-cors</code>：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的<code>response.type</code>为<code>opaque</code>。</li>\n</ul>\n<blockquote>\n<p>设置该字段，会被赋值到请求头字段<code>Sec-Fetch-Mode</code>中，根据设置字段的不同，在响应对象<code>response.type</code>中会返回不同的信息</p>\n</blockquote>\n</li>\n<li><p><code>credentials</code>：请求cookie。接受以下数据枚举：<code>omit</code>（默认值）、<code>same-origin</code>或者 <code>include</code>。</p>\n<blockquote>\n<p>（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 <code>same-origin</code>。Firefox 也在 61.0b13 版本中进行了修改，参见：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials\">Request.credentials</a>）。为了保证各个版本的一致性，建议使用是明确指定credentials。</p>\n<p>注：fetch-polyfill whatwg-fetch采用默认值<code>same-origin</code>：<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367\">fetch.js#L367</a></p>\n</blockquote>\n<ul>\n<li><code>omit</code>：从不发送cookies</li>\n<li><code>same-origin</code>：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)</li>\n<li><code>include</code>：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)</li>\n</ul>\n</li>\n<li><p><code>cache</code>：请求的 cache 模式。接受以下数据枚举： <code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code>、 <code>force-cache</code>或者 <code>only-if-cached</code> 。</p>\n<blockquote>\n<p>详细参见MDN说明：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache\">Fetch Request Cache</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\">HTTP Headers Cache-Control</a></p>\n</blockquote>\n<ul>\n<li><code>default</code>：表示请求时不传 <code>Cache-Control</code> 这个标头。</li>\n<li><code>reload</code>：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 <code>Cache-Control</code> 标头的值来进行缓存存储。跟 <code>no-store</code> 的不同点在于 <code>no-store</code> 本次请求强制刷新了，下次如果另一个请求 <code>Cache-Control</code> 再指定成别的值比如 <code>only-if-cached</code>，完全不会命中缓存，因为 <code>no-store</code> 压根没把响应结果存在本地；而 <code>reload</code> 第一次强制刷新，第二次是的 <code>only-if-cached</code> 之类的就会命中缓存。</li>\n</ul>\n</li>\n<li><p><code>redirect</code>：重定向设置。<code>follow</code> (自动重定向)、<code>error</code> (如果产生重定向将自动终止并且抛出一个错误）、<code>manual</code> (手动处理重定向)。在Chrome中默认使用<code>follow（</code>Chrome 47之前的默认值是<code>manual</code>）。</p>\n<ul>\n<li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li>\n<li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li>\n<li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li>\n</ul>\n</li>\n<li><p><code>referrer</code>：请求的引用者设置。可以为任意字符串，如果<code>referrer</code>的值为空字符串，则不发送referrer表头。</p>\n</li>\n<li><p><code>referrerPolicy</code>：指定了HTTP头部referer字段的值。可能为以下值之一： <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code> 、<code>origin</code>、 <code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</p>\n<ul>\n<li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li>\n<li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li>\n<li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li>\n<li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li>\n<li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li>\n<li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li>\n<li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li>\n<li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">Request</a>文档</p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h1><p>详尽的MDN文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></p>\n<p>使用Fetch：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Response</span>&gt; <span class=\"title function_\">fetch</span>(input[, init]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"input-lt-String-Request-gt\"><a href=\"#input-lt-String-Request-gt\" class=\"headerlink\" title=\"input &lt;String | Request&gt;\"></a>input &lt;String | <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>&gt;</h4><p>定义要获取的资源。他接受一个字符串或者一个<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\"><code>Request</code></a>对象。<code>Request()</code> 和 <code>fetch()</code> 接受同样的参数。你可以这样使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(request)</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;xxx.png&#x27;</span>, init)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"init-可选\"><a href=\"#init-可选\" class=\"headerlink\" title=\"init 可选\"></a>init <code>可选</code></h4><p>一个配置参数对象，可选的配置项包括：</p>\n<ul>\n<li><p><code>method</code>：请求方式，<code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code>等</p>\n</li>\n<li><p><code>headers</code>：请求头。形式为 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a> 的对象 或 一个对象。大概形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>()</span><br><span class=\"line\">headers.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: headers</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(input, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        content-<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>body</code>：请求体。可能是一个 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/BufferSource\"><code>BufferSource</code> (en-US)</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 或者 <a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a> 对象（说白了就是字符串）。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</p>\n<blockquote>\n<p>正常的<code>POST</code>请求中，<code>body</code>入参是一个字符串，所以发送一个<code>JSON</code>对象需要经过<code>JSON.stringify</code>处理。在<code>GET</code>、 <code>HEAD</code>请求中，不可以指定<code>body</code>参数，否则会报错。</p>\n</blockquote>\n</li>\n<li><p><code>mode</code>: 请求跨域设置。接受以下数据枚举： <code>cors</code>、 <code>no-cors</code>或者 <code>same-origin（默认值）</code></p>\n<ul>\n<li><code>same-origin（默认值）</code>：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的<code>response.type</code>为<code>basic</code>。</li>\n<li><code>cors</code>：该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的<code>response.type</code>为<code>cors</code>。</li>\n<li><code>no-cors</code>：该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的<code>response.type</code>为<code>opaque</code>。</li>\n</ul>\n<blockquote>\n<p>设置该字段，会被赋值到请求头字段<code>Sec-Fetch-Mode</code>中，根据设置字段的不同，在响应对象<code>response.type</code>中会返回不同的信息</p>\n</blockquote>\n</li>\n<li><p><code>credentials</code>：请求cookie。接受以下数据枚举：<code>omit</code>（默认值）、<code>same-origin</code>或者 <code>include</code>。</p>\n<blockquote>\n<p>（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 <code>same-origin</code>。Firefox 也在 61.0b13 版本中进行了修改，参见：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/credentials\">Request.credentials</a>）。为了保证各个版本的一致性，建议使用是明确指定credentials。</p>\n<p>注：fetch-polyfill whatwg-fetch采用默认值<code>same-origin</code>：<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/github/fetch/blob/d1d09fb8039b4b8c7f2f5d6c844ea72d8a3cefe6/fetch.js#L367\">fetch.js#L367</a></p>\n</blockquote>\n<ul>\n<li><code>omit</code>：从不发送cookies</li>\n<li><code>same-origin</code>：只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息。(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)</li>\n<li><code>include</code>：不论是不是跨域的请求，总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息。 ( 推荐使用)</li>\n</ul>\n</li>\n<li><p><code>cache</code>：请求的 cache 模式。接受以下数据枚举： <code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code>、 <code>force-cache</code>或者 <code>only-if-cached</code> 。</p>\n<blockquote>\n<p>详细参见MDN说明：<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request/cache\">Fetch Request Cache</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\">HTTP Headers Cache-Control</a></p>\n</blockquote>\n<ul>\n<li><code>default</code>：表示请求时不传 <code>Cache-Control</code> 这个标头。</li>\n<li><code>reload</code>：表示本次请求忽略浏览器已经有的缓存（相当于 Ctrl + R 强制刷新），但本次请求的结果还是会遵循响应的 <code>Cache-Control</code> 标头的值来进行缓存存储。跟 <code>no-store</code> 的不同点在于 <code>no-store</code> 本次请求强制刷新了，下次如果另一个请求 <code>Cache-Control</code> 再指定成别的值比如 <code>only-if-cached</code>，完全不会命中缓存，因为 <code>no-store</code> 压根没把响应结果存在本地；而 <code>reload</code> 第一次强制刷新，第二次是的 <code>only-if-cached</code> 之类的就会命中缓存。</li>\n</ul>\n</li>\n<li><p><code>redirect</code>：重定向设置。<code>follow</code> (自动重定向)、<code>error</code> (如果产生重定向将自动终止并且抛出一个错误）、<code>manual</code> (手动处理重定向)。在Chrome中默认使用<code>follow（</code>Chrome 47之前的默认值是<code>manual</code>）。</p>\n<ul>\n<li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li>\n<li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li>\n<li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li>\n</ul>\n</li>\n<li><p><code>referrer</code>：请求的引用者设置。可以为任意字符串，如果<code>referrer</code>的值为空字符串，则不发送referrer表头。</p>\n</li>\n<li><p><code>referrerPolicy</code>：指定了HTTP头部referer字段的值。可能为以下值之一： <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code> 、<code>origin</code>、 <code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</p>\n<ul>\n<li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li>\n<li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li>\n<li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li>\n<li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li>\n<li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li>\n<li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li>\n<li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li>\n<li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>由于fetch接受Request对象作为入参，Request的所有参数均可以作为fetch的初始化参数进行使用，详细参数使用可以参见<a target=\"_blank\" rel=\"noopener\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">Request</a>文档</p>\n</blockquote>\n"},{"title":"什么是单元测试","toc":true,"sidebar":true,"date":"2020-05-29T08:55:38.000Z","_content":"\n当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。\n\n### 什么是单元测试\n所以第一件事，我需要搞清楚，到底什么是单元测试？\n> 针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个`vue`组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。\n\n\n### 为什么要写单元测试\n有一种[我非常赞同的隐喻](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)，单元测试是保证你写的代码是你想要的结果的最有效的方法！\n> 没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。\n\n单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。\n\n当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。\n\n在目前公司参与的项目中，经常性的会出现以下一些情况：\n- 代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。\n- 修改部分代码功能时，会影响到一些无关的内容\n- 修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动\n- 系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他\n- 系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。\n\n面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。\n\n> 单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的\n\n### 单元测试应该包含哪些内容\n所以，单元测试应该是什么样的，他应该怎么去写？\n\n\n### 如何写好一个单元测试\n\n编写单元测试的原则\n\n\n### 相关话题\n\n- 如何编写易于\n\n### 参考\n\n[单元测试到底是什么？应该怎么做？](https://www.zhihu.com/question/28729261)\n[干货 | 测试扁平化之必备神器：好的单元测试](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)\n","source":"_drafts/what-is-unit-test.md","raw":"---\ntitle: 什么是单元测试\ntoc: true\nsidebar: true\ndate: 2020-05-29 16:55:38\ntags:\n- 测试\n- 单元测试\n\ncategories:\n- 测试\n---\n\n当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。\n\n### 什么是单元测试\n所以第一件事，我需要搞清楚，到底什么是单元测试？\n> 针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个`vue`组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。\n\n\n### 为什么要写单元测试\n有一种[我非常赞同的隐喻](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)，单元测试是保证你写的代码是你想要的结果的最有效的方法！\n> 没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。\n\n单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。\n\n当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。\n\n在目前公司参与的项目中，经常性的会出现以下一些情况：\n- 代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。\n- 修改部分代码功能时，会影响到一些无关的内容\n- 修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动\n- 系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他\n- 系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。\n\n面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。\n\n> 单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的\n\n### 单元测试应该包含哪些内容\n所以，单元测试应该是什么样的，他应该怎么去写？\n\n\n### 如何写好一个单元测试\n\n编写单元测试的原则\n\n\n### 相关话题\n\n- 如何编写易于\n\n### 参考\n\n[单元测试到底是什么？应该怎么做？](https://www.zhihu.com/question/28729261)\n[干货 | 测试扁平化之必备神器：好的单元测试](https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect)\n","slug":"what-is-unit-test","published":0,"updated":"2022-07-15T01:57:01.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbg0003owgn1f2dd5li","content":"<p>当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。</p>\n<h3 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h3><p>所以第一件事，我需要搞清楚，到底什么是单元测试？</p>\n<blockquote>\n<p>针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个<code>vue</code>组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。</p>\n</blockquote>\n<h3 id=\"为什么要写单元测试\"><a href=\"#为什么要写单元测试\" class=\"headerlink\" title=\"为什么要写单元测试\"></a>为什么要写单元测试</h3><p>有一种<a target=\"_blank\" rel=\"noopener\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">我非常赞同的隐喻</a>，单元测试是保证你写的代码是你想要的结果的最有效的方法！</p>\n<blockquote>\n<p>没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。</p>\n</blockquote>\n<p>单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。</p>\n<p>当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。</p>\n<p>在目前公司参与的项目中，经常性的会出现以下一些情况：</p>\n<ul>\n<li>代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。</li>\n<li>修改部分代码功能时，会影响到一些无关的内容</li>\n<li>修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动</li>\n<li>系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他</li>\n<li>系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。</li>\n</ul>\n<p>面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。</p>\n<blockquote>\n<p>单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的</p>\n</blockquote>\n<h3 id=\"单元测试应该包含哪些内容\"><a href=\"#单元测试应该包含哪些内容\" class=\"headerlink\" title=\"单元测试应该包含哪些内容\"></a>单元测试应该包含哪些内容</h3><p>所以，单元测试应该是什么样的，他应该怎么去写？</p>\n<h3 id=\"如何写好一个单元测试\"><a href=\"#如何写好一个单元测试\" class=\"headerlink\" title=\"如何写好一个单元测试\"></a>如何写好一个单元测试</h3><p>编写单元测试的原则</p>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><ul>\n<li>如何编写易于</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/question/28729261\">单元测试到底是什么？应该怎么做？</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">干货 | 测试扁平化之必备神器：好的单元测试</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>当我打算了解单元测试的时候，很大的一个动因是：部门把BUG量和绩效挂钩了，为了保住我的钱和我的头发，编写单元测试，就成了一个不可绕开的环节。</p>\n<h3 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h3><p>所以第一件事，我需要搞清楚，到底什么是单元测试？</p>\n<blockquote>\n<p>针对代码最小单元的测试，可以称之为单元测试。代码的最小单元可以是一个函数，一个功能组件，这取决于你编写代码的方式和代码组织的结构。如果你是函数式编程，单元可以是一个函数，如果是面想对象编程，他可以是一个类，也可以是类中的方法，如果编写一个<code>vue</code>组件，单元就可以是组件，也可以是组件中部分功能。这取决你编写单元测试的意图。</p>\n</blockquote>\n<h3 id=\"为什么要写单元测试\"><a href=\"#为什么要写单元测试\" class=\"headerlink\" title=\"为什么要写单元测试\"></a>为什么要写单元测试</h3><p>有一种<a target=\"_blank\" rel=\"noopener\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">我非常赞同的隐喻</a>，单元测试是保证你写的代码是你想要的结果的最有效的方法！</p>\n<blockquote>\n<p>没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。</p>\n</blockquote>\n<p>单元测试的威力更多不是体现在新代码的编写上，而是对已有代码的更改。当你对一个已有功能进行重构时，你很难保证，新代码覆盖了源代码的方法面面。但是单元测试的存在，在你重构代码后并通过所有的case，你可以自豪的说，新的修改满足了原有逻辑的所有关键点。</p>\n<p>当一个系统的功能复杂到超过了你的记忆能力和逻辑能力，你必须依靠工具来保证，你的任何修改都不会产生意想不到的副作用。</p>\n<p>在目前公司参与的项目中，经常性的会出现以下一些情况：</p>\n<ul>\n<li>代码逻辑修改遗漏，一部分逻辑修改了，忘掉了另外一些。</li>\n<li>修改部分代码功能时，会影响到一些无关的内容</li>\n<li>修改组件的功能，有一些逻辑需要修改，但是这个逻辑在系统很多地方应用，不敢乱动</li>\n<li>系统中很久之前新增了一部分逻辑，这部分逻辑已经很久远了，不记得为什么要添加他</li>\n<li>系统提测后，增量修改的代码和功能，都需要全局测试，开发人员没有办法保证修改的内容对已有功能没有影响。</li>\n</ul>\n<p>面对这些问题，我们尝试过添加详尽的注释，提交代码时编写完善的提交日志。即便如此，日积月累之后，不断累计的修改内容，还是让修改公共功能代码时，开发人员无法确保代码的影响范围以及没有未知的副作用。</p>\n<blockquote>\n<p>单元测试是所有测试中最底层的一类测试，是第一个环节，也是最重要的一个环节，是唯一一次有保证能够代码覆盖率达到100%的测试，是整个软件测试过程的基础和前提，单元测试防止了开发的后期因bug过多而失控，单元测试的性价比是最好的</p>\n</blockquote>\n<h3 id=\"单元测试应该包含哪些内容\"><a href=\"#单元测试应该包含哪些内容\" class=\"headerlink\" title=\"单元测试应该包含哪些内容\"></a>单元测试应该包含哪些内容</h3><p>所以，单元测试应该是什么样的，他应该怎么去写？</p>\n<h3 id=\"如何写好一个单元测试\"><a href=\"#如何写好一个单元测试\" class=\"headerlink\" title=\"如何写好一个单元测试\"></a>如何写好一个单元测试</h3><p>编写单元测试的原则</p>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><ul>\n<li>如何编写易于</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.zhihu.com/question/28729261\">单元测试到底是什么？应该怎么做？</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect\">干货 | 测试扁平化之必备神器：好的单元测试</a></p>\n"},{"title":"hexo搭建个人博客并部署到个人服务器","date":"2019-11-04T06:28:02.000Z","toc":true,"sidebar":true,"_content":"\n当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.\n\n### 起手式\n\n安装并初始化完成hexo站点\n\n```shell\n# 安装\n> npm install hexo -g\n# 初始化\n> hexo init <folder>\n# 本地预览\n> hexo s\n```\n\n## 自动生成分类categories和标签tag\n\n自动维护categories分类页面, 安装 [hexo-auto-category](https://github.com/xu-song/hexo-auto-category) 和 [hexo-generator-tag](https://github.com/hexojs/hexo-generator-tag)\n\n```\n> npm i -S hexo-auto-category\n> npm i -S hexo-generator-tag\n```\n\n在站点根目录下的 `_config.yml` 添加：\n\n```\n# 自动生成分类\ncategory_generator:\n  per_page: 20\n  order_by: -date\n\n# 自动生成Tag\ntag_generator:\n  per_page: 20\n  order_by: -date\n```\n\n> 自动生成的分类和标签, 会在执行 `hexo g` 命令时自动生成\n\n## sitemap站点地图\n\n切换到站点根目录, 安装谷歌站点地图[hexo-generator-category](https://github.com/hexojs/hexo-generator-category) 和 百度站点地图 [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n\n## RSS订阅\n\n切换到站点根目录, 安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n\n```\n> npm i -S hexo-generator-feed\n```\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## feed   \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n```\n\n## hexo 博客图片问题\nhexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。\n通常我们使用markdown书写博客时, 采用的方式是使用 `![]()` 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。\n\n这里可以利用插件 `hexo-asset-image` 来解决这个问题。\n\n1. 安装:\n\n```\n> npm i -S hexo-asset-image\n```\n\n2. 配置:\n\n只需要在`_config.yml` 中配置 `post_asset_folder` 为 `true` 即可。\n\n3. 问题:\n\n> 但是从插件存在问题[域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg](https://github.com/xcodebuild/hexo-asset-image/issues/47)， 如果你也存在一样的问题，可以手动修改代码解决这个问题。\n\n在`node_modules` 目录下, 找到 `hexo-asset-image` 文件夹, 修改文件 `index.js` 的 `L24`\n\n```\n# 从\nvar endPos = link.lastIndexOf('.');\n# 修改为\nvar endPos = link.length-1; \n```\n\n> 参见 [github issues](https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505)\n> 作者更新了项目代码, 但是没有更新 npm 包。\n\n## 参考目录\n- [hexo博客图片问题](https://www.jianshu.com/p/950f8f13a36c)","source":"_posts/hello-hexo.md","raw":"---\ntitle: hexo搭建个人博客并部署到个人服务器\ndate: 2019-11-04 14:28:02\ntoc: true # 是否启用内容索引\nsidebar: true # 是否启用sidebar侧边栏，none：不启用\ntags: \n- hexo\ncategories:\n- hexo\n---\n\n当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.\n\n### 起手式\n\n安装并初始化完成hexo站点\n\n```shell\n# 安装\n> npm install hexo -g\n# 初始化\n> hexo init <folder>\n# 本地预览\n> hexo s\n```\n\n## 自动生成分类categories和标签tag\n\n自动维护categories分类页面, 安装 [hexo-auto-category](https://github.com/xu-song/hexo-auto-category) 和 [hexo-generator-tag](https://github.com/hexojs/hexo-generator-tag)\n\n```\n> npm i -S hexo-auto-category\n> npm i -S hexo-generator-tag\n```\n\n在站点根目录下的 `_config.yml` 添加：\n\n```\n# 自动生成分类\ncategory_generator:\n  per_page: 20\n  order_by: -date\n\n# 自动生成Tag\ntag_generator:\n  per_page: 20\n  order_by: -date\n```\n\n> 自动生成的分类和标签, 会在执行 `hexo g` 命令时自动生成\n\n## sitemap站点地图\n\n切换到站点根目录, 安装谷歌站点地图[hexo-generator-category](https://github.com/hexojs/hexo-generator-category) 和 百度站点地图 [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n\n## RSS订阅\n\n切换到站点根目录, 安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n\n```\n> npm i -S hexo-generator-feed\n```\n\n站点根目录下的 `_config.yml` 配置文件添加\n\n```\n## feed   \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n```\n\n## hexo 博客图片问题\nhexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。\n通常我们使用markdown书写博客时, 采用的方式是使用 `![]()` 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。\n\n这里可以利用插件 `hexo-asset-image` 来解决这个问题。\n\n1. 安装:\n\n```\n> npm i -S hexo-asset-image\n```\n\n2. 配置:\n\n只需要在`_config.yml` 中配置 `post_asset_folder` 为 `true` 即可。\n\n3. 问题:\n\n> 但是从插件存在问题[域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg](https://github.com/xcodebuild/hexo-asset-image/issues/47)， 如果你也存在一样的问题，可以手动修改代码解决这个问题。\n\n在`node_modules` 目录下, 找到 `hexo-asset-image` 文件夹, 修改文件 `index.js` 的 `L24`\n\n```\n# 从\nvar endPos = link.lastIndexOf('.');\n# 修改为\nvar endPos = link.length-1; \n```\n\n> 参见 [github issues](https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505)\n> 作者更新了项目代码, 但是没有更新 npm 包。\n\n## 参考目录\n- [hexo博客图片问题](https://www.jianshu.com/p/950f8f13a36c)","slug":"hello-hexo","published":1,"updated":"2021-09-01T06:29:03.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbj0007owgn2ccge1qy","content":"<p>当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.</p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>安装并初始化完成hexo站点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install hexo -g</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo init &lt;folder&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地预览</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动生成分类categories和标签tag\"><a href=\"#自动生成分类categories和标签tag\" class=\"headerlink\" title=\"自动生成分类categories和标签tag\"></a>自动生成分类categories和标签tag</h2><p>自动维护categories分类页面, 安装 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xu-song/hexo-auto-category\">hexo-auto-category</a> 和 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-tag\">hexo-generator-tag</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-auto-category</span><br><span class=\"line\">&gt; npm i -S hexo-generator-tag</span><br></pre></td></tr></table></figure>\n\n<p>在站点根目录下的 <code>_config.yml</code> 添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成分类</span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动生成Tag</span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动生成的分类和标签, 会在执行 <code>hexo g</code> 命令时自动生成</p>\n</blockquote>\n<h2 id=\"sitemap站点地图\"><a href=\"#sitemap站点地图\" class=\"headerlink\" title=\"sitemap站点地图\"></a>sitemap站点地图</h2><p>切换到站点根目录, 安装谷歌站点地图<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-category\">hexo-generator-category</a> 和 百度站点地图 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\">hexo-generator-baidu-sitemap</a></p>\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>切换到站点根目录, 安装 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## feed   </span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-博客图片问题\"><a href=\"#hexo-博客图片问题\" class=\"headerlink\" title=\"hexo 博客图片问题\"></a>hexo 博客图片问题</h2><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。<br>通常我们使用markdown书写博客时, 采用的方式是使用 <code>![]()</code> 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。</p>\n<p>这里可以利用插件 <code>hexo-asset-image</code> 来解决这个问题。</p>\n<ol>\n<li>安装:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置:</li>\n</ol>\n<p>只需要在<code>_config.yml</code> 中配置 <code>post_asset_folder</code> 为 <code>true</code> 即可。</p>\n<ol start=\"3\">\n<li>问题:</li>\n</ol>\n<blockquote>\n<p>但是从插件存在问题<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47\">域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg</a>， 如果你也存在一样的问题，可以手动修改代码解决这个问题。</p>\n</blockquote>\n<p>在<code>node_modules</code> 目录下, 找到 <code>hexo-asset-image</code> 文件夹, 修改文件 <code>index.js</code> 的 <code>L24</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从</span><br><span class=\"line\">var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class=\"line\"># 修改为</span><br><span class=\"line\">var endPos = link.length-1; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参见 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505\">github issues</a><br>作者更新了项目代码, 但是没有更新 npm 包。</p>\n</blockquote>\n<h2 id=\"参考目录\"><a href=\"#参考目录\" class=\"headerlink\" title=\"参考目录\"></a>参考目录</h2><ul>\n<li><a target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/950f8f13a36c\">hexo博客图片问题</a></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>当你打开这篇文章时, 默认你已经安装好了hexo, 并已经开始摸索着捣鼓自己的个人站点了.</p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>安装并初始化完成hexo站点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install hexo -g</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo init &lt;folder&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地预览</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动生成分类categories和标签tag\"><a href=\"#自动生成分类categories和标签tag\" class=\"headerlink\" title=\"自动生成分类categories和标签tag\"></a>自动生成分类categories和标签tag</h2><p>自动维护categories分类页面, 安装 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xu-song/hexo-auto-category\">hexo-auto-category</a> 和 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-tag\">hexo-generator-tag</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-auto-category</span><br><span class=\"line\">&gt; npm i -S hexo-generator-tag</span><br></pre></td></tr></table></figure>\n\n<p>在站点根目录下的 <code>_config.yml</code> 添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成分类</span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动生成Tag</span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 20</span><br><span class=\"line\">  order_by: -date</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动生成的分类和标签, 会在执行 <code>hexo g</code> 命令时自动生成</p>\n</blockquote>\n<h2 id=\"sitemap站点地图\"><a href=\"#sitemap站点地图\" class=\"headerlink\" title=\"sitemap站点地图\"></a>sitemap站点地图</h2><p>切换到站点根目录, 安装谷歌站点地图<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-category\">hexo-generator-category</a> 和 百度站点地图 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\">hexo-generator-baidu-sitemap</a></p>\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>切换到站点根目录, 安装 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>站点根目录下的 <code>_config.yml</code> 配置文件添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## feed   </span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-博客图片问题\"><a href=\"#hexo-博客图片问题\" class=\"headerlink\" title=\"hexo 博客图片问题\"></a>hexo 博客图片问题</h2><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。<br>通常我们使用markdown书写博客时, 采用的方式是使用 <code>![]()</code> 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。</p>\n<p>这里可以利用插件 <code>hexo-asset-image</code> 来解决这个问题。</p>\n<ol>\n<li>安装:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -S hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置:</li>\n</ol>\n<p>只需要在<code>_config.yml</code> 中配置 <code>post_asset_folder</code> 为 <code>true</code> 即可。</p>\n<ol start=\"3\">\n<li>问题:</li>\n</ol>\n<blockquote>\n<p>但是从插件存在问题<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47\">域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg</a>， 如果你也存在一样的问题，可以手动修改代码解决这个问题。</p>\n</blockquote>\n<p>在<code>node_modules</code> 目录下, 找到 <code>hexo-asset-image</code> 文件夹, 修改文件 <code>index.js</code> 的 <code>L24</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从</span><br><span class=\"line\">var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class=\"line\"># 修改为</span><br><span class=\"line\">var endPos = link.length-1; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参见 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/xcodebuild/hexo-asset-image/issues/47#issuecomment-512759505\">github issues</a><br>作者更新了项目代码, 但是没有更新 npm 包。</p>\n</blockquote>\n<h2 id=\"参考目录\"><a href=\"#参考目录\" class=\"headerlink\" title=\"参考目录\"></a>参考目录</h2><ul>\n<li><a target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/950f8f13a36c\">hexo博客图片问题</a></li>\n</ul>\n"},{"title":"element-ui源码学习/1/初步认识框架","toc":true,"sidebar":true,"date":"2020-01-16T02:16:46.000Z","_content":"\n\n\n相关站点: <https://blog.csdn.net/m0_37972557/article/details/81072773>\n\n","source":"_posts/element-code-learning.md","raw":"---\ntitle: element-ui源码学习/1/初步认识框架\ntoc: true\nsidebar: true\ndate: 2020-01-16 10:16:46\ntags: \n- element\ncategories:\n- element\n---\n\n\n\n相关站点: <https://blog.csdn.net/m0_37972557/article/details/81072773>\n\n","slug":"element-code-learning","published":1,"updated":"2021-09-01T06:29:03.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbk0009owgn0ncjcsus","content":"<p>相关站点: <a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/m0_37972557/article/details/81072773\">https://blog.csdn.net/m0_37972557/article/details/81072773</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>相关站点: <a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/m0_37972557/article/details/81072773\">https://blog.csdn.net/m0_37972557/article/details/81072773</a></p>\n"},{"title":"Hexo主题pure使用指南","date":"2019-11-05T06:34:15.000Z","toc":true,"sidebar":true,"_content":"\n`hexo` 主题 `pure` 项目相关信息:\n\n> 预览地址: [https://blog.cofess.com](https://blog.cofess.com)\n> 项目地址: [https://github.com/cofess/hexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n> 中文使用文档: [https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 使用前请操作\n使用该主题前, 请先复制 `theme/pure/_source/` 目录下的所有内容到 `blog path/source/` 目录下\n原因在于该目录下有建好的菜单 `categories`(分类)、`tags`(标签)、`repository`(项目)、`books`(书单)、`links`(友链)、`about`(关于)页面\n\n当你使用自动生成分类、标签，展示github项目时\n\n\n### 文章目录索引\n在文章详情页, 展示一个文章目录\n\n1. 主题配置文件中开启配置:\n```\nconfig\n  toc: true # 是否开启文章章节目录导航\n```\n\n2. 在文章顶部将该文章开启索引, 如:\n\n```\n---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntags: \n- hexo主题\n\ncategories:\n- hexo\n\ntoc: true # 是否启用内容索引\nsidebar: none # 是否启用sidebar侧边栏，none：不启用\n---\n```\n\n\n### 侧边栏\n\n主题配置项中, 侧边栏可以如下配置:\n\n```\n# 侧边栏\nsidebar: right\n# 侧边栏启用哪些模块\nwidgets:\n  - board # 公告\n  - category # 分类\n  - tag # 标签\n  - tagcloud # 标签云\n  - archive # 归档\n  - recent_posts # 最近文章\n\n# 归档列表的展示方式\narchive_type: 'monthly' # 归档方式:  yearly | monthly\nshow_count: true # 显示每个归档的文章总数\n```\n\n### 图集\n在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.\n主题的图册公告是使用[fancybox](https://github.com/fancyapps/fancybox)实现, 可以参照github\n\n```\n# Fancybox\n# 图集功能\nfancybox: true\n```\n\n### 展示github项目\n\n在左侧菜单`项目`中, 点击展示自己的github项目\n\n1. 在主题配置文件中 `_config.yml` 修改, 请配置自己github用户名\n\n```\ngithub: \n  username: caoruiy  # github用户名\n```\n\n2. 新建`repository`页面:\n\n```\n> hexo new repository\n```\n> 你也可以直接复制 `theme/pure/_source/` 目录下 `repository文件夹` 到 `博客根目录/source/` 目录下\n\n3. 将文件内容修改为:\n\n```\n---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n```\n\n> 关键内容为 `layout: repository`, 包含该属性才可以展示github项目\n\n### 评论功能\n主题集成了[disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[来必力](https://livere.com/)、[gitment](https://github.com/imsun/gitment)、[gitalk](https://github.com/gitalk/gitalk)评论系统，选择其中一种即可\n\n你可以在主题配置文件中修改评论工具\n```\ncomment:\n  type: valine  # 启用哪种评论系统\n```\n\n#### Valine\n\n一个无后端的评论框工具, 其依赖于 [Leancloud](https://leancloud.cn) 开发, 所以使用前需要先注册 [Leancloud](https://leancloud.cn) 账号\n\n\n如何开始? 你可以从 [Valine-快速开始](https://valine.js.org/quickstart.html) 教程开始, 教程包含了一步一步的指引教程.\n\n##### Valine配置项\n\n主题valine评论框提供了以下配置项\n\n```\nvaline: # Valine官方地址: https://valine.js.org\n  appid:  # 你的 leancloud 应用 appid\n  appkey:  # 你的 leancloud 应用 appkey\n  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki\n  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能\n  placeholder: 说点什么... # 输入框默认内容\n  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar\n  meta: nick,mail,link # 自定义评论信息\n  pageSize: 10 # 评论列表分页\n  lang: zh-cn, # 多语言支持 zh-cn | en\n  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html\n  highlight: true # 代码高亮\n  recordIP: true # 记录评论者的IP\n```\n\n> 关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒\n> 关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据\n\n\n\n### 搜索功能\n主题提供内置的`搜索功能`和`百度搜索`, `百度搜索`就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.\n\n在主题配置文件 `_config.yml` 中配置:\n```\n# Search\nsearch:\n  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`\n  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能\n```\n\n#### 内置搜索\n\n使用搜索功能前需要先安装:\n\n```shell\nnpm i -S hexo-generator-json-content \n```\n\n项目地址: [https://github.com/alexbruno/hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)\n\n在你运行 `hexo g` 或者 `hexo s` 时生效，在 `hexo g` 生成站点时, 会在根目录下生成 `content.json` 该文件内容即为搜索内容。\n\n你可以对搜索内容进行自定义的配置， 只要在 `_config.yml` 中配置 [`jsonContent`](https://github.com/alexbruno/hexo-generator-json-content#defaults)即可:\n\n```\n# 示例: 隐藏分类和标签的搜索\njsonContent:\n  dateFormat: DD/MM/YYYY\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: false\n    author: false\n```\n\n\n\n### 文章阅读数量统计\n主题提供 [不蒜子](http://busuanzi.ibruce.info/) 和 基于 leancloud 的统计\n\n但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: \n\n评论框使用`valine`评论框(主题已经内置), 同时开启 `visitor: true` 配置项项即可\n\n### 字数统计&阅读时长\n\n主题内置了该功能, 使用前需要先安装插件:\n\n```\nnpm i -S hexo-wordcount\n```\n\n主题配置文件中, 开启设置即可:\n\n```\n# wordcount\npostCount:\n  enable: true\n  wordcount: true  # 文章字数统计\n  min2read: true  # 阅读时长预计\n```\n\n### 友情链接\n复制 `theme/pure/_source/` 目录下 `links文件夹` 到 `blog path/source/` 目录下\n在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。\n\n然后在文件内创建一个名为 `links.yml` 的文件,在其中添加相关数据即可。\n\n单个友情链接的格式为：\n```\nName:\n    link: http://example.com\n    avatar: http://example.com/avatar.png\n    desc: \"这是一个描述\"\n```\n\n添加多个友情链接，我们只需要根据上面的格式重复填写即可。\n\n- 将 Name 改为友情链接的名字，例如 Cofess。\n\n- http://example.com 为友情链接的地址。\n\n- http://example.com/avatar.png 为友情链接的头像。\n\n- 这是一个描述 为友情链接描述。","source":"_posts/hexo-theme-pure.md","raw":"---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntoc: true # 是否启用内容索引\nsidebar: true # 是否启用sidebar侧边栏，none：不启用\ntags: \n- hexo主题\n\ncategories:\n- hexo\n---\n\n`hexo` 主题 `pure` 项目相关信息:\n\n> 预览地址: [https://blog.cofess.com](https://blog.cofess.com)\n> 项目地址: [https://github.com/cofess/hexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n> 中文使用文档: [https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 使用前请操作\n使用该主题前, 请先复制 `theme/pure/_source/` 目录下的所有内容到 `blog path/source/` 目录下\n原因在于该目录下有建好的菜单 `categories`(分类)、`tags`(标签)、`repository`(项目)、`books`(书单)、`links`(友链)、`about`(关于)页面\n\n当你使用自动生成分类、标签，展示github项目时\n\n\n### 文章目录索引\n在文章详情页, 展示一个文章目录\n\n1. 主题配置文件中开启配置:\n```\nconfig\n  toc: true # 是否开启文章章节目录导航\n```\n\n2. 在文章顶部将该文章开启索引, 如:\n\n```\n---\ntitle: Hexo主题pure使用指南\ndate: 2019-11-05 14:34:15\ntags: \n- hexo主题\n\ncategories:\n- hexo\n\ntoc: true # 是否启用内容索引\nsidebar: none # 是否启用sidebar侧边栏，none：不启用\n---\n```\n\n\n### 侧边栏\n\n主题配置项中, 侧边栏可以如下配置:\n\n```\n# 侧边栏\nsidebar: right\n# 侧边栏启用哪些模块\nwidgets:\n  - board # 公告\n  - category # 分类\n  - tag # 标签\n  - tagcloud # 标签云\n  - archive # 归档\n  - recent_posts # 最近文章\n\n# 归档列表的展示方式\narchive_type: 'monthly' # 归档方式:  yearly | monthly\nshow_count: true # 显示每个归档的文章总数\n```\n\n### 图集\n在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.\n主题的图册公告是使用[fancybox](https://github.com/fancyapps/fancybox)实现, 可以参照github\n\n```\n# Fancybox\n# 图集功能\nfancybox: true\n```\n\n### 展示github项目\n\n在左侧菜单`项目`中, 点击展示自己的github项目\n\n1. 在主题配置文件中 `_config.yml` 修改, 请配置自己github用户名\n\n```\ngithub: \n  username: caoruiy  # github用户名\n```\n\n2. 新建`repository`页面:\n\n```\n> hexo new repository\n```\n> 你也可以直接复制 `theme/pure/_source/` 目录下 `repository文件夹` 到 `博客根目录/source/` 目录下\n\n3. 将文件内容修改为:\n\n```\n---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n```\n\n> 关键内容为 `layout: repository`, 包含该属性才可以展示github项目\n\n### 评论功能\n主题集成了[disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[来必力](https://livere.com/)、[gitment](https://github.com/imsun/gitment)、[gitalk](https://github.com/gitalk/gitalk)评论系统，选择其中一种即可\n\n你可以在主题配置文件中修改评论工具\n```\ncomment:\n  type: valine  # 启用哪种评论系统\n```\n\n#### Valine\n\n一个无后端的评论框工具, 其依赖于 [Leancloud](https://leancloud.cn) 开发, 所以使用前需要先注册 [Leancloud](https://leancloud.cn) 账号\n\n\n如何开始? 你可以从 [Valine-快速开始](https://valine.js.org/quickstart.html) 教程开始, 教程包含了一步一步的指引教程.\n\n##### Valine配置项\n\n主题valine评论框提供了以下配置项\n\n```\nvaline: # Valine官方地址: https://valine.js.org\n  appid:  # 你的 leancloud 应用 appid\n  appkey:  # 你的 leancloud 应用 appkey\n  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki\n  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能\n  placeholder: 说点什么... # 输入框默认内容\n  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar\n  meta: nick,mail,link # 自定义评论信息\n  pageSize: 10 # 评论列表分页\n  lang: zh-cn, # 多语言支持 zh-cn | en\n  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html\n  highlight: true # 代码高亮\n  recordIP: true # 记录评论者的IP\n```\n\n> 关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒\n> 关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据\n\n\n\n### 搜索功能\n主题提供内置的`搜索功能`和`百度搜索`, `百度搜索`就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.\n\n在主题配置文件 `_config.yml` 中配置:\n```\n# Search\nsearch:\n  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`\n  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能\n```\n\n#### 内置搜索\n\n使用搜索功能前需要先安装:\n\n```shell\nnpm i -S hexo-generator-json-content \n```\n\n项目地址: [https://github.com/alexbruno/hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)\n\n在你运行 `hexo g` 或者 `hexo s` 时生效，在 `hexo g` 生成站点时, 会在根目录下生成 `content.json` 该文件内容即为搜索内容。\n\n你可以对搜索内容进行自定义的配置， 只要在 `_config.yml` 中配置 [`jsonContent`](https://github.com/alexbruno/hexo-generator-json-content#defaults)即可:\n\n```\n# 示例: 隐藏分类和标签的搜索\njsonContent:\n  dateFormat: DD/MM/YYYY\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: false\n    author: false\n```\n\n\n\n### 文章阅读数量统计\n主题提供 [不蒜子](http://busuanzi.ibruce.info/) 和 基于 leancloud 的统计\n\n但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: \n\n评论框使用`valine`评论框(主题已经内置), 同时开启 `visitor: true` 配置项项即可\n\n### 字数统计&阅读时长\n\n主题内置了该功能, 使用前需要先安装插件:\n\n```\nnpm i -S hexo-wordcount\n```\n\n主题配置文件中, 开启设置即可:\n\n```\n# wordcount\npostCount:\n  enable: true\n  wordcount: true  # 文章字数统计\n  min2read: true  # 阅读时长预计\n```\n\n### 友情链接\n复制 `theme/pure/_source/` 目录下 `links文件夹` 到 `blog path/source/` 目录下\n在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。\n\n然后在文件内创建一个名为 `links.yml` 的文件,在其中添加相关数据即可。\n\n单个友情链接的格式为：\n```\nName:\n    link: http://example.com\n    avatar: http://example.com/avatar.png\n    desc: \"这是一个描述\"\n```\n\n添加多个友情链接，我们只需要根据上面的格式重复填写即可。\n\n- 将 Name 改为友情链接的名字，例如 Cofess。\n\n- http://example.com 为友情链接的地址。\n\n- http://example.com/avatar.png 为友情链接的头像。\n\n- 这是一个描述 为友情链接描述。","slug":"hexo-theme-pure","published":1,"updated":"2021-09-01T06:29:03.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbl000bowgn5khy9d9p","content":"<p><code>hexo</code> 主题 <code>pure</code> 项目相关信息:</p>\n<blockquote>\n<p>预览地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://blog.cofess.com\">https://blog.cofess.com</a><br>项目地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/cofess/hexo-theme-pure\">https://github.com/cofess/hexo-theme-pure</a><br>中文使用文档: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p>\n</blockquote>\n<h3 id=\"使用前请操作\"><a href=\"#使用前请操作\" class=\"headerlink\" title=\"使用前请操作\"></a>使用前请操作</h3><p>使用该主题前, 请先复制 <code>theme/pure/_source/</code> 目录下的所有内容到 <code>blog path/source/</code> 目录下<br>原因在于该目录下有建好的菜单 <code>categories</code>(分类)、<code>tags</code>(标签)、<code>repository</code>(项目)、<code>books</code>(书单)、<code>links</code>(友链)、<code>about</code>(关于)页面</p>\n<p>当你使用自动生成分类、标签，展示github项目时</p>\n<h3 id=\"文章目录索引\"><a href=\"#文章目录索引\" class=\"headerlink\" title=\"文章目录索引\"></a>文章目录索引</h3><p>在文章详情页, 展示一个文章目录</p>\n<ol>\n<li><p>主题配置文件中开启配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config</span><br><span class=\"line\">  toc: true # 是否开启文章章节目录导航</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文章顶部将该文章开启索引, 如:</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo主题pure使用指南</span><br><span class=\"line\">date: 2019-11-05 14:34:15</span><br><span class=\"line\">tags: </span><br><span class=\"line\">- hexo主题</span><br><span class=\"line\"></span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\"></span><br><span class=\"line\">toc: true # 是否启用内容索引</span><br><span class=\"line\">sidebar: none # 是否启用sidebar侧边栏，none：不启用</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><p>主题配置项中, 侧边栏可以如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏</span><br><span class=\"line\">sidebar: right</span><br><span class=\"line\"># 侧边栏启用哪些模块</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">  - board # 公告</span><br><span class=\"line\">  - category # 分类</span><br><span class=\"line\">  - tag # 标签</span><br><span class=\"line\">  - tagcloud # 标签云</span><br><span class=\"line\">  - archive # 归档</span><br><span class=\"line\">  - recent_posts # 最近文章</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档列表的展示方式</span><br><span class=\"line\">archive_type: &#x27;monthly&#x27; # 归档方式:  yearly | monthly</span><br><span class=\"line\">show_count: true # 显示每个归档的文章总数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h3><p>在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.<br>主题的图册公告是使用<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/fancyapps/fancybox\">fancybox</a>实现, 可以参照github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fancybox</span><br><span class=\"line\"># 图集功能</span><br><span class=\"line\">fancybox: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展示github项目\"><a href=\"#展示github项目\" class=\"headerlink\" title=\"展示github项目\"></a>展示github项目</h3><p>在左侧菜单<code>项目</code>中, 点击展示自己的github项目</p>\n<ol>\n<li>在主题配置文件中 <code>_config.yml</code> 修改, 请配置自己github用户名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github: </span><br><span class=\"line\">  username: caoruiy  # github用户名</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>repository</code>页面:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo new repository</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你也可以直接复制 <code>theme/pure/_source/</code> 目录下 <code>repository文件夹</code> 到 <code>博客根目录/source/</code> 目录下</p>\n</blockquote>\n<ol start=\"3\">\n<li>将文件内容修改为:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Repositories</span><br><span class=\"line\">layout: repository</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">sidebar: none</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关键内容为 <code>layout: repository</code>, 包含该属性才可以展示github项目</p>\n</blockquote>\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>主题集成了<a target=\"_blank\" rel=\"noopener\" href=\"https://disqus.com/\">disqus</a>、<a target=\"_blank\" rel=\"noopener\" href=\"http://www.uyan.cc/\">友言</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://livere.com/\">来必力</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/imsun/gitment\">gitment</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/gitalk/gitalk\">gitalk</a>评论系统，选择其中一种即可</p>\n<p>你可以在主题配置文件中修改评论工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: valine  # 启用哪种评论系统</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h4><p>一个无后端的评论框工具, 其依赖于 <a target=\"_blank\" rel=\"noopener\" href=\"https://leancloud.cn\">Leancloud</a> 开发, 所以使用前需要先注册 <a target=\"_blank\" rel=\"noopener\" href=\"https://leancloud.cn\">Leancloud</a> 账号</p>\n<p>如何开始? 你可以从 <a target=\"_blank\" rel=\"noopener\" href=\"https://valine.js.org/quickstart.html\">Valine-快速开始</a> 教程开始, 教程包含了一步一步的指引教程.</p>\n<h5 id=\"Valine配置项\"><a href=\"#Valine配置项\" class=\"headerlink\" title=\"Valine配置项\"></a>Valine配置项</h5><p>主题valine评论框提供了以下配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: # Valine官方地址: https://valine.js.org</span><br><span class=\"line\">  appid:  # 你的 leancloud 应用 appid</span><br><span class=\"line\">  appkey:  # 你的 leancloud 应用 appkey</span><br><span class=\"line\">  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki</span><br><span class=\"line\">  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能</span><br><span class=\"line\">  placeholder: 说点什么... # 输入框默认内容</span><br><span class=\"line\">  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar</span><br><span class=\"line\">  meta: nick,mail,link # 自定义评论信息</span><br><span class=\"line\">  pageSize: 10 # 评论列表分页</span><br><span class=\"line\">  lang: zh-cn, # 多语言支持 zh-cn | en</span><br><span class=\"line\">  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html</span><br><span class=\"line\">  highlight: true # 代码高亮</span><br><span class=\"line\">  recordIP: true # 记录评论者的IP</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒<br>关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据</p>\n</blockquote>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>主题提供内置的<code>搜索功能</code>和<code>百度搜索</code>, <code>百度搜索</code>就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.</p>\n<p>在主题配置文件 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Search</span><br><span class=\"line\">search:</span><br><span class=\"line\">  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`</span><br><span class=\"line\">  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置搜索\"><a href=\"#内置搜索\" class=\"headerlink\" title=\"内置搜索\"></a>内置搜索</h4><p>使用搜索功能前需要先安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-generator-json-content </span><br></pre></td></tr></table></figure>\n\n<p>项目地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alexbruno/hexo-generator-json-content\">https://github.com/alexbruno/hexo-generator-json-content</a></p>\n<p>在你运行 <code>hexo g</code> 或者 <code>hexo s</code> 时生效，在 <code>hexo g</code> 生成站点时, 会在根目录下生成 <code>content.json</code> 该文件内容即为搜索内容。</p>\n<p>你可以对搜索内容进行自定义的配置， 只要在 <code>_config.yml</code> 中配置 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alexbruno/hexo-generator-json-content#defaults\"><code>jsonContent</code></a>即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 示例: 隐藏分类和标签的搜索</span><br><span class=\"line\">jsonContent:</span><br><span class=\"line\">  dateFormat: DD/MM/YYYY</span><br><span class=\"line\">  posts:</span><br><span class=\"line\">    title: true</span><br><span class=\"line\">    date: true</span><br><span class=\"line\">    path: true</span><br><span class=\"line\">    text: true</span><br><span class=\"line\">    raw: false</span><br><span class=\"line\">    content: false</span><br><span class=\"line\">    slug: false</span><br><span class=\"line\">    updated: false</span><br><span class=\"line\">    comments: false</span><br><span class=\"line\">    link: false</span><br><span class=\"line\">    permalink: false</span><br><span class=\"line\">    excerpt: false</span><br><span class=\"line\">    categories: false</span><br><span class=\"line\">    tags: false</span><br><span class=\"line\">    author: false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文章阅读数量统计\"><a href=\"#文章阅读数量统计\" class=\"headerlink\" title=\"文章阅读数量统计\"></a>文章阅读数量统计</h3><p>主题提供 <a target=\"_blank\" rel=\"noopener\" href=\"http://busuanzi.ibruce.info/\">不蒜子</a> 和 基于 leancloud 的统计</p>\n<p>但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: </p>\n<p>评论框使用<code>valine</code>评论框(主题已经内置), 同时开启 <code>visitor: true</code> 配置项项即可</p>\n<h3 id=\"字数统计-amp-阅读时长\"><a href=\"#字数统计-amp-阅读时长\" class=\"headerlink\" title=\"字数统计&amp;阅读时长\"></a>字数统计&amp;阅读时长</h3><p>主题内置了该功能, 使用前需要先安装插件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>主题配置文件中, 开启设置即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount</span><br><span class=\"line\">postCount:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  wordcount: true  # 文章字数统计</span><br><span class=\"line\">  min2read: true  # 阅读时长预计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>复制 <code>theme/pure/_source/</code> 目录下 <code>links文件夹</code> 到 <code>blog path/source/</code> 目录下<br>在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。</p>\n<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件,在其中添加相关数据即可。</p>\n<p>单个友情链接的格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:</span><br><span class=\"line\">    link: http://example.com</span><br><span class=\"line\">    avatar: http://example.com/avatar.png</span><br><span class=\"line\">    desc: &quot;这是一个描述&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p>\n<ul>\n<li><p>将 Name 改为友情链接的名字，例如 Cofess。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"http://example.com\">http://example.com</a> 为友情链接的地址。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a> 为友情链接的头像。</p>\n</li>\n<li><p>这是一个描述 为友情链接描述。</p>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><code>hexo</code> 主题 <code>pure</code> 项目相关信息:</p>\n<blockquote>\n<p>预览地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://blog.cofess.com\">https://blog.cofess.com</a><br>项目地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/cofess/hexo-theme-pure\">https://github.com/cofess/hexo-theme-pure</a><br>中文使用文档: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p>\n</blockquote>\n<h3 id=\"使用前请操作\"><a href=\"#使用前请操作\" class=\"headerlink\" title=\"使用前请操作\"></a>使用前请操作</h3><p>使用该主题前, 请先复制 <code>theme/pure/_source/</code> 目录下的所有内容到 <code>blog path/source/</code> 目录下<br>原因在于该目录下有建好的菜单 <code>categories</code>(分类)、<code>tags</code>(标签)、<code>repository</code>(项目)、<code>books</code>(书单)、<code>links</code>(友链)、<code>about</code>(关于)页面</p>\n<p>当你使用自动生成分类、标签，展示github项目时</p>\n<h3 id=\"文章目录索引\"><a href=\"#文章目录索引\" class=\"headerlink\" title=\"文章目录索引\"></a>文章目录索引</h3><p>在文章详情页, 展示一个文章目录</p>\n<ol>\n<li><p>主题配置文件中开启配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config</span><br><span class=\"line\">  toc: true # 是否开启文章章节目录导航</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文章顶部将该文章开启索引, 如:</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo主题pure使用指南</span><br><span class=\"line\">date: 2019-11-05 14:34:15</span><br><span class=\"line\">tags: </span><br><span class=\"line\">- hexo主题</span><br><span class=\"line\"></span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\"></span><br><span class=\"line\">toc: true # 是否启用内容索引</span><br><span class=\"line\">sidebar: none # 是否启用sidebar侧边栏，none：不启用</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><p>主题配置项中, 侧边栏可以如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏</span><br><span class=\"line\">sidebar: right</span><br><span class=\"line\"># 侧边栏启用哪些模块</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">  - board # 公告</span><br><span class=\"line\">  - category # 分类</span><br><span class=\"line\">  - tag # 标签</span><br><span class=\"line\">  - tagcloud # 标签云</span><br><span class=\"line\">  - archive # 归档</span><br><span class=\"line\">  - recent_posts # 最近文章</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档列表的展示方式</span><br><span class=\"line\">archive_type: &#x27;monthly&#x27; # 归档方式:  yearly | monthly</span><br><span class=\"line\">show_count: true # 显示每个归档的文章总数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h3><p>在文章详情页中, 涉及的图片可以使用图集功能, 在点击一张图片时, 放大图片.<br>主题的图册公告是使用<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/fancyapps/fancybox\">fancybox</a>实现, 可以参照github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fancybox</span><br><span class=\"line\"># 图集功能</span><br><span class=\"line\">fancybox: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展示github项目\"><a href=\"#展示github项目\" class=\"headerlink\" title=\"展示github项目\"></a>展示github项目</h3><p>在左侧菜单<code>项目</code>中, 点击展示自己的github项目</p>\n<ol>\n<li>在主题配置文件中 <code>_config.yml</code> 修改, 请配置自己github用户名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github: </span><br><span class=\"line\">  username: caoruiy  # github用户名</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>repository</code>页面:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo new repository</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你也可以直接复制 <code>theme/pure/_source/</code> 目录下 <code>repository文件夹</code> 到 <code>博客根目录/source/</code> 目录下</p>\n</blockquote>\n<ol start=\"3\">\n<li>将文件内容修改为:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Repositories</span><br><span class=\"line\">layout: repository</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">sidebar: none</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关键内容为 <code>layout: repository</code>, 包含该属性才可以展示github项目</p>\n</blockquote>\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>主题集成了<a target=\"_blank\" rel=\"noopener\" href=\"https://disqus.com/\">disqus</a>、<a target=\"_blank\" rel=\"noopener\" href=\"http://www.uyan.cc/\">友言</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://livere.com/\">来必力</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/imsun/gitment\">gitment</a>、<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/gitalk/gitalk\">gitalk</a>评论系统，选择其中一种即可</p>\n<p>你可以在主题配置文件中修改评论工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: valine  # 启用哪种评论系统</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h4><p>一个无后端的评论框工具, 其依赖于 <a target=\"_blank\" rel=\"noopener\" href=\"https://leancloud.cn\">Leancloud</a> 开发, 所以使用前需要先注册 <a target=\"_blank\" rel=\"noopener\" href=\"https://leancloud.cn\">Leancloud</a> 账号</p>\n<p>如何开始? 你可以从 <a target=\"_blank\" rel=\"noopener\" href=\"https://valine.js.org/quickstart.html\">Valine-快速开始</a> 教程开始, 教程包含了一步一步的指引教程.</p>\n<h5 id=\"Valine配置项\"><a href=\"#Valine配置项\" class=\"headerlink\" title=\"Valine配置项\"></a>Valine配置项</h5><p>主题valine评论框提供了以下配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: # Valine官方地址: https://valine.js.org</span><br><span class=\"line\">  appid:  # 你的 leancloud 应用 appid</span><br><span class=\"line\">  appkey:  # 你的 leancloud 应用 appkey</span><br><span class=\"line\">  notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki</span><br><span class=\"line\">  verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能</span><br><span class=\"line\">  placeholder: 说点什么... # 输入框默认内容</span><br><span class=\"line\">  avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar</span><br><span class=\"line\">  meta: nick,mail,link # 自定义评论信息</span><br><span class=\"line\">  pageSize: 10 # 评论列表分页</span><br><span class=\"line\">  lang: zh-cn, # 多语言支持 zh-cn | en</span><br><span class=\"line\">  visitor: true # 文章阅读量统计:  https://valine.js.org/visitor.html</span><br><span class=\"line\">  highlight: true # 代码高亮</span><br><span class=\"line\">  recordIP: true # 记录评论者的IP</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于邮件提醒: 只有在回复评论时, 并且填写了邮箱的评论才会收到回复提醒<br>关于文章阅读量统计: 开启阅读量统计, 会在详情页标题下展示阅读量数据</p>\n</blockquote>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>主题提供内置的<code>搜索功能</code>和<code>百度搜索</code>, <code>百度搜索</code>就是使用百度的SEO搜索, 个人觉得不是很实用, 不建议开启.</p>\n<p>在主题配置文件 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Search</span><br><span class=\"line\">search:</span><br><span class=\"line\">  insight: true # 在使用搜索功能前, 你需要安装 `hexo-generator-json-content`</span><br><span class=\"line\">  baidu: false # 使用百度搜索前, 你必须禁用其他所有的搜索功能</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置搜索\"><a href=\"#内置搜索\" class=\"headerlink\" title=\"内置搜索\"></a>内置搜索</h4><p>使用搜索功能前需要先安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-generator-json-content </span><br></pre></td></tr></table></figure>\n\n<p>项目地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alexbruno/hexo-generator-json-content\">https://github.com/alexbruno/hexo-generator-json-content</a></p>\n<p>在你运行 <code>hexo g</code> 或者 <code>hexo s</code> 时生效，在 <code>hexo g</code> 生成站点时, 会在根目录下生成 <code>content.json</code> 该文件内容即为搜索内容。</p>\n<p>你可以对搜索内容进行自定义的配置， 只要在 <code>_config.yml</code> 中配置 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/alexbruno/hexo-generator-json-content#defaults\"><code>jsonContent</code></a>即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 示例: 隐藏分类和标签的搜索</span><br><span class=\"line\">jsonContent:</span><br><span class=\"line\">  dateFormat: DD/MM/YYYY</span><br><span class=\"line\">  posts:</span><br><span class=\"line\">    title: true</span><br><span class=\"line\">    date: true</span><br><span class=\"line\">    path: true</span><br><span class=\"line\">    text: true</span><br><span class=\"line\">    raw: false</span><br><span class=\"line\">    content: false</span><br><span class=\"line\">    slug: false</span><br><span class=\"line\">    updated: false</span><br><span class=\"line\">    comments: false</span><br><span class=\"line\">    link: false</span><br><span class=\"line\">    permalink: false</span><br><span class=\"line\">    excerpt: false</span><br><span class=\"line\">    categories: false</span><br><span class=\"line\">    tags: false</span><br><span class=\"line\">    author: false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文章阅读数量统计\"><a href=\"#文章阅读数量统计\" class=\"headerlink\" title=\"文章阅读数量统计\"></a>文章阅读数量统计</h3><p>主题提供 <a target=\"_blank\" rel=\"noopener\" href=\"http://busuanzi.ibruce.info/\">不蒜子</a> 和 基于 leancloud 的统计</p>\n<p>但是经过验证, 发现基于leancloud的统计不生效, 不知原因, 实现等效的方法就是: </p>\n<p>评论框使用<code>valine</code>评论框(主题已经内置), 同时开启 <code>visitor: true</code> 配置项项即可</p>\n<h3 id=\"字数统计-amp-阅读时长\"><a href=\"#字数统计-amp-阅读时长\" class=\"headerlink\" title=\"字数统计&amp;阅读时长\"></a>字数统计&amp;阅读时长</h3><p>主题内置了该功能, 使用前需要先安装插件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>主题配置文件中, 开启设置即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount</span><br><span class=\"line\">postCount:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  wordcount: true  # 文章字数统计</span><br><span class=\"line\">  min2read: true  # 阅读时长预计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>复制 <code>theme/pure/_source/</code> 目录下 <code>links文件夹</code> 到 <code>blog path/source/</code> 目录下<br>在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。</p>\n<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件,在其中添加相关数据即可。</p>\n<p>单个友情链接的格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:</span><br><span class=\"line\">    link: http://example.com</span><br><span class=\"line\">    avatar: http://example.com/avatar.png</span><br><span class=\"line\">    desc: &quot;这是一个描述&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p>\n<ul>\n<li><p>将 Name 改为友情链接的名字，例如 Cofess。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"http://example.com\">http://example.com</a> 为友情链接的地址。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a> 为友情链接的头像。</p>\n</li>\n<li><p>这是一个描述 为友情链接描述。</p>\n</li>\n</ul>\n"},{"title":"如果优雅的部署hexo博客到自己的服务器","toc":true,"sidebar":true,"date":"2019-11-08T00:35:55.000Z","_content":"\n### 服务器搭建\n\n### 服务器准备信息\n\n#### 购买云主机\n\n完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的\n\n#### 相关软件安装\n\n这里推荐使用 [ezhttp 工具](https://www.centos.bz/2017/02/ezhttp/) 来进行服务器环境的安装, 他的简介是这样的: \n\nezhttp是一个[Linux](https://www.centos.bz/tag/linux/)一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,[LNAMP](https://www.centos.bz/tag/lnamp/)环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<https://github.com/centos-bz/ezhttp>。\n\n#### 配置nginx服务器\n\n安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. \n\n找到`nginx`配置文件, 假定你安装在`/usr/local/nginx`\n\n```shell\n> cd /user/local/nginx/conf\n> cd vhost\n> touch myblog.conf\n```\n\n写入以下内容, 修改包含注释的位置为你的实际内容即可\n\n```\n\nserver {\n        listen 80;\n        # 网站的IP地址\n        server_name blog.plcent.com;\n        index index.html index.php index.htm;\n        # 指定的站点目录\n        root /home/website/myblog;\n\n        location / {\n            try_files $uri $uri/index.html @apache;\n        }\n\n        location @apache {\n            internal;\n            proxy_pass http://127.0.0.1:88;\n            include proxy.conf;\n        }\n\n        location ~ .*\\.(php|php5)?$ {\n             proxy_pass http://127.0.0.1:88;\n             include proxy.conf;\n        }\n\n```\n\n> 你可以为内一个站点配置一个文件\n\n重启服务器, 使得新配置生效\n\n```shell\n> /etc/init.d/nginx restart\n```\n\n\n\n#### 建立git账号\n\n你需要在服务器上建立一个`git`账号, 用来推送仓库使用(因为使用`root`账号并不是很安全)\n\n```shell\n# 添加git用户\n> useradd git\n# 为用户设置密码\n> passwd git\n# 为了安全, 只为git用户配置git shell\n> usermod -s /bin/git-shell git\n```\n\n#### 建立空仓库\n\n```shell\n# 进入自己的git仓库\n> cd /data/gitstore\n# 初始化一个空仓库\n> git init --bare myblog.git\n```\n\n#### 仓库修改权限\n\n正常情况下, 你建立仓库时是使用`root`账号创立的, `git`用户无权操作该目录, 你需要将该仓库的操作权限交给`git`\n\n```shell\n>  chown -R git:git myblog.git\n```\n\n> `-R` 一定要添加, 该属性将递归修改所有文件的权限\n\n#### hexo 配置推送仓库\n\n在hexo根目录的 `_config.yml` 中配置:\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@your_server_IP:/data/gitstore/myblog\n  branch: master\n```\n\n> 替换`your_server_IP`为你服务器实际的IP地址\n>\n> 替换`/data/gitstore/myblog`为你git仓库的实际路径\n\n#### hexo d 推送仓库到自己服务器\n\n在使用`hexo d` 命令推送编译好的博客内容到仓库时, 你需要在本地先安装\n\n```\n> npm install hexo-deployer-git --save\n```\n\n安装完成之后, 使用 `hexo d` 推送试试, 推送成功将显示:\n\n![推送成功](./how-to-deploy-hexo-to-self-server/1573175297499.png)\n\n\n查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录\n\n#### 配置ssh\n\n[设置 SSH Key 登录服务器和 Git 服务器](https://www.cnblogs.com/feiffy/p/8995003.html)\n\n\n\n\n### 让服务器git自动部署博客\n\n自动部署的原理就是利用`git`钩子`post-receive`在仓库被提交之后执行钩子中定义的命令\n\n```shell\n# 进入git仓库hooks目录\n> cd /data/gitstore/myblog.git/hooks\n# 如果没有post-receive文件则新建\n> touch post-receive\n# 写入内容\n> vi post-receive\n```\n\n```\n#!/bin/bash\n#指定我的代码检出目录\nDIR=/home/wwwroot/myblog\ngit --work-tree=${DIR} clean -fd\n#直接强制检出\ngit --work-tree=${DIR} checkout --force\n```\n\n> 修改`/home/wwwroot/myblog`为你网站实际部署的地址\n\n修改钩子文件执行权限\n\n```\n# 为钩子文件添加可执行权限\n> chmod 766 post-receive\n# 重新刷一遍仓库权限\n> cd ../../\n> chown -R git:git myblog.git\n```\n\n#### 推送博客\n\n```\n> hexo clean\n> hexo g\n> hexo d\n```\n\n\n\n\n\n### 参考文档\n\n[Linux一键配置工具ezhttp介绍](https://www.centos.bz/2017/02/ezhttp/)\n\n[ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境](https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/)\n\n[带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器](<https://blog.csdn.net/qq_35561857/article/details/81590953>)\n\n[git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法](<https://blog.csdn.net/sungdut/article/details/46129711>)\n\n\n\n","source":"_posts/how-to-deploy-hexo-to-self-server.md","raw":"---\ntitle: 如果优雅的部署hexo博客到自己的服务器\ntoc: true\nsidebar: true\ndate: 2019-11-08 08:35:55\ntags:\n- hexo\ncategories:\n- hexo\n---\n\n### 服务器搭建\n\n### 服务器准备信息\n\n#### 购买云主机\n\n完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的\n\n#### 相关软件安装\n\n这里推荐使用 [ezhttp 工具](https://www.centos.bz/2017/02/ezhttp/) 来进行服务器环境的安装, 他的简介是这样的: \n\nezhttp是一个[Linux](https://www.centos.bz/tag/linux/)一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,[LNAMP](https://www.centos.bz/tag/lnamp/)环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<https://github.com/centos-bz/ezhttp>。\n\n#### 配置nginx服务器\n\n安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. \n\n找到`nginx`配置文件, 假定你安装在`/usr/local/nginx`\n\n```shell\n> cd /user/local/nginx/conf\n> cd vhost\n> touch myblog.conf\n```\n\n写入以下内容, 修改包含注释的位置为你的实际内容即可\n\n```\n\nserver {\n        listen 80;\n        # 网站的IP地址\n        server_name blog.plcent.com;\n        index index.html index.php index.htm;\n        # 指定的站点目录\n        root /home/website/myblog;\n\n        location / {\n            try_files $uri $uri/index.html @apache;\n        }\n\n        location @apache {\n            internal;\n            proxy_pass http://127.0.0.1:88;\n            include proxy.conf;\n        }\n\n        location ~ .*\\.(php|php5)?$ {\n             proxy_pass http://127.0.0.1:88;\n             include proxy.conf;\n        }\n\n```\n\n> 你可以为内一个站点配置一个文件\n\n重启服务器, 使得新配置生效\n\n```shell\n> /etc/init.d/nginx restart\n```\n\n\n\n#### 建立git账号\n\n你需要在服务器上建立一个`git`账号, 用来推送仓库使用(因为使用`root`账号并不是很安全)\n\n```shell\n# 添加git用户\n> useradd git\n# 为用户设置密码\n> passwd git\n# 为了安全, 只为git用户配置git shell\n> usermod -s /bin/git-shell git\n```\n\n#### 建立空仓库\n\n```shell\n# 进入自己的git仓库\n> cd /data/gitstore\n# 初始化一个空仓库\n> git init --bare myblog.git\n```\n\n#### 仓库修改权限\n\n正常情况下, 你建立仓库时是使用`root`账号创立的, `git`用户无权操作该目录, 你需要将该仓库的操作权限交给`git`\n\n```shell\n>  chown -R git:git myblog.git\n```\n\n> `-R` 一定要添加, 该属性将递归修改所有文件的权限\n\n#### hexo 配置推送仓库\n\n在hexo根目录的 `_config.yml` 中配置:\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@your_server_IP:/data/gitstore/myblog\n  branch: master\n```\n\n> 替换`your_server_IP`为你服务器实际的IP地址\n>\n> 替换`/data/gitstore/myblog`为你git仓库的实际路径\n\n#### hexo d 推送仓库到自己服务器\n\n在使用`hexo d` 命令推送编译好的博客内容到仓库时, 你需要在本地先安装\n\n```\n> npm install hexo-deployer-git --save\n```\n\n安装完成之后, 使用 `hexo d` 推送试试, 推送成功将显示:\n\n![推送成功](./how-to-deploy-hexo-to-self-server/1573175297499.png)\n\n\n查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录\n\n#### 配置ssh\n\n[设置 SSH Key 登录服务器和 Git 服务器](https://www.cnblogs.com/feiffy/p/8995003.html)\n\n\n\n\n### 让服务器git自动部署博客\n\n自动部署的原理就是利用`git`钩子`post-receive`在仓库被提交之后执行钩子中定义的命令\n\n```shell\n# 进入git仓库hooks目录\n> cd /data/gitstore/myblog.git/hooks\n# 如果没有post-receive文件则新建\n> touch post-receive\n# 写入内容\n> vi post-receive\n```\n\n```\n#!/bin/bash\n#指定我的代码检出目录\nDIR=/home/wwwroot/myblog\ngit --work-tree=${DIR} clean -fd\n#直接强制检出\ngit --work-tree=${DIR} checkout --force\n```\n\n> 修改`/home/wwwroot/myblog`为你网站实际部署的地址\n\n修改钩子文件执行权限\n\n```\n# 为钩子文件添加可执行权限\n> chmod 766 post-receive\n# 重新刷一遍仓库权限\n> cd ../../\n> chown -R git:git myblog.git\n```\n\n#### 推送博客\n\n```\n> hexo clean\n> hexo g\n> hexo d\n```\n\n\n\n\n\n### 参考文档\n\n[Linux一键配置工具ezhttp介绍](https://www.centos.bz/2017/02/ezhttp/)\n\n[ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境](https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/)\n\n[带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器](<https://blog.csdn.net/qq_35561857/article/details/81590953>)\n\n[git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法](<https://blog.csdn.net/sungdut/article/details/46129711>)\n\n\n\n","slug":"how-to-deploy-hexo-to-self-server","published":1,"updated":"2021-09-01T06:29:03.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbn000fowgnchnzajk8","content":"<h3 id=\"服务器搭建\"><a href=\"#服务器搭建\" class=\"headerlink\" title=\"服务器搭建\"></a>服务器搭建</h3><h3 id=\"服务器准备信息\"><a href=\"#服务器准备信息\" class=\"headerlink\" title=\"服务器准备信息\"></a>服务器准备信息</h3><h4 id=\"购买云主机\"><a href=\"#购买云主机\" class=\"headerlink\" title=\"购买云主机\"></a>购买云主机</h4><p>完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的</p>\n<h4 id=\"相关软件安装\"><a href=\"#相关软件安装\" class=\"headerlink\" title=\"相关软件安装\"></a>相关软件安装</h4><p>这里推荐使用 <a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp/\">ezhttp 工具</a> 来进行服务器环境的安装, 他的简介是这样的: </p>\n<p>ezhttp是一个<a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/tag/linux/\">Linux</a>一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,<a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/tag/lnamp/\">LNAMP</a>环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/centos-bz/ezhttp\">https://github.com/centos-bz/ezhttp</a>。</p>\n<h4 id=\"配置nginx服务器\"><a href=\"#配置nginx服务器\" class=\"headerlink\" title=\"配置nginx服务器\"></a>配置nginx服务器</h4><p>安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. </p>\n<p>找到<code>nginx</code>配置文件, 假定你安装在<code>/usr/local/nginx</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /user/local/nginx/conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> vhost</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> myblog.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容, 修改包含注释的位置为你的实际内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        # 网站的IP地址</span><br><span class=\"line\">        server_name blog.plcent.com;</span><br><span class=\"line\">        index index.html index.php index.htm;</span><br><span class=\"line\">        # 指定的站点目录</span><br><span class=\"line\">        root /home/website/myblog;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri $uri/index.html @apache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location @apache &#123;</span><br><span class=\"line\">            internal;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*\\.(php|php5)?$ &#123;</span><br><span class=\"line\">             proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">             include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你可以为内一个站点配置一个文件</p>\n</blockquote>\n<p>重启服务器, 使得新配置生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"建立git账号\"><a href=\"#建立git账号\" class=\"headerlink\" title=\"建立git账号\"></a>建立git账号</h4><p>你需要在服务器上建立一个<code>git</code>账号, 用来推送仓库使用(因为使用<code>root</code>账号并不是很安全)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加git用户</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">useradd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为用户设置密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">passwd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了安全, 只为git用户配置git shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">usermod -s /bin/git-shell git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"建立空仓库\"><a href=\"#建立空仓库\" class=\"headerlink\" title=\"建立空仓库\"></a>建立空仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入自己的git仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化一个空仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">git init --bare myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库修改权限\"><a href=\"#仓库修改权限\" class=\"headerlink\" title=\"仓库修改权限\"></a>仓库修改权限</h4><p>正常情况下, 你建立仓库时是使用<code>root</code>账号创立的, <code>git</code>用户无权操作该目录, 你需要将该仓库的操作权限交给<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"> <span class=\"built_in\">chown</span> -R git:git myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-R</code> 一定要添加, 该属性将递归修改所有文件的权限</p>\n</blockquote>\n<h4 id=\"hexo-配置推送仓库\"><a href=\"#hexo-配置推送仓库\" class=\"headerlink\" title=\"hexo 配置推送仓库\"></a>hexo 配置推送仓库</h4><p>在hexo根目录的 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@your_server_IP:/data/gitstore/myblog</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换<code>your_server_IP</code>为你服务器实际的IP地址</p>\n<p>替换<code>/data/gitstore/myblog</code>为你git仓库的实际路径</p>\n</blockquote>\n<h4 id=\"hexo-d-推送仓库到自己服务器\"><a href=\"#hexo-d-推送仓库到自己服务器\" class=\"headerlink\" title=\"hexo d 推送仓库到自己服务器\"></a>hexo d 推送仓库到自己服务器</h4><p>在使用<code>hexo d</code> 命令推送编译好的博客内容到仓库时, 你需要在本地先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后, 使用 <code>hexo d</code> 推送试试, 推送成功将显示:</p>\n<p><img src=\"/.com//1573175297499.png\" alt=\"推送成功\"></p>\n<p>查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录</p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/feiffy/p/8995003.html\">设置 SSH Key 登录服务器和 Git 服务器</a></p>\n<h3 id=\"让服务器git自动部署博客\"><a href=\"#让服务器git自动部署博客\" class=\"headerlink\" title=\"让服务器git自动部署博客\"></a>让服务器git自动部署博客</h3><p>自动部署的原理就是利用<code>git</code>钩子<code>post-receive</code>在仓库被提交之后执行钩子中定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入git仓库hooks目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore/myblog.git/hooks</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果没有post-receive文件则新建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> post-receive</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">vi post-receive</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#指定我的代码检出目录</span><br><span class=\"line\">DIR=/home/wwwroot/myblog</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class=\"line\">#直接强制检出</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改<code>/home/wwwroot/myblog</code>为你网站实际部署的地址</p>\n</blockquote>\n<p>修改钩子文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为钩子文件添加可执行权限</span><br><span class=\"line\">&gt; chmod 766 post-receive</span><br><span class=\"line\"># 重新刷一遍仓库权限</span><br><span class=\"line\">&gt; cd ../../</span><br><span class=\"line\">&gt; chown -R git:git myblog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo g</span><br><span class=\"line\">&gt; hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp/\">Linux一键配置工具ezhttp介绍</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/\">ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\">带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/sungdut/article/details/46129711\">git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"服务器搭建\"><a href=\"#服务器搭建\" class=\"headerlink\" title=\"服务器搭建\"></a>服务器搭建</h3><h3 id=\"服务器准备信息\"><a href=\"#服务器准备信息\" class=\"headerlink\" title=\"服务器准备信息\"></a>服务器准备信息</h3><h4 id=\"购买云主机\"><a href=\"#购买云主机\" class=\"headerlink\" title=\"购买云主机\"></a>购买云主机</h4><p>完成搭建的前提是, 你需要有一个属于自己的与主机, 你可以选择购买阿里云或者腾讯云, 毕竟国内云主机做的比较好的, 学生购买还是很优惠的</p>\n<h4 id=\"相关软件安装\"><a href=\"#相关软件安装\" class=\"headerlink\" title=\"相关软件安装\"></a>相关软件安装</h4><p>这里推荐使用 <a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp/\">ezhttp 工具</a> 来进行服务器环境的安装, 他的简介是这样的: </p>\n<p>ezhttp是一个<a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/tag/linux/\">Linux</a>一键配置工具，采用bash脚本语言编写。支持自动配置LAMP,LNMP,<a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/tag/lnamp/\">LNAMP</a>环境，以前提供各种其它的配置工具，如自动配置swap,配置iptables等。项目托管在github，地址为<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/centos-bz/ezhttp\">https://github.com/centos-bz/ezhttp</a>。</p>\n<h4 id=\"配置nginx服务器\"><a href=\"#配置nginx服务器\" class=\"headerlink\" title=\"配置nginx服务器\"></a>配置nginx服务器</h4><p>安装完成之后, 你需要为你的站点配置域名, 指定一个站点目录. </p>\n<p>找到<code>nginx</code>配置文件, 假定你安装在<code>/usr/local/nginx</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /user/local/nginx/conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> vhost</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> myblog.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容, 修改包含注释的位置为你的实际内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        # 网站的IP地址</span><br><span class=\"line\">        server_name blog.plcent.com;</span><br><span class=\"line\">        index index.html index.php index.htm;</span><br><span class=\"line\">        # 指定的站点目录</span><br><span class=\"line\">        root /home/website/myblog;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri $uri/index.html @apache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location @apache &#123;</span><br><span class=\"line\">            internal;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*\\.(php|php5)?$ &#123;</span><br><span class=\"line\">             proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">             include proxy.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你可以为内一个站点配置一个文件</p>\n</blockquote>\n<p>重启服务器, 使得新配置生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"建立git账号\"><a href=\"#建立git账号\" class=\"headerlink\" title=\"建立git账号\"></a>建立git账号</h4><p>你需要在服务器上建立一个<code>git</code>账号, 用来推送仓库使用(因为使用<code>root</code>账号并不是很安全)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加git用户</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">useradd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为用户设置密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">passwd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了安全, 只为git用户配置git shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">usermod -s /bin/git-shell git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"建立空仓库\"><a href=\"#建立空仓库\" class=\"headerlink\" title=\"建立空仓库\"></a>建立空仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入自己的git仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化一个空仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">git init --bare myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库修改权限\"><a href=\"#仓库修改权限\" class=\"headerlink\" title=\"仓库修改权限\"></a>仓库修改权限</h4><p>正常情况下, 你建立仓库时是使用<code>root</code>账号创立的, <code>git</code>用户无权操作该目录, 你需要将该仓库的操作权限交给<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"> <span class=\"built_in\">chown</span> -R git:git myblog.git</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-R</code> 一定要添加, 该属性将递归修改所有文件的权限</p>\n</blockquote>\n<h4 id=\"hexo-配置推送仓库\"><a href=\"#hexo-配置推送仓库\" class=\"headerlink\" title=\"hexo 配置推送仓库\"></a>hexo 配置推送仓库</h4><p>在hexo根目录的 <code>_config.yml</code> 中配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@your_server_IP:/data/gitstore/myblog</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换<code>your_server_IP</code>为你服务器实际的IP地址</p>\n<p>替换<code>/data/gitstore/myblog</code>为你git仓库的实际路径</p>\n</blockquote>\n<h4 id=\"hexo-d-推送仓库到自己服务器\"><a href=\"#hexo-d-推送仓库到自己服务器\" class=\"headerlink\" title=\"hexo d 推送仓库到自己服务器\"></a>hexo d 推送仓库到自己服务器</h4><p>在使用<code>hexo d</code> 命令推送编译好的博客内容到仓库时, 你需要在本地先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后, 使用 <code>hexo d</code> 推送试试, 推送成功将显示:</p>\n<p><img src=\"/.com//1573175297499.png\" alt=\"推送成功\"></p>\n<p>查看上面的截图你会发现这里是使用用户名密码的方式推送仓库, 为了更方便使用可以配置使用ssh登录</p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/feiffy/p/8995003.html\">设置 SSH Key 登录服务器和 Git 服务器</a></p>\n<h3 id=\"让服务器git自动部署博客\"><a href=\"#让服务器git自动部署博客\" class=\"headerlink\" title=\"让服务器git自动部署博客\"></a>让服务器git自动部署博客</h3><p>自动部署的原理就是利用<code>git</code>钩子<code>post-receive</code>在仓库被提交之后执行钩子中定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入git仓库hooks目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /data/gitstore/myblog.git/hooks</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果没有post-receive文件则新建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> post-receive</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">vi post-receive</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#指定我的代码检出目录</span><br><span class=\"line\">DIR=/home/wwwroot/myblog</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class=\"line\">#直接强制检出</span><br><span class=\"line\">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改<code>/home/wwwroot/myblog</code>为你网站实际部署的地址</p>\n</blockquote>\n<p>修改钩子文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为钩子文件添加可执行权限</span><br><span class=\"line\">&gt; chmod 766 post-receive</span><br><span class=\"line\"># 重新刷一遍仓库权限</span><br><span class=\"line\">&gt; cd ../../</span><br><span class=\"line\">&gt; chown -R git:git myblog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo g</span><br><span class=\"line\">&gt; hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp/\">Linux一键配置工具ezhttp介绍</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://www.centos.bz/2017/02/ezhttp-lamp-lnmp-lanmp-nginx-php-mysql/\">ezhttp一键安装配置lnmp lamp lnamp(nginx apache php mysql)环境</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\">带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器</a></p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/sungdut/article/details/46129711\">git仓库推送报错: insufficient permission for adding an object to repository database ./objects 的解决办法</a></p>\n"},{"title":"docker网络互连","toc":true,"sidebar":true,"date":"2022-07-15T02:21:26.000Z","_content":"\n# docker网络互连\n\n\n\n## docker0网络\n\n在未启动任何docker镜像时，查看本机的网卡，存在docker0\n\n```\n# 查看本机网络情况\n[root@VM-16-13-centos ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff\n    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dcff:fea8:a272/64 scope link\n       valid_lft forever preferred_lft forever\n\n```\n\n启动两容器\n\n```\n# 启动一个nginx容器\ndocker run -it --name ng1 nginx\n# 查看容器的IP地址\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ng1\n172.17.0.2\n\n\n# 启动一个tomcat容器\ndocker run -it --name tomcat01 tomcat\n# 查看容器的IP地址\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ng1\n172.17.0.3\n```\n\n启动两个容器后，本机网卡多个两个内容\n\n```\n# 查看本机网络情况\nip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff\n    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dcff:fea8:a272/64 scope link\n       valid_lft forever preferred_lft forever\n99: veth5bc12fa@if98: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 56:27:a0:23:a0:f7 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::5427:a0ff:fe23:a0f7/64 scope link\n       valid_lft forever preferred_lft forever\n101: veth7ede5f7@if100: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 22:3b:ed:fc:47:29 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n    inet6 fe80::203b:edff:fefc:4729/64 scope link\n       valid_lft forever preferred_lft forever\n\n```\n\n从主机检查网络情况，可以直接ping通docker内部的网络\n\n```\n[root@VM-16-13-centos ~]# ping 172.17.0.2\nPING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.\n64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.037 ms\n--- 172.17.0.2 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1053ms\nrtt min/avg/max/mdev = 0.037/0.038/0.039/0.001 ms\n\n[root@VM-16-13-centos ~]# ping 172.17.0.3\nPING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.\n64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.045 ms\n--- 172.17.0.3 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3079ms\nrtt min/avg/max/mdev = 0.040/0.042/0.045/0.006 ms\n```\n\n容器ng1中启动了默认的nginx站点，可以通过IP直接请求到\n\n```\ncurl http://172.17.0.2\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n## docker是如何进行网络通信的?\n\n **每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair技术！** \n\n\n\n查看本机网卡发现，每启动一个docker容器，则会生成一个新的网卡信息，网卡信息都是一对一对存在的。\n\n启动容器均会生成新的网卡信息，删除容器，网卡也会移除，也就是每次启动，IP地址都会新建\n\n![1657876653166](./learn-the-abc-of-docker-about-network/1657876653166.png)\n\n\n\nDocker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）；\nDocker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。\n\n\n\n\n\n## veth-pair\n\n[Linux veth pair 详解](https://zhuanlan.zhihu.com/p/293659939)\n\nveth pair是成对出现的一种虚拟网络设备接口，一端连着网络协议栈，一端彼此相连。\n\n\n\nVeth-pair 不是一个设备，而是一对设备，作为虚拟网线用于连接两个虚拟网络设备。veth pair 是根据[数据链路层](https://so.csdn.net/so/search?q=数据链路层&spm=1001.2101.3001.7020)的 MAC 地址对网络数据包进行转发的过程来实现的，本质是反转通讯数据的方向，需要发送的数据会被转换成需要收到的数据重新送入内核网络层进行处理，从而间接的完成数据的注入。 \n\n\n\n## 容器互联 --link\n\n```\n# 启动新的容器 ng2 并将它和 ng1 的网络连通\ndocker run -d -P -it --name ng2 --link ng1 nginx\n\n# 即可在容器 ng2 中，直接通过容器名连通容器 ng1\ndocker exec -it ng2 curl http://ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 但是反过来，却不可以，网络不通\ndocker exec -it ng1 curl http://ng2\n```\n\n其根本原因在于使用--link命令时，其实是在容器的/etc/hosts中配置了相关的域名映射关系。\n\n```\n# 查看ng2容器的hosts配置\n# 发现新增了到ng1的域名配置信息\ndocker exec -it ng2 cat /etc/hosts\n\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n# 该配置信息，让ng2内部可以直接通过ng1请求172.17.0.2\n172.17.0.2      ng1 d35478a52fd4\n172.17.0.4      7e5024e74b30\n\n\n# 查看ng1容器的hosts配置\n# ng1 中未配置 ng2 的信息，所以无法直接访问\ndocker exec -it ng1 cat /etc/hosts\n\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      d35478a52fd4\n\n```\n\n\n\n> 该种方式相对死板，不够灵活，所以 --link 方式已经不建议使用。更为灵活的方式是自定义docker网络\n\n\n\n## 自定义网络docker network create\n\ndocker0存在不能通过域名的方式访问、可以通过--link连通但是不够灵活。\n\ndocker提供的网络模式\n\n- bridge 桥接模式\n- none 不配置网络\n- host 主机模式\n- \n\n```\n\n# 你可以自定义一个桥接网络, 默认情况下,会根据docker0的IP自动生成\ndocker network create -d bridge my-network\n\ndocker network inspect my-network\n[\n    {\n        \"Name\": \"my-network\",\n        \"Id\": \"89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e\",\n        \"Created\": \"2022-07-15T18:19:46.645909571+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n\n\n# 当然可以自己指定子网IP和网关。指定子网IP需要指定网关IP，默认都是x.x.0.1\ndocker network create -d bridge --subnet=192.168.0.0/16 --getway 192.168.0.1 my-network2\n```\n\n## 使用自定义网络 --net\n\n启动容器时，使用--net参数指定网络，如果不指定该参数，则默认使用docker0作为网络。\n\n```\n# 启动my-ng1容器\n[root@VM-16-13-centos ~]# docker run -d -it --name my-ng1 --net my-network nginx\nWARNING: IPv4 forwarding is disabled. Networking will not work.\nfb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64\n\n# 启动my-ng2容器\n[root@VM-16-13-centos ~]# docker run -d -it --name my-ng2 --net my-network nginx\nWARNING: IPv4 forwarding is disabled. Networking will not work.\n71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a\n\n# 查看新建网络的情况，发现新建的两个容器已经挂载在新建的网络上\n[root@VM-16-13-centos ~]# docker network inspect my-network\n[\n    {\n        \"Name\": \"my-network\",\n        \"Id\": \"89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e\",\n        \"Created\": \"2022-07-15T18:19:46.645909571+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a\": {\n                \"Name\": \"my-ng2\",\n                \"EndpointID\": \"5e3c6239a7bf550a97963466b74e8829f1523af6d6985b8b46e0da5b74f11332\",\n                \"MacAddress\": \"02:42:ac:12:00:03\",\n                \"IPv4Address\": \"172.18.0.3/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64\": {\n                \"Name\": \"my-ng1\",\n                \"EndpointID\": \"f450e8f8f9ea96aaed2c55e0db93f1cd8962ea9998b3500ca4307f419a76aade\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n\n# 直接在 my-ng1 容器中，使用容器名称，请求 my-ng2 容器\n[root@VM-16-13-centos ~]# docker exec -it my-ng1 curl http://my-ng2\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 直接在 my-ng2 容器中，使用容器名称，请求 my-ng1 容器\n[root@VM-16-13-centos ~]# docker exec -it my-ng2 curl http://my-ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n[root@VM-16-13-centos ~]#\n\n```\n\n可以发现，新建的自定义网络，修复了docker0的缺点，可以通过容器名进行互联。\n\n\n\n这种方式是推荐使用的方式。\n\n\n\n在构建不同的集群时，可以使用不同的网络，用来保证各个集群的网络隔离。\n\n\n\n## 网络连通docker network connect\n\n在基于自定义网络的基础上，如果打通不同自定义网络之间的网络？\n\n```\n# 将之前创建的docker0网络下的容器 ng1 连接到网络 my-network 上\n[root@VM-16-13-centos ~]# docker network connect my-network ng1\n\n# 查看 ng1 的网络情况\ndocker inspect ng1\n```\n\n![1657882812055](./learn-the-abc-of-docker-about-network/1657882812055.png)\n\n可以发现 ng1 上被挂载了一个新的网络my-network。就是所谓的\"一个容器两个IP地址\"。\n\n> 所以不同网络之间的容器连通，其实是容器和网络进行连通，而不是两个网络进行连通\n\n\n\n```\n# 测试，直接在网络 docker0 中的 ng1 内连接网络 my-network 下的 my-ng1\n[root@VM-16-13-centos ~]# docker exec -it ng1 curl http://my-ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 测试，直接在网络 docker0 中的 ng2 内连接网络 my-network 下的 my-ng1\n# 由于ng2并没有打通，所以无法连接成功\n[root@VM-16-13-centos ~]# docker exec -it ng2 curl http://my-ng1\n\n```\n\n","source":"_posts/learn-the-abc-of-docker-about-network.md","raw":"---\ntitle: docker网络互连\ntoc: true\nsidebar: true\ndate: 2022-07-15 10:21:26\ntags: docker\ncategories:\n- docker\n---\n\n# docker网络互连\n\n\n\n## docker0网络\n\n在未启动任何docker镜像时，查看本机的网卡，存在docker0\n\n```\n# 查看本机网络情况\n[root@VM-16-13-centos ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff\n    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dcff:fea8:a272/64 scope link\n       valid_lft forever preferred_lft forever\n\n```\n\n启动两容器\n\n```\n# 启动一个nginx容器\ndocker run -it --name ng1 nginx\n# 查看容器的IP地址\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ng1\n172.17.0.2\n\n\n# 启动一个tomcat容器\ndocker run -it --name tomcat01 tomcat\n# 查看容器的IP地址\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ng1\n172.17.0.3\n```\n\n启动两个容器后，本机网卡多个两个内容\n\n```\n# 查看本机网络情况\nip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff\n    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dcff:fea8:a272/64 scope link\n       valid_lft forever preferred_lft forever\n99: veth5bc12fa@if98: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 56:27:a0:23:a0:f7 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::5427:a0ff:fe23:a0f7/64 scope link\n       valid_lft forever preferred_lft forever\n101: veth7ede5f7@if100: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 22:3b:ed:fc:47:29 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n    inet6 fe80::203b:edff:fefc:4729/64 scope link\n       valid_lft forever preferred_lft forever\n\n```\n\n从主机检查网络情况，可以直接ping通docker内部的网络\n\n```\n[root@VM-16-13-centos ~]# ping 172.17.0.2\nPING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.\n64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.037 ms\n--- 172.17.0.2 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1053ms\nrtt min/avg/max/mdev = 0.037/0.038/0.039/0.001 ms\n\n[root@VM-16-13-centos ~]# ping 172.17.0.3\nPING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.\n64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.045 ms\n--- 172.17.0.3 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3079ms\nrtt min/avg/max/mdev = 0.040/0.042/0.045/0.006 ms\n```\n\n容器ng1中启动了默认的nginx站点，可以通过IP直接请求到\n\n```\ncurl http://172.17.0.2\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n## docker是如何进行网络通信的?\n\n **每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair技术！** \n\n\n\n查看本机网卡发现，每启动一个docker容器，则会生成一个新的网卡信息，网卡信息都是一对一对存在的。\n\n启动容器均会生成新的网卡信息，删除容器，网卡也会移除，也就是每次启动，IP地址都会新建\n\n![1657876653166](./learn-the-abc-of-docker-about-network/1657876653166.png)\n\n\n\nDocker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）；\nDocker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。\n\n\n\n\n\n## veth-pair\n\n[Linux veth pair 详解](https://zhuanlan.zhihu.com/p/293659939)\n\nveth pair是成对出现的一种虚拟网络设备接口，一端连着网络协议栈，一端彼此相连。\n\n\n\nVeth-pair 不是一个设备，而是一对设备，作为虚拟网线用于连接两个虚拟网络设备。veth pair 是根据[数据链路层](https://so.csdn.net/so/search?q=数据链路层&spm=1001.2101.3001.7020)的 MAC 地址对网络数据包进行转发的过程来实现的，本质是反转通讯数据的方向，需要发送的数据会被转换成需要收到的数据重新送入内核网络层进行处理，从而间接的完成数据的注入。 \n\n\n\n## 容器互联 --link\n\n```\n# 启动新的容器 ng2 并将它和 ng1 的网络连通\ndocker run -d -P -it --name ng2 --link ng1 nginx\n\n# 即可在容器 ng2 中，直接通过容器名连通容器 ng1\ndocker exec -it ng2 curl http://ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 但是反过来，却不可以，网络不通\ndocker exec -it ng1 curl http://ng2\n```\n\n其根本原因在于使用--link命令时，其实是在容器的/etc/hosts中配置了相关的域名映射关系。\n\n```\n# 查看ng2容器的hosts配置\n# 发现新增了到ng1的域名配置信息\ndocker exec -it ng2 cat /etc/hosts\n\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n# 该配置信息，让ng2内部可以直接通过ng1请求172.17.0.2\n172.17.0.2      ng1 d35478a52fd4\n172.17.0.4      7e5024e74b30\n\n\n# 查看ng1容器的hosts配置\n# ng1 中未配置 ng2 的信息，所以无法直接访问\ndocker exec -it ng1 cat /etc/hosts\n\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      d35478a52fd4\n\n```\n\n\n\n> 该种方式相对死板，不够灵活，所以 --link 方式已经不建议使用。更为灵活的方式是自定义docker网络\n\n\n\n## 自定义网络docker network create\n\ndocker0存在不能通过域名的方式访问、可以通过--link连通但是不够灵活。\n\ndocker提供的网络模式\n\n- bridge 桥接模式\n- none 不配置网络\n- host 主机模式\n- \n\n```\n\n# 你可以自定义一个桥接网络, 默认情况下,会根据docker0的IP自动生成\ndocker network create -d bridge my-network\n\ndocker network inspect my-network\n[\n    {\n        \"Name\": \"my-network\",\n        \"Id\": \"89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e\",\n        \"Created\": \"2022-07-15T18:19:46.645909571+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n\n\n# 当然可以自己指定子网IP和网关。指定子网IP需要指定网关IP，默认都是x.x.0.1\ndocker network create -d bridge --subnet=192.168.0.0/16 --getway 192.168.0.1 my-network2\n```\n\n## 使用自定义网络 --net\n\n启动容器时，使用--net参数指定网络，如果不指定该参数，则默认使用docker0作为网络。\n\n```\n# 启动my-ng1容器\n[root@VM-16-13-centos ~]# docker run -d -it --name my-ng1 --net my-network nginx\nWARNING: IPv4 forwarding is disabled. Networking will not work.\nfb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64\n\n# 启动my-ng2容器\n[root@VM-16-13-centos ~]# docker run -d -it --name my-ng2 --net my-network nginx\nWARNING: IPv4 forwarding is disabled. Networking will not work.\n71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a\n\n# 查看新建网络的情况，发现新建的两个容器已经挂载在新建的网络上\n[root@VM-16-13-centos ~]# docker network inspect my-network\n[\n    {\n        \"Name\": \"my-network\",\n        \"Id\": \"89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e\",\n        \"Created\": \"2022-07-15T18:19:46.645909571+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a\": {\n                \"Name\": \"my-ng2\",\n                \"EndpointID\": \"5e3c6239a7bf550a97963466b74e8829f1523af6d6985b8b46e0da5b74f11332\",\n                \"MacAddress\": \"02:42:ac:12:00:03\",\n                \"IPv4Address\": \"172.18.0.3/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64\": {\n                \"Name\": \"my-ng1\",\n                \"EndpointID\": \"f450e8f8f9ea96aaed2c55e0db93f1cd8962ea9998b3500ca4307f419a76aade\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n\n# 直接在 my-ng1 容器中，使用容器名称，请求 my-ng2 容器\n[root@VM-16-13-centos ~]# docker exec -it my-ng1 curl http://my-ng2\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 直接在 my-ng2 容器中，使用容器名称，请求 my-ng1 容器\n[root@VM-16-13-centos ~]# docker exec -it my-ng2 curl http://my-ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n[root@VM-16-13-centos ~]#\n\n```\n\n可以发现，新建的自定义网络，修复了docker0的缺点，可以通过容器名进行互联。\n\n\n\n这种方式是推荐使用的方式。\n\n\n\n在构建不同的集群时，可以使用不同的网络，用来保证各个集群的网络隔离。\n\n\n\n## 网络连通docker network connect\n\n在基于自定义网络的基础上，如果打通不同自定义网络之间的网络？\n\n```\n# 将之前创建的docker0网络下的容器 ng1 连接到网络 my-network 上\n[root@VM-16-13-centos ~]# docker network connect my-network ng1\n\n# 查看 ng1 的网络情况\ndocker inspect ng1\n```\n\n![1657882812055](./learn-the-abc-of-docker-about-network/1657882812055.png)\n\n可以发现 ng1 上被挂载了一个新的网络my-network。就是所谓的\"一个容器两个IP地址\"。\n\n> 所以不同网络之间的容器连通，其实是容器和网络进行连通，而不是两个网络进行连通\n\n\n\n```\n# 测试，直接在网络 docker0 中的 ng1 内连接网络 my-network 下的 my-ng1\n[root@VM-16-13-centos ~]# docker exec -it ng1 curl http://my-ng1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n\n\n# 测试，直接在网络 docker0 中的 ng2 内连接网络 my-network 下的 my-ng1\n# 由于ng2并没有打通，所以无法连接成功\n[root@VM-16-13-centos ~]# docker exec -it ng2 curl http://my-ng1\n\n```\n\n","slug":"learn-the-abc-of-docker-about-network","published":1,"updated":"2022-07-15T11:12:27.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbo000howgnchk27jnf","content":"<h1 id=\"docker网络互连\"><a href=\"#docker网络互连\" class=\"headerlink\" title=\"docker网络互连\"></a>docker网络互连</h1><h2 id=\"docker0网络\"><a href=\"#docker0网络\" class=\"headerlink\" title=\"docker0网络\"></a>docker0网络</h2><p>在未启动任何docker镜像时，查看本机的网卡，存在docker0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本机网络情况</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:dcff:fea8:a272/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动两容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动一个nginx容器</span><br><span class=\"line\">docker run -it --name ng1 nginx</span><br><span class=\"line\"># 查看容器的IP地址</span><br><span class=\"line\">docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; ng1</span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 启动一个tomcat容器</span><br><span class=\"line\">docker run -it --name tomcat01 tomcat</span><br><span class=\"line\"># 查看容器的IP地址</span><br><span class=\"line\">docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; ng1</span><br><span class=\"line\">172.17.0.3</span><br></pre></td></tr></table></figure>\n\n<p>启动两个容器后，本机网卡多个两个内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本机网络情况</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:dcff:fea8:a272/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">99: veth5bc12fa@if98: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 56:27:a0:23:a0:f7 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::5427:a0ff:fe23:a0f7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">101: veth7ede5f7@if100: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 22:3b:ed:fc:47:29 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::203b:edff:fefc:4729/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从主机检查网络情况，可以直接ping通docker内部的网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-13-centos ~]# ping 172.17.0.2</span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.037 ms</span><br><span class=\"line\">--- 172.17.0.2 ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 1053ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.037/0.038/0.039/0.001 ms</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-16-13-centos ~]# ping 172.17.0.3</span><br><span class=\"line\">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.045 ms</span><br><span class=\"line\">--- 172.17.0.3 ping statistics ---</span><br><span class=\"line\">4 packets transmitted, 4 received, 0% packet loss, time 3079ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.040/0.042/0.045/0.006 ms</span><br></pre></td></tr></table></figure>\n\n<p>容器ng1中启动了默认的nginx站点，可以通过IP直接请求到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://172.17.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker是如何进行网络通信的\"><a href=\"#docker是如何进行网络通信的\" class=\"headerlink\" title=\"docker是如何进行网络通信的?\"></a>docker是如何进行网络通信的?</h2><p> <strong>每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair技术！</strong> </p>\n<p>查看本机网卡发现，每启动一个docker容器，则会生成一个新的网卡信息，网卡信息都是一对一对存在的。</p>\n<p>启动容器均会生成新的网卡信息，删除容器，网卡也会移除，也就是每次启动，IP地址都会新建</p>\n<p><img src=\"/.com//1657876653166.png\" alt=\"1657876653166\"></p>\n<p>Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）；<br>Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。</p>\n<h2 id=\"veth-pair\"><a href=\"#veth-pair\" class=\"headerlink\" title=\"veth-pair\"></a>veth-pair</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/293659939\">Linux veth pair 详解</a></p>\n<p>veth pair是成对出现的一种虚拟网络设备接口，一端连着网络协议栈，一端彼此相连。</p>\n<p>Veth-pair 不是一个设备，而是一对设备，作为虚拟网线用于连接两个虚拟网络设备。veth pair 是根据<a target=\"_blank\" rel=\"noopener\" href=\"https://so.csdn.net/so/search?q=数据链路层&spm=1001.2101.3001.7020\">数据链路层</a>的 MAC 地址对网络数据包进行转发的过程来实现的，本质是反转通讯数据的方向，需要发送的数据会被转换成需要收到的数据重新送入内核网络层进行处理，从而间接的完成数据的注入。 </p>\n<h2 id=\"容器互联-–link\"><a href=\"#容器互联-–link\" class=\"headerlink\" title=\"容器互联 –link\"></a>容器互联 –link</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动新的容器 ng2 并将它和 ng1 的网络连通</span><br><span class=\"line\">docker run -d -P -it --name ng2 --link ng1 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 即可在容器 ng2 中，直接通过容器名连通容器 ng1</span><br><span class=\"line\">docker exec -it ng2 curl http://ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 但是反过来，却不可以，网络不通</span><br><span class=\"line\">docker exec -it ng1 curl http://ng2</span><br></pre></td></tr></table></figure>\n\n<p>其根本原因在于使用–link命令时，其实是在容器的/etc/hosts中配置了相关的域名映射关系。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看ng2容器的hosts配置</span><br><span class=\"line\"># 发现新增了到ng1的域名配置信息</span><br><span class=\"line\">docker exec -it ng2 cat /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\"># 该配置信息，让ng2内部可以直接通过ng1请求172.17.0.2</span><br><span class=\"line\">172.17.0.2      ng1 d35478a52fd4</span><br><span class=\"line\">172.17.0.4      7e5024e74b30</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看ng1容器的hosts配置</span><br><span class=\"line\"># ng1 中未配置 ng2 的信息，所以无法直接访问</span><br><span class=\"line\">docker exec -it ng1 cat /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      d35478a52fd4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>该种方式相对死板，不够灵活，所以 –link 方式已经不建议使用。更为灵活的方式是自定义docker网络</p>\n</blockquote>\n<h2 id=\"自定义网络docker-network-create\"><a href=\"#自定义网络docker-network-create\" class=\"headerlink\" title=\"自定义网络docker network create\"></a>自定义网络docker network create</h2><p>docker0存在不能通过域名的方式访问、可以通过–link连通但是不够灵活。</p>\n<p>docker提供的网络模式</p>\n<ul>\n<li>bridge 桥接模式</li>\n<li>none 不配置网络</li>\n<li>host 主机模式</li>\n<li></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 你可以自定义一个桥接网络, 默认情况下,会根据docker0的IP自动生成</span><br><span class=\"line\">docker network create -d bridge my-network</span><br><span class=\"line\"></span><br><span class=\"line\">docker network inspect my-network</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;my-network&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2022-07-15T18:19:46.645909571+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 当然可以自己指定子网IP和网关。指定子网IP需要指定网关IP，默认都是x.x.0.1</span><br><span class=\"line\">docker network create -d bridge --subnet=192.168.0.0/16 --getway 192.168.0.1 my-network2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自定义网络-–net\"><a href=\"#使用自定义网络-–net\" class=\"headerlink\" title=\"使用自定义网络 –net\"></a>使用自定义网络 –net</h2><p>启动容器时，使用–net参数指定网络，如果不指定该参数，则默认使用docker0作为网络。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动my-ng1容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker run -d -it --name my-ng1 --net my-network nginx</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class=\"line\">fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动my-ng2容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker run -d -it --name my-ng2 --net my-network nginx</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class=\"line\">71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看新建网络的情况，发现新建的两个容器已经挂载在新建的网络上</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker network inspect my-network</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;my-network&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2022-07-15T18:19:46.645909571+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;</span><br><span class=\"line\">            &quot;71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;my-ng2&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;5e3c6239a7bf550a97963466b74e8829f1523af6d6985b8b46e0da5b74f11332&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;my-ng1&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;f450e8f8f9ea96aaed2c55e0db93f1cd8962ea9998b3500ca4307f419a76aade&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 my-ng1 容器中，使用容器名称，请求 my-ng2 容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it my-ng1 curl http://my-ng2</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 my-ng2 容器中，使用容器名称，请求 my-ng1 容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it my-ng2 curl http://my-ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">[root@VM-16-13-centos ~]#</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以发现，新建的自定义网络，修复了docker0的缺点，可以通过容器名进行互联。</p>\n<p>这种方式是推荐使用的方式。</p>\n<p>在构建不同的集群时，可以使用不同的网络，用来保证各个集群的网络隔离。</p>\n<h2 id=\"网络连通docker-network-connect\"><a href=\"#网络连通docker-network-connect\" class=\"headerlink\" title=\"网络连通docker network connect\"></a>网络连通docker network connect</h2><p>在基于自定义网络的基础上，如果打通不同自定义网络之间的网络？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将之前创建的docker0网络下的容器 ng1 连接到网络 my-network 上</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker network connect my-network ng1</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看 ng1 的网络情况</span><br><span class=\"line\">docker inspect ng1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1657882812055.png\" alt=\"1657882812055\"></p>\n<p>可以发现 ng1 上被挂载了一个新的网络my-network。就是所谓的”一个容器两个IP地址”。</p>\n<blockquote>\n<p>所以不同网络之间的容器连通，其实是容器和网络进行连通，而不是两个网络进行连通</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试，直接在网络 docker0 中的 ng1 内连接网络 my-network 下的 my-ng1</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it ng1 curl http://my-ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 测试，直接在网络 docker0 中的 ng2 内连接网络 my-network 下的 my-ng1</span><br><span class=\"line\"># 由于ng2并没有打通，所以无法连接成功</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it ng2 curl http://my-ng1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"docker网络互连\"><a href=\"#docker网络互连\" class=\"headerlink\" title=\"docker网络互连\"></a>docker网络互连</h1><h2 id=\"docker0网络\"><a href=\"#docker0网络\" class=\"headerlink\" title=\"docker0网络\"></a>docker0网络</h2><p>在未启动任何docker镜像时，查看本机的网卡，存在docker0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本机网络情况</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:dcff:fea8:a272/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动两容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动一个nginx容器</span><br><span class=\"line\">docker run -it --name ng1 nginx</span><br><span class=\"line\"># 查看容器的IP地址</span><br><span class=\"line\">docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; ng1</span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 启动一个tomcat容器</span><br><span class=\"line\">docker run -it --name tomcat01 tomcat</span><br><span class=\"line\"># 查看容器的IP地址</span><br><span class=\"line\">docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; ng1</span><br><span class=\"line\">172.17.0.3</span><br></pre></td></tr></table></figure>\n\n<p>启动两个容器后，本机网卡多个两个内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本机网络情况</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 55:54:00:a7:16:17 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 11.0.16.13/22 brd 10.0.19.255 scope global noprefixroute eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::5054:ff:fea7:1617/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:dc:a8:a2:72 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:dcff:fea8:a272/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">99: veth5bc12fa@if98: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 56:27:a0:23:a0:f7 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::5427:a0ff:fe23:a0f7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">101: veth7ede5f7@if100: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 22:3b:ed:fc:47:29 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::203b:edff:fefc:4729/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从主机检查网络情况，可以直接ping通docker内部的网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-13-centos ~]# ping 172.17.0.2</span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.037 ms</span><br><span class=\"line\">--- 172.17.0.2 ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 1053ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.037/0.038/0.039/0.001 ms</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-16-13-centos ~]# ping 172.17.0.3</span><br><span class=\"line\">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.045 ms</span><br><span class=\"line\">--- 172.17.0.3 ping statistics ---</span><br><span class=\"line\">4 packets transmitted, 4 received, 0% packet loss, time 3079ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.040/0.042/0.045/0.006 ms</span><br></pre></td></tr></table></figure>\n\n<p>容器ng1中启动了默认的nginx站点，可以通过IP直接请求到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://172.17.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker是如何进行网络通信的\"><a href=\"#docker是如何进行网络通信的\" class=\"headerlink\" title=\"docker是如何进行网络通信的?\"></a>docker是如何进行网络通信的?</h2><p> <strong>每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair技术！</strong> </p>\n<p>查看本机网卡发现，每启动一个docker容器，则会生成一个新的网卡信息，网卡信息都是一对一对存在的。</p>\n<p>启动容器均会生成新的网卡信息，删除容器，网卡也会移除，也就是每次启动，IP地址都会新建</p>\n<p><img src=\"/.com//1657876653166.png\" alt=\"1657876653166\"></p>\n<p>Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）；<br>Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。</p>\n<h2 id=\"veth-pair\"><a href=\"#veth-pair\" class=\"headerlink\" title=\"veth-pair\"></a>veth-pair</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://zhuanlan.zhihu.com/p/293659939\">Linux veth pair 详解</a></p>\n<p>veth pair是成对出现的一种虚拟网络设备接口，一端连着网络协议栈，一端彼此相连。</p>\n<p>Veth-pair 不是一个设备，而是一对设备，作为虚拟网线用于连接两个虚拟网络设备。veth pair 是根据<a target=\"_blank\" rel=\"noopener\" href=\"https://so.csdn.net/so/search?q=数据链路层&spm=1001.2101.3001.7020\">数据链路层</a>的 MAC 地址对网络数据包进行转发的过程来实现的，本质是反转通讯数据的方向，需要发送的数据会被转换成需要收到的数据重新送入内核网络层进行处理，从而间接的完成数据的注入。 </p>\n<h2 id=\"容器互联-–link\"><a href=\"#容器互联-–link\" class=\"headerlink\" title=\"容器互联 –link\"></a>容器互联 –link</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动新的容器 ng2 并将它和 ng1 的网络连通</span><br><span class=\"line\">docker run -d -P -it --name ng2 --link ng1 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 即可在容器 ng2 中，直接通过容器名连通容器 ng1</span><br><span class=\"line\">docker exec -it ng2 curl http://ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 但是反过来，却不可以，网络不通</span><br><span class=\"line\">docker exec -it ng1 curl http://ng2</span><br></pre></td></tr></table></figure>\n\n<p>其根本原因在于使用–link命令时，其实是在容器的/etc/hosts中配置了相关的域名映射关系。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看ng2容器的hosts配置</span><br><span class=\"line\"># 发现新增了到ng1的域名配置信息</span><br><span class=\"line\">docker exec -it ng2 cat /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\"># 该配置信息，让ng2内部可以直接通过ng1请求172.17.0.2</span><br><span class=\"line\">172.17.0.2      ng1 d35478a52fd4</span><br><span class=\"line\">172.17.0.4      7e5024e74b30</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看ng1容器的hosts配置</span><br><span class=\"line\"># ng1 中未配置 ng2 的信息，所以无法直接访问</span><br><span class=\"line\">docker exec -it ng1 cat /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      d35478a52fd4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>该种方式相对死板，不够灵活，所以 –link 方式已经不建议使用。更为灵活的方式是自定义docker网络</p>\n</blockquote>\n<h2 id=\"自定义网络docker-network-create\"><a href=\"#自定义网络docker-network-create\" class=\"headerlink\" title=\"自定义网络docker network create\"></a>自定义网络docker network create</h2><p>docker0存在不能通过域名的方式访问、可以通过–link连通但是不够灵活。</p>\n<p>docker提供的网络模式</p>\n<ul>\n<li>bridge 桥接模式</li>\n<li>none 不配置网络</li>\n<li>host 主机模式</li>\n<li></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 你可以自定义一个桥接网络, 默认情况下,会根据docker0的IP自动生成</span><br><span class=\"line\">docker network create -d bridge my-network</span><br><span class=\"line\"></span><br><span class=\"line\">docker network inspect my-network</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;my-network&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2022-07-15T18:19:46.645909571+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 当然可以自己指定子网IP和网关。指定子网IP需要指定网关IP，默认都是x.x.0.1</span><br><span class=\"line\">docker network create -d bridge --subnet=192.168.0.0/16 --getway 192.168.0.1 my-network2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自定义网络-–net\"><a href=\"#使用自定义网络-–net\" class=\"headerlink\" title=\"使用自定义网络 –net\"></a>使用自定义网络 –net</h2><p>启动容器时，使用–net参数指定网络，如果不指定该参数，则默认使用docker0作为网络。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动my-ng1容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker run -d -it --name my-ng1 --net my-network nginx</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class=\"line\">fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动my-ng2容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker run -d -it --name my-ng2 --net my-network nginx</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class=\"line\">71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看新建网络的情况，发现新建的两个容器已经挂载在新建的网络上</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker network inspect my-network</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;my-network&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;89a89f04f757b184d3544373940008b02b7215587fb0d591c87b6f4e5030dd4e&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2022-07-15T18:19:46.645909571+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;</span><br><span class=\"line\">            &quot;71ffcb0a619d81cd36c3283419da543bd23a721d4e84801b877891a5be1d614a&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;my-ng2&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;5e3c6239a7bf550a97963466b74e8829f1523af6d6985b8b46e0da5b74f11332&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;fb9f6921bd53a4522e20b84d35447eaabe316cba9cd9c7cda6faa362b2047d64&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;my-ng1&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;f450e8f8f9ea96aaed2c55e0db93f1cd8962ea9998b3500ca4307f419a76aade&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 my-ng1 容器中，使用容器名称，请求 my-ng2 容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it my-ng1 curl http://my-ng2</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 my-ng2 容器中，使用容器名称，请求 my-ng1 容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it my-ng2 curl http://my-ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">[root@VM-16-13-centos ~]#</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以发现，新建的自定义网络，修复了docker0的缺点，可以通过容器名进行互联。</p>\n<p>这种方式是推荐使用的方式。</p>\n<p>在构建不同的集群时，可以使用不同的网络，用来保证各个集群的网络隔离。</p>\n<h2 id=\"网络连通docker-network-connect\"><a href=\"#网络连通docker-network-connect\" class=\"headerlink\" title=\"网络连通docker network connect\"></a>网络连通docker network connect</h2><p>在基于自定义网络的基础上，如果打通不同自定义网络之间的网络？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将之前创建的docker0网络下的容器 ng1 连接到网络 my-network 上</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker network connect my-network ng1</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看 ng1 的网络情况</span><br><span class=\"line\">docker inspect ng1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1657882812055.png\" alt=\"1657882812055\"></p>\n<p>可以发现 ng1 上被挂载了一个新的网络my-network。就是所谓的”一个容器两个IP地址”。</p>\n<blockquote>\n<p>所以不同网络之间的容器连通，其实是容器和网络进行连通，而不是两个网络进行连通</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试，直接在网络 docker0 中的 ng1 内连接网络 my-network 下的 my-ng1</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it ng1 curl http://my-ng1</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 测试，直接在网络 docker0 中的 ng2 内连接网络 my-network 下的 my-ng1</span><br><span class=\"line\"># 由于ng2并没有打通，所以无法连接成功</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it ng2 curl http://my-ng1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"mysql-数据迁移","toc":true,"sidebar":true,"date":"2021-09-01T06:50:35.000Z","_content":"\n# mysql数据导入导出\n\n简单介绍mysql自带数据备份工具mysqldump和数据导入\n\n\n\n## mysqldump\n\n`mysqldump` 是 `MySQL` 自带的逻辑备份工具。\n\n它的备份原理是通过协议连接到 `MySQL` 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的`insert` 语句，当我们需要还原这些数据时，只要执行这些 `insert` 语句，即可将对应的数据还原。\n\n\n\n`mysqldump`优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。\n\n\n\nmysql 官方文档 [https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 命令格式\n\n```java\nmysqldump [options] db_name [tbl_name ...]\nmysqldump [options] --databases db_name ...\nmysqldump [options] --all-databases\n```\n\n\n\n### 常用选项说明\n\n| 参数名                                                       | 缩写 | 含义                                                         |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ |\n| --host                                                       | -h   | 服务器IP地址                                                 |\n| --port                                                       | -P   | 服务器端口号                                                 |\n| --user                                                       | -u   | MySQL 用户名                                                 |\n| --pasword                                                    | -p   | MySQL 密码                                                   |\n| --databases                                                  |      | 指定要备份的数据库                                           |\n| --all-databases                                              |      | 备份mysql服务器上的所有数据库                                |\n| [`--add-drop-database`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database) |      | 在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句       |\n| [--add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句 |\n| [--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt) |      | --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset 语句的简写。该选项默认启用。 |\n| [--skip-add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句         |\n| [--extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 使用多行 INSERT 语法。输出一条insert语句                     |\n| [--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 关闭--extended-insert。输出多条insert语句                    |\n| --compact                                                    |      | 压缩模式，产生更少的输出                                     |\n| --comments                                                   |      | 添加注释信息                                                 |\n| --complete-insert                                            |      | 输出完成的插入语句                                           |\n| --lock-tables                                                | -l   | 备份前，锁定所有数据库表                                     |\n| --no-create-db/--no-create-info                              |      | 禁止生成创建数据库语句                                       |\n| --no-data                                                    |      | 不写入任何表行信息（即不转储表内容）。如果您只想转储[`CREATE TABLE`](https://dev.mysql.com/doc/refman/5.6/en/create-table.html)表的语句 |\n| --force                                                      |      | 当出现错误时仍然继续备份操作                                 |\n| --default-character-set                                      |      | 指定默认字符集                                               |\n| [--add-locks](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks) |      | 备份数据库表时锁定数据库表。生产环境慎用                     |\n| --where='*`where_condition`*'                                | -w   | 仅转储由给定`WHERE`条件选择的行 。                           |\n| --quick`, `-q                                                | -q   | 一次一行地从服务器检索表的行                                 |\n| [--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction) |      | 在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份        |\n| --skip-opt                                                   |      | 关闭由 --opt 设置的选项。避免锁表备份                        |\n| --result-file                                                | >    | 导出结果输出到文件                                           |\n\n全部选项参见[https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 常见示例\n\n1. 导出所有数据库\n\n该命令会导出mysql中所有的数据库内容，如果你是全表备份，\n\n```mysql\nmysqldump -u用户名 -p密码 --all-databases > ~/all.sql\n```\n\n2. 导出指定数据库\n\n```\nmysqldump -u用户名 -p密码 --databases db1 > ~/db1.sql\n```\n\n该[`--databases`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases)选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，[**mysqldump**](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)将第一个名称视为数据库名称，将后面的名称视为表名称。\n\n3. 导出指定数据库的指定表\n\n```mysql\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF > ~/tableName.sql\n```\n\n4. 导出数据时指定条件--where\n\n```mysql\n# 只导出ID>10的记录\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=\"id>10\" > ~/tableName.sql\n```\n\n\n\n\n\n### 常见问题\n\n#### 避免锁表\n\n默认mysqldump备份会`lock-tables`，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表\n\n##### --single-transaction\n\n[--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction)是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。\n\n##### --skip-opt\n\n由于[--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt)选项默认启用，因此您只需指定其相反的选项 [`--skip-opt`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt)即可关闭几个默认设置。\n\n##### --skip-lock-tables\n\n使用`--opt`选项时，会自动启动`--lock-tables`，如果你不想锁表操作，可以指定`--skip-opt`或者追加`--skip-lock-tables`属性来覆盖它。\n\n\n\n#### 一条记录输出一条insert语句\n\n[--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) 语句可以关闭默认的多行 INSERT 语法。\n\n```mysql\nmysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName > ~/tableName.sql\n```\n\n\n\n#### 转储大表\n\n[--quick](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick) 该选项用于转储大的表。它强制**mysqldump**从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。\n\n\n\n### 导入\n\n#### 重新导入有mysqldump导出的SQL文件\n\n1. 直接通过mysql导入\n\n```shell\n# 如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql\nshell> mysql < dump.sql\n# 如果不存在，在加载转储文件时指定数据库名称\nshell> mysql db1 < dump.sql\n```\n\n2. 使用source命令\n\n进入mysql命令行，使用mysql中的source命令导入\n\n```mysql\nmysql> source dump.sql\n```\n\n如果文件不包含`CREATE_DATABASE`和`USE`语句，需要提前创建数据库\n\n```shell\nshell> mysqladmin create db1\n```\n\n或者\n\n```mysq\nmysql> CREATE DATABASE IF NOT EXISTS db1;\nmysql> USE db1;\nmysql> source dump.sql\n```\n\n\n\n","source":"_posts/mysql-dump-source.md","raw":"---\ntitle: mysql-数据迁移\ntoc: true\nsidebar: true\ndate: 2021-09-01 14:50:35\ntags: \n- mysql\ncategories:\n- mysq\n---\n\n# mysql数据导入导出\n\n简单介绍mysql自带数据备份工具mysqldump和数据导入\n\n\n\n## mysqldump\n\n`mysqldump` 是 `MySQL` 自带的逻辑备份工具。\n\n它的备份原理是通过协议连接到 `MySQL` 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的`insert` 语句，当我们需要还原这些数据时，只要执行这些 `insert` 语句，即可将对应的数据还原。\n\n\n\n`mysqldump`优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。\n\n\n\nmysql 官方文档 [https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 命令格式\n\n```java\nmysqldump [options] db_name [tbl_name ...]\nmysqldump [options] --databases db_name ...\nmysqldump [options] --all-databases\n```\n\n\n\n### 常用选项说明\n\n| 参数名                                                       | 缩写 | 含义                                                         |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ |\n| --host                                                       | -h   | 服务器IP地址                                                 |\n| --port                                                       | -P   | 服务器端口号                                                 |\n| --user                                                       | -u   | MySQL 用户名                                                 |\n| --pasword                                                    | -p   | MySQL 密码                                                   |\n| --databases                                                  |      | 指定要备份的数据库                                           |\n| --all-databases                                              |      | 备份mysql服务器上的所有数据库                                |\n| [`--add-drop-database`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database) |      | 在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句       |\n| [--add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句 |\n| [--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt) |      | --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset 语句的简写。该选项默认启用。 |\n| [--skip-add-drop-table](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table) |      | 不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句         |\n| [--extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 使用多行 INSERT 语法。输出一条insert语句                     |\n| [--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) |      | 关闭--extended-insert。输出多条insert语句                    |\n| --compact                                                    |      | 压缩模式，产生更少的输出                                     |\n| --comments                                                   |      | 添加注释信息                                                 |\n| --complete-insert                                            |      | 输出完成的插入语句                                           |\n| --lock-tables                                                | -l   | 备份前，锁定所有数据库表                                     |\n| --no-create-db/--no-create-info                              |      | 禁止生成创建数据库语句                                       |\n| --no-data                                                    |      | 不写入任何表行信息（即不转储表内容）。如果您只想转储[`CREATE TABLE`](https://dev.mysql.com/doc/refman/5.6/en/create-table.html)表的语句 |\n| --force                                                      |      | 当出现错误时仍然继续备份操作                                 |\n| --default-character-set                                      |      | 指定默认字符集                                               |\n| [--add-locks](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks) |      | 备份数据库表时锁定数据库表。生产环境慎用                     |\n| --where='*`where_condition`*'                                | -w   | 仅转储由给定`WHERE`条件选择的行 。                           |\n| --quick`, `-q                                                | -q   | 一次一行地从服务器检索表的行                                 |\n| [--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction) |      | 在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份        |\n| --skip-opt                                                   |      | 关闭由 --opt 设置的选项。避免锁表备份                        |\n| --result-file                                                | >    | 导出结果输出到文件                                           |\n\n全部选项参见[https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)\n\n\n\n### 常见示例\n\n1. 导出所有数据库\n\n该命令会导出mysql中所有的数据库内容，如果你是全表备份，\n\n```mysql\nmysqldump -u用户名 -p密码 --all-databases > ~/all.sql\n```\n\n2. 导出指定数据库\n\n```\nmysqldump -u用户名 -p密码 --databases db1 > ~/db1.sql\n```\n\n该[`--databases`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases)选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，[**mysqldump**](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html)将第一个名称视为数据库名称，将后面的名称视为表名称。\n\n3. 导出指定数据库的指定表\n\n```mysql\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF > ~/tableName.sql\n```\n\n4. 导出数据时指定条件--where\n\n```mysql\n# 只导出ID>10的记录\nmysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=\"id>10\" > ~/tableName.sql\n```\n\n\n\n\n\n### 常见问题\n\n#### 避免锁表\n\n默认mysqldump备份会`lock-tables`，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表\n\n##### --single-transaction\n\n[--single-transaction](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction)是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。\n\n##### --skip-opt\n\n由于[--opt](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt)选项默认启用，因此您只需指定其相反的选项 [`--skip-opt`](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt)即可关闭几个默认设置。\n\n##### --skip-lock-tables\n\n使用`--opt`选项时，会自动启动`--lock-tables`，如果你不想锁表操作，可以指定`--skip-opt`或者追加`--skip-lock-tables`属性来覆盖它。\n\n\n\n#### 一条记录输出一条insert语句\n\n[--skip-extended-insert](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert) 语句可以关闭默认的多行 INSERT 语法。\n\n```mysql\nmysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName > ~/tableName.sql\n```\n\n\n\n#### 转储大表\n\n[--quick](https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick) 该选项用于转储大的表。它强制**mysqldump**从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。\n\n\n\n### 导入\n\n#### 重新导入有mysqldump导出的SQL文件\n\n1. 直接通过mysql导入\n\n```shell\n# 如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql\nshell> mysql < dump.sql\n# 如果不存在，在加载转储文件时指定数据库名称\nshell> mysql db1 < dump.sql\n```\n\n2. 使用source命令\n\n进入mysql命令行，使用mysql中的source命令导入\n\n```mysql\nmysql> source dump.sql\n```\n\n如果文件不包含`CREATE_DATABASE`和`USE`语句，需要提前创建数据库\n\n```shell\nshell> mysqladmin create db1\n```\n\n或者\n\n```mysq\nmysql> CREATE DATABASE IF NOT EXISTS db1;\nmysql> USE db1;\nmysql> source dump.sql\n```\n\n\n\n","slug":"mysql-dump-source","published":1,"updated":"2021-09-02T05:55:31.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbp000lowgn9j4ped95","content":"<h1 id=\"mysql数据导入导出\"><a href=\"#mysql数据导入导出\" class=\"headerlink\" title=\"mysql数据导入导出\"></a>mysql数据导入导出</h1><p>简单介绍mysql自带数据备份工具mysqldump和数据导入</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p><code>mysqldump</code> 是 <code>MySQL</code> 自带的逻辑备份工具。</p>\n<p>它的备份原理是通过协议连接到 <code>MySQL</code> 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的<code>insert</code> 语句，当我们需要还原这些数据时，只要执行这些 <code>insert</code> 语句，即可将对应的数据还原。</p>\n<p><code>mysqldump</code>优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。</p>\n<p>mysql 官方文档 <a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [options] db_name [tbl_name ...]</span><br><span class=\"line\">mysqldump [options] --databases db_name ...</span><br><span class=\"line\">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用选项说明\"><a href=\"#常用选项说明\" class=\"headerlink\" title=\"常用选项说明\"></a>常用选项说明</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>缩写</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–host</td>\n<td>-h</td>\n<td>服务器IP地址</td>\n</tr>\n<tr>\n<td>–port</td>\n<td>-P</td>\n<td>服务器端口号</td>\n</tr>\n<tr>\n<td>–user</td>\n<td>-u</td>\n<td>MySQL 用户名</td>\n</tr>\n<tr>\n<td>–pasword</td>\n<td>-p</td>\n<td>MySQL 密码</td>\n</tr>\n<tr>\n<td>–databases</td>\n<td></td>\n<td>指定要备份的数据库</td>\n</tr>\n<tr>\n<td>–all-databases</td>\n<td></td>\n<td>备份mysql服务器上的所有数据库</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database\"><code>--add-drop-database</code></a></td>\n<td></td>\n<td>在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–add-drop-table</a></td>\n<td></td>\n<td>在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a></td>\n<td></td>\n<td>–add-drop-table –add-locks –create-options –disable-keys –extended-insert –lock-tables –quick –set-charset 语句的简写。该选项默认启用。</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–skip-add-drop-table</a></td>\n<td></td>\n<td>不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–extended-insert</a></td>\n<td></td>\n<td>使用多行 INSERT 语法。输出一条insert语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a></td>\n<td></td>\n<td>关闭–extended-insert。输出多条insert语句</td>\n</tr>\n<tr>\n<td>–compact</td>\n<td></td>\n<td>压缩模式，产生更少的输出</td>\n</tr>\n<tr>\n<td>–comments</td>\n<td></td>\n<td>添加注释信息</td>\n</tr>\n<tr>\n<td>–complete-insert</td>\n<td></td>\n<td>输出完成的插入语句</td>\n</tr>\n<tr>\n<td>–lock-tables</td>\n<td>-l</td>\n<td>备份前，锁定所有数据库表</td>\n</tr>\n<tr>\n<td>–no-create-db/–no-create-info</td>\n<td></td>\n<td>禁止生成创建数据库语句</td>\n</tr>\n<tr>\n<td>–no-data</td>\n<td></td>\n<td>不写入任何表行信息（即不转储表内容）。如果您只想转储<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/create-table.html\"><code>CREATE TABLE</code></a>表的语句</td>\n</tr>\n<tr>\n<td>–force</td>\n<td></td>\n<td>当出现错误时仍然继续备份操作</td>\n</tr>\n<tr>\n<td>–default-character-set</td>\n<td></td>\n<td>指定默认字符集</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks\">–add-locks</a></td>\n<td></td>\n<td>备份数据库表时锁定数据库表。生产环境慎用</td>\n</tr>\n<tr>\n<td>–where=’<em><code>where_condition</code></em>‘</td>\n<td>-w</td>\n<td>仅转储由给定<code>WHERE</code>条件选择的行 。</td>\n</tr>\n<tr>\n<td>–quick<code>,</code>-q</td>\n<td>-q</td>\n<td>一次一行地从服务器检索表的行</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a></td>\n<td></td>\n<td>在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份</td>\n</tr>\n<tr>\n<td>–skip-opt</td>\n<td></td>\n<td>关闭由 –opt 设置的选项。避免锁表备份</td>\n</tr>\n<tr>\n<td>–result-file</td>\n<td>&gt;</td>\n<td>导出结果输出到文件</td>\n</tr>\n</tbody></table>\n<p>全部选项参见<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"常见示例\"><a href=\"#常见示例\" class=\"headerlink\" title=\"常见示例\"></a>常见示例</h3><ol>\n<li>导出所有数据库</li>\n</ol>\n<p>该命令会导出mysql中所有的数据库内容，如果你是全表备份，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --all-databases &gt; ~/all.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导出指定数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --databases db1 &gt; ~/db1.sql</span><br></pre></td></tr></table></figure>\n\n<p>该<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases\"><code>--databases</code></a>选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\"><strong>mysqldump</strong></a>将第一个名称视为数据库名称，将后面的名称视为表名称。</p>\n<ol start=\"3\">\n<li>导出指定数据库的指定表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>导出数据时指定条件–where</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只导出ID&gt;10的记录</span><br><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=&quot;id&gt;10&quot; &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"避免锁表\"><a href=\"#避免锁表\" class=\"headerlink\" title=\"避免锁表\"></a>避免锁表</h4><p>默认mysqldump备份会<code>lock-tables</code>，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表</p>\n<h5 id=\"–single-transaction\"><a href=\"#–single-transaction\" class=\"headerlink\" title=\"–single-transaction\"></a>–single-transaction</h5><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a>是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。</p>\n<h5 id=\"–skip-opt\"><a href=\"#–skip-opt\" class=\"headerlink\" title=\"–skip-opt\"></a>–skip-opt</h5><p>由于<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a>选项默认启用，因此您只需指定其相反的选项 <a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt\"><code>--skip-opt</code></a>即可关闭几个默认设置。</p>\n<h5 id=\"–skip-lock-tables\"><a href=\"#–skip-lock-tables\" class=\"headerlink\" title=\"–skip-lock-tables\"></a>–skip-lock-tables</h5><p>使用<code>--opt</code>选项时，会自动启动<code>--lock-tables</code>，如果你不想锁表操作，可以指定<code>--skip-opt</code>或者追加<code>--skip-lock-tables</code>属性来覆盖它。</p>\n<h4 id=\"一条记录输出一条insert语句\"><a href=\"#一条记录输出一条insert语句\" class=\"headerlink\" title=\"一条记录输出一条insert语句\"></a>一条记录输出一条insert语句</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a> 语句可以关闭默认的多行 INSERT 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转储大表\"><a href=\"#转储大表\" class=\"headerlink\" title=\"转储大表\"></a>转储大表</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick\">–quick</a> 该选项用于转储大的表。它强制<strong>mysqldump</strong>从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"重新导入有mysqldump导出的SQL文件\"><a href=\"#重新导入有mysqldump导出的SQL文件\" class=\"headerlink\" title=\"重新导入有mysqldump导出的SQL文件\"></a>重新导入有mysqldump导出的SQL文件</h4><ol>\n<li>直接通过mysql导入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql &lt; dump.sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果不存在，在加载转储文件时指定数据库名称</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql db1 &lt; dump.sql</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用source命令</li>\n</ol>\n<p>进入mysql命令行，使用mysql中的source命令导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果文件不包含<code>CREATE_DATABASE</code>和<code>USE</code>语句，需要提前创建数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysqladmin create db1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS db1;</span><br><span class=\"line\">mysql&gt; USE db1;</span><br><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"mysql数据导入导出\"><a href=\"#mysql数据导入导出\" class=\"headerlink\" title=\"mysql数据导入导出\"></a>mysql数据导入导出</h1><p>简单介绍mysql自带数据备份工具mysqldump和数据导入</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p><code>mysqldump</code> 是 <code>MySQL</code> 自带的逻辑备份工具。</p>\n<p>它的备份原理是通过协议连接到 <code>MySQL</code> 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的<code>insert</code> 语句，当我们需要还原这些数据时，只要执行这些 <code>insert</code> 语句，即可将对应的数据还原。</p>\n<p><code>mysqldump</code>优点包括在恢复之前查看甚至编辑输出的便利性和灵活性。您可以克隆用于开发和 DBA 工作的数据库，或生成现有数据库的细微变化以进行测试。它不是用于备份大量数据的快速或可扩展的解决方案。对于大数据量，即使备份步骤花费合理的时间，恢复数据也可能非常缓慢，因为重放 SQL 语句涉及用于插入、索引创建等的磁盘 I/O。</p>\n<p>mysql 官方文档 <a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [options] db_name [tbl_name ...]</span><br><span class=\"line\">mysqldump [options] --databases db_name ...</span><br><span class=\"line\">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用选项说明\"><a href=\"#常用选项说明\" class=\"headerlink\" title=\"常用选项说明\"></a>常用选项说明</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>缩写</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–host</td>\n<td>-h</td>\n<td>服务器IP地址</td>\n</tr>\n<tr>\n<td>–port</td>\n<td>-P</td>\n<td>服务器端口号</td>\n</tr>\n<tr>\n<td>–user</td>\n<td>-u</td>\n<td>MySQL 用户名</td>\n</tr>\n<tr>\n<td>–pasword</td>\n<td>-p</td>\n<td>MySQL 密码</td>\n</tr>\n<tr>\n<td>–databases</td>\n<td></td>\n<td>指定要备份的数据库</td>\n</tr>\n<tr>\n<td>–all-databases</td>\n<td></td>\n<td>备份mysql服务器上的所有数据库</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-database\"><code>--add-drop-database</code></a></td>\n<td></td>\n<td>在每个 CREATE DATABASE 语句之前添加 DROP DATABASE 语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–add-drop-table</a></td>\n<td></td>\n<td>在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句。默认添加drop语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a></td>\n<td></td>\n<td>–add-drop-table –add-locks –create-options –disable-keys –extended-insert –lock-tables –quick –set-charset 语句的简写。该选项默认启用。</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-drop-table\">–skip-add-drop-table</a></td>\n<td></td>\n<td>不要在每个 CREATE TABLE 语句之前添加 DROP TABLE 语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–extended-insert</a></td>\n<td></td>\n<td>使用多行 INSERT 语法。输出一条insert语句</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a></td>\n<td></td>\n<td>关闭–extended-insert。输出多条insert语句</td>\n</tr>\n<tr>\n<td>–compact</td>\n<td></td>\n<td>压缩模式，产生更少的输出</td>\n</tr>\n<tr>\n<td>–comments</td>\n<td></td>\n<td>添加注释信息</td>\n</tr>\n<tr>\n<td>–complete-insert</td>\n<td></td>\n<td>输出完成的插入语句</td>\n</tr>\n<tr>\n<td>–lock-tables</td>\n<td>-l</td>\n<td>备份前，锁定所有数据库表</td>\n</tr>\n<tr>\n<td>–no-create-db/–no-create-info</td>\n<td></td>\n<td>禁止生成创建数据库语句</td>\n</tr>\n<tr>\n<td>–no-data</td>\n<td></td>\n<td>不写入任何表行信息（即不转储表内容）。如果您只想转储<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/create-table.html\"><code>CREATE TABLE</code></a>表的语句</td>\n</tr>\n<tr>\n<td>–force</td>\n<td></td>\n<td>当出现错误时仍然继续备份操作</td>\n</tr>\n<tr>\n<td>–default-character-set</td>\n<td></td>\n<td>指定默认字符集</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_add-locks\">–add-locks</a></td>\n<td></td>\n<td>备份数据库表时锁定数据库表。生产环境慎用</td>\n</tr>\n<tr>\n<td>–where=’<em><code>where_condition</code></em>‘</td>\n<td>-w</td>\n<td>仅转储由给定<code>WHERE</code>条件选择的行 。</td>\n</tr>\n<tr>\n<td>–quick<code>,</code>-q</td>\n<td>-q</td>\n<td>一次一行地从服务器检索表的行</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a></td>\n<td></td>\n<td>在从服务器转储数据之前发出 BEGIN SQL 语句。一致性备份</td>\n</tr>\n<tr>\n<td>–skip-opt</td>\n<td></td>\n<td>关闭由 –opt 设置的选项。避免锁表备份</td>\n</tr>\n<tr>\n<td>–result-file</td>\n<td>&gt;</td>\n<td>导出结果输出到文件</td>\n</tr>\n</tbody></table>\n<p>全部选项参见<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\">https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html</a></p>\n<h3 id=\"常见示例\"><a href=\"#常见示例\" class=\"headerlink\" title=\"常见示例\"></a>常见示例</h3><ol>\n<li>导出所有数据库</li>\n</ol>\n<p>该命令会导出mysql中所有的数据库内容，如果你是全表备份，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --all-databases &gt; ~/all.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导出指定数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --databases db1 &gt; ~/db1.sql</span><br></pre></td></tr></table></figure>\n\n<p>该<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_databases\"><code>--databases</code></a>选项使命令行上的所有名称都被视为数据库名称。如果没有此选项，<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html\"><strong>mysqldump</strong></a>将第一个名称视为数据库名称，将后面的名称视为表名称。</p>\n<ol start=\"3\">\n<li>导出指定数据库的指定表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>导出数据时指定条件–where</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只导出ID&gt;10的记录</span><br><span class=\"line\">mysqldump -u用户名 -p密码 databaseName tableName --single-transaction --set-gtid-purged=OFF --where=&quot;id&gt;10&quot; &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"避免锁表\"><a href=\"#避免锁表\" class=\"headerlink\" title=\"避免锁表\"></a>避免锁表</h4><p>默认mysqldump备份会<code>lock-tables</code>，对于线上服务，锁表会影响线上业务。mysqldump提供了几种方式来避免备份是锁表</p>\n<h5 id=\"–single-transaction\"><a href=\"#–single-transaction\" class=\"headerlink\" title=\"–single-transaction\"></a>–single-transaction</h5><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_single-transaction\">–single-transaction</a>是针对innodb引擎的，备份一致性选项，通过事务来保证数据的一致性。</p>\n<h5 id=\"–skip-opt\"><a href=\"#–skip-opt\" class=\"headerlink\" title=\"–skip-opt\"></a>–skip-opt</h5><p>由于<a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_opt\">–opt</a>选项默认启用，因此您只需指定其相反的选项 <a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_skip-opt\"><code>--skip-opt</code></a>即可关闭几个默认设置。</p>\n<h5 id=\"–skip-lock-tables\"><a href=\"#–skip-lock-tables\" class=\"headerlink\" title=\"–skip-lock-tables\"></a>–skip-lock-tables</h5><p>使用<code>--opt</code>选项时，会自动启动<code>--lock-tables</code>，如果你不想锁表操作，可以指定<code>--skip-opt</code>或者追加<code>--skip-lock-tables</code>属性来覆盖它。</p>\n<h4 id=\"一条记录输出一条insert语句\"><a href=\"#一条记录输出一条insert语句\" class=\"headerlink\" title=\"一条记录输出一条insert语句\"></a>一条记录输出一条insert语句</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_extended-insert\">–skip-extended-insert</a> 语句可以关闭默认的多行 INSERT 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 --single-transaction --quick --set-gtid-purged=OFF --skip-extended-insert databaseName tableName &gt; ~/tableName.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"转储大表\"><a href=\"#转储大表\" class=\"headerlink\" title=\"转储大表\"></a>转储大表</h4><p><a target=\"_blank\" rel=\"noopener\" href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html#option_mysqldump_quick\">–quick</a> 该选项用于转储大的表。它强制<strong>mysqldump</strong>从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"重新导入有mysqldump导出的SQL文件\"><a href=\"#重新导入有mysqldump导出的SQL文件\" class=\"headerlink\" title=\"重新导入有mysqldump导出的SQL文件\"></a>重新导入有mysqldump导出的SQL文件</h4><ol>\n<li>直接通过mysql导入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果dump.sql脚本中包含CREATE_DATABASE和USE语句，可以直接导入sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql &lt; dump.sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果不存在，在加载转储文件时指定数据库名称</span></span><br><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysql db1 &lt; dump.sql</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用source命令</li>\n</ol>\n<p>进入mysql命令行，使用mysql中的source命令导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果文件不包含<code>CREATE_DATABASE</code>和<code>USE</code>语句，需要提前创建数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">shell&gt; </span><span class=\"language-bash\">mysqladmin create db1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS db1;</span><br><span class=\"line\">mysql&gt; USE db1;</span><br><span class=\"line\">mysql&gt; source dump.sql</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"使用Taro开发小程序指南","toc":true,"sidebar":true,"date":"2022-04-16T15:31:14.000Z","_content":"\n**阅读对象**：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。\n\n---\n\n随着小程序的发展，现在主流厂商均有自己的小程序框架，如：`微信`、`京东`、`百度`、`支付宝`、`字节跳动`、`QQ`、`飞书`，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。\n\n目前常见的开发模式有：\n\n1. 针对每一个小程序做单独开发，研发投入成本较大；即原生开发；\n2. 开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的`kbone`；\n3. 使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：`Taro`、`uni-app`；\n\n本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：`Taro`、`WePY` 、`uni-app`、`mpvue`、`chameleon`、`kbone`。那技术栈如何选型？\n\n## 小程序多端框架横向对比\n\n市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。\n\n[小程序框架全面测评（2019-03-12），来自 Taro 官方](https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review)\n[跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金](https://juejin.cn/post/6844904118901817351)\n\n这里需要提的是微信官方推出的[kbone](https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D)，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。\n\n截止目前来看，在小程序开发领域，国内开发者使用最多的应当是`Taro`、`uni-app`、`kbone`。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。\n\n## 如何使用 Taro\n\n如果你不了解[Taro](https://taro-docs.jd.com/taro/docs)，可以在官网了解[https://taro-docs.jd.com/taro/docs](https://taro-docs.jd.com/taro/docs/)。\n\n官方提供了比较详细的教程告知如何初始化 Taro 项目，[Taro 安装及使用](https://taro-docs.jd.com/taro/docs/GETTING-STARTED)，你可以按照[基础教程](https://taro-docs.jd.com/taro/docs/folder)>[进阶教程](https://taro-docs.jd.com/taro/docs/config-detail)的方式进行入门。\n\n当然官方也有入门教程可以参考[Taro 渐进式入门教程](https://taro-docs.jd.com/taro/docs/guide)，看完基本了解如何使用 Taro 了。\n\n其中你需要了解 Taro 的[编译配置](https://taro-docs.jd.com/taro/docs/config)，以及 Taro 如何定义[设计稿及尺寸单位](https://taro-docs.jd.com/taro/docs/size)。\n\n### 编译配置\n\n编译配置存放于项目根目录下的 config 目录中，包含三个文件：\n\n- index.js 是通用配置\n- dev.js 是项目预览时的配置\n- prod.js 是项目打包时的配置\n\n详细的编译配置参数参见[编译配置详情](https://taro-docs.jd.com/taro/docs/config-detail)。按照文档介绍配置项目即可。\n\n其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：\n\n- 微信小程序限制单包大小不得超过 2M，总包不得超过 20M。[微信小程序开发文档-分包加载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n- 支付宝小程序单包大小不得超过 2M，总包不得超过 8M。[支付宝小程序开发文档-分包大小限制](https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6)\n- 字节小程序单包大小不得超过 2M，总包不得超过 16M。[字节小程序开发温暖的-分包简介](https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction)\n\n在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：\n\n- 移除包中的静态资源，改成服务器加载，例如图片上传到 CDN\n- 压缩代码\n\n#### 使用 terser-webpack-plugin 压缩代码\n\n在`/config/dev.js`中添加以下配置\n\n```js\nconst TerserPlugin = require(\"terser-webpack-plugin\");\n\nmodule.exports = {\n  mini: {\n    webpackChain: (chain) => {\n      chain.merge({\n        optimization: {\n          minimize: true,\n          minimizer: [\n            new TerserPlugin({\n              test: [\"common.js\", \"taro.js\", \"vendors.js\", \"app.js\"], // 参与压缩的文件\n            }),\n          ],\n        },\n      });\n    },\n  },\n};\n```\n\n在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。\n\n### 设计稿及尺寸单位\n\nTaro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。\n\n或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读\n[移动开发的设计稿为什么大多数是 750px](https://blog.csdn.net/weixin_45785873/article/details/106948607)。\n[移动端 Web 页面适配浅析](https://www.jianshu.com/p/cf600c2930cb)\n[深入浅出移动端适配（总结版）](https://juejin.cn/post/6844903951012200456#heading-24)\n\n总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。\n\n你需要如下定义\n\n```js\n// /config/index.js\n{\n  designWidth: 750, // 设计稿尺寸\n  deviceRatio: { // 针对不同设计稿尺寸的处理换算规则\n    640: 2.34 / 2,\n    750: 1,\n    828: 1.81 / 2,\n    375: 2 / 1\n  },\n}\n```\n\n如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。\n\n## Vue 的支持\n\nTaro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。\n主要的差别有：\n\n- 事件，使用`@tap`替代`@click`\n- 在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber\n- 无法使用 stopPropagation[阻止滚动穿透](https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F)\n\n> 经过测试，`@tap=\"e => {e.stopPropagation(); handleTapEvent(); }\"` 这种写法可以阻止冒泡\n\n- Taro 中 [ref](https://taro-docs.jd.com/taro/docs/vue-overall#ref) 存在差别，无法获取大大小信息\n- 不支持 `<style scoped>`，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。[#6662](https://github.com/NervJS/taro/issues/6662)。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过`namespace`的方式进行屏蔽。\n- 不支持 vue-router，可以使用官方的[路由](https://taro-docs.jd.com/taro/docs/router)方案\n\n官方列出了一个不能完全兼容 Vue 的情况。参见[其他限制](https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6)\n\n## 如何选择 UI 框架\n\nTaro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。\n\n由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。\n\n### NutUI\n\n[NutUI 3.0](https://nutui.jd.com/#/intro)\n\n京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为[v3.1.18](https://github.com/jdf2e/nutui/releases/tag/v3.1.18)。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。\n\n### taro-ui-vue3\n\n[taro-ui-vue3](https://b2nil.github.io/taro-ui-vue3/)\n\ntaro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。\n\n### Taroify\n\n[Taroify](https://taroify.gitee.io/taroify.com/introduce/)\n\nTaroify 是移动端组件库 [Vant](https://github.com/youzan/vant) 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯[Vant](https://github.com/youzan/vant)进行开发，可以尝试。\n\n### taro-color-ui\n\n[taro-color-ui](https://gengar-666.github.io/taro-color-ui/#/)\n\ncolor-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。\n\n## Taro 物料市场\n\n[Taro 物料市场](https://taro-ext.jd.com/)\n\ntaro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。\n\n### Taro 社区\n\n[Taro 社区](https://taro-club.jd.com/)\n\n可以在社区中查找常见问题的处理方法\n\n## 结束语\n\nTaro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。\n\n借助`kbone`文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。\n","source":"_posts/taro-init-project.md","raw":"---\ntitle: 使用Taro开发小程序指南\ntoc: true\nsidebar: true\ndate: 2022-04-16 23:31:14\ntags:\n  - taro\n  - wechat\n  - miniprograme\ncategories:\n  - taro\n---\n\n**阅读对象**：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。\n\n---\n\n随着小程序的发展，现在主流厂商均有自己的小程序框架，如：`微信`、`京东`、`百度`、`支付宝`、`字节跳动`、`QQ`、`飞书`，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。\n\n目前常见的开发模式有：\n\n1. 针对每一个小程序做单独开发，研发投入成本较大；即原生开发；\n2. 开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的`kbone`；\n3. 使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：`Taro`、`uni-app`；\n\n本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：`Taro`、`WePY` 、`uni-app`、`mpvue`、`chameleon`、`kbone`。那技术栈如何选型？\n\n## 小程序多端框架横向对比\n\n市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。\n\n[小程序框架全面测评（2019-03-12），来自 Taro 官方](https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review)\n[跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金](https://juejin.cn/post/6844904118901817351)\n\n这里需要提的是微信官方推出的[kbone](https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D)，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。\n\n截止目前来看，在小程序开发领域，国内开发者使用最多的应当是`Taro`、`uni-app`、`kbone`。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。\n\n## 如何使用 Taro\n\n如果你不了解[Taro](https://taro-docs.jd.com/taro/docs)，可以在官网了解[https://taro-docs.jd.com/taro/docs](https://taro-docs.jd.com/taro/docs/)。\n\n官方提供了比较详细的教程告知如何初始化 Taro 项目，[Taro 安装及使用](https://taro-docs.jd.com/taro/docs/GETTING-STARTED)，你可以按照[基础教程](https://taro-docs.jd.com/taro/docs/folder)>[进阶教程](https://taro-docs.jd.com/taro/docs/config-detail)的方式进行入门。\n\n当然官方也有入门教程可以参考[Taro 渐进式入门教程](https://taro-docs.jd.com/taro/docs/guide)，看完基本了解如何使用 Taro 了。\n\n其中你需要了解 Taro 的[编译配置](https://taro-docs.jd.com/taro/docs/config)，以及 Taro 如何定义[设计稿及尺寸单位](https://taro-docs.jd.com/taro/docs/size)。\n\n### 编译配置\n\n编译配置存放于项目根目录下的 config 目录中，包含三个文件：\n\n- index.js 是通用配置\n- dev.js 是项目预览时的配置\n- prod.js 是项目打包时的配置\n\n详细的编译配置参数参见[编译配置详情](https://taro-docs.jd.com/taro/docs/config-detail)。按照文档介绍配置项目即可。\n\n其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：\n\n- 微信小程序限制单包大小不得超过 2M，总包不得超过 20M。[微信小程序开发文档-分包加载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n- 支付宝小程序单包大小不得超过 2M，总包不得超过 8M。[支付宝小程序开发文档-分包大小限制](https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6)\n- 字节小程序单包大小不得超过 2M，总包不得超过 16M。[字节小程序开发温暖的-分包简介](https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction)\n\n在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：\n\n- 移除包中的静态资源，改成服务器加载，例如图片上传到 CDN\n- 压缩代码\n\n#### 使用 terser-webpack-plugin 压缩代码\n\n在`/config/dev.js`中添加以下配置\n\n```js\nconst TerserPlugin = require(\"terser-webpack-plugin\");\n\nmodule.exports = {\n  mini: {\n    webpackChain: (chain) => {\n      chain.merge({\n        optimization: {\n          minimize: true,\n          minimizer: [\n            new TerserPlugin({\n              test: [\"common.js\", \"taro.js\", \"vendors.js\", \"app.js\"], // 参与压缩的文件\n            }),\n          ],\n        },\n      });\n    },\n  },\n};\n```\n\n在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。\n\n### 设计稿及尺寸单位\n\nTaro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。\n\n或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读\n[移动开发的设计稿为什么大多数是 750px](https://blog.csdn.net/weixin_45785873/article/details/106948607)。\n[移动端 Web 页面适配浅析](https://www.jianshu.com/p/cf600c2930cb)\n[深入浅出移动端适配（总结版）](https://juejin.cn/post/6844903951012200456#heading-24)\n\n总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。\n\n你需要如下定义\n\n```js\n// /config/index.js\n{\n  designWidth: 750, // 设计稿尺寸\n  deviceRatio: { // 针对不同设计稿尺寸的处理换算规则\n    640: 2.34 / 2,\n    750: 1,\n    828: 1.81 / 2,\n    375: 2 / 1\n  },\n}\n```\n\n如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。\n\n## Vue 的支持\n\nTaro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。\n主要的差别有：\n\n- 事件，使用`@tap`替代`@click`\n- 在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber\n- 无法使用 stopPropagation[阻止滚动穿透](https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F)\n\n> 经过测试，`@tap=\"e => {e.stopPropagation(); handleTapEvent(); }\"` 这种写法可以阻止冒泡\n\n- Taro 中 [ref](https://taro-docs.jd.com/taro/docs/vue-overall#ref) 存在差别，无法获取大大小信息\n- 不支持 `<style scoped>`，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。[#6662](https://github.com/NervJS/taro/issues/6662)。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过`namespace`的方式进行屏蔽。\n- 不支持 vue-router，可以使用官方的[路由](https://taro-docs.jd.com/taro/docs/router)方案\n\n官方列出了一个不能完全兼容 Vue 的情况。参见[其他限制](https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6)\n\n## 如何选择 UI 框架\n\nTaro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。\n\n由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。\n\n### NutUI\n\n[NutUI 3.0](https://nutui.jd.com/#/intro)\n\n京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为[v3.1.18](https://github.com/jdf2e/nutui/releases/tag/v3.1.18)。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。\n\n### taro-ui-vue3\n\n[taro-ui-vue3](https://b2nil.github.io/taro-ui-vue3/)\n\ntaro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。\n\n### Taroify\n\n[Taroify](https://taroify.gitee.io/taroify.com/introduce/)\n\nTaroify 是移动端组件库 [Vant](https://github.com/youzan/vant) 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯[Vant](https://github.com/youzan/vant)进行开发，可以尝试。\n\n### taro-color-ui\n\n[taro-color-ui](https://gengar-666.github.io/taro-color-ui/#/)\n\ncolor-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。\n\n## Taro 物料市场\n\n[Taro 物料市场](https://taro-ext.jd.com/)\n\ntaro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。\n\n### Taro 社区\n\n[Taro 社区](https://taro-club.jd.com/)\n\n可以在社区中查找常见问题的处理方法\n\n## 结束语\n\nTaro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。\n\n借助`kbone`文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。\n","slug":"taro-init-project","published":1,"updated":"2022-07-15T01:57:01.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbx001fowgnb2dt85fx","content":"<p><strong>阅读对象</strong>：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。</p>\n<hr>\n<p>随着小程序的发展，现在主流厂商均有自己的小程序框架，如：<code>微信</code>、<code>京东</code>、<code>百度</code>、<code>支付宝</code>、<code>字节跳动</code>、<code>QQ</code>、<code>飞书</code>，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。</p>\n<p>目前常见的开发模式有：</p>\n<ol>\n<li>针对每一个小程序做单独开发，研发投入成本较大；即原生开发；</li>\n<li>开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的<code>kbone</code>；</li>\n<li>使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：<code>Taro</code>、<code>uni-app</code>；</li>\n</ol>\n<p>本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：<code>Taro</code>、<code>WePY</code> 、<code>uni-app</code>、<code>mpvue</code>、<code>chameleon</code>、<code>kbone</code>。那技术栈如何选型？</p>\n<h2 id=\"小程序多端框架横向对比\"><a href=\"#小程序多端框架横向对比\" class=\"headerlink\" title=\"小程序多端框架横向对比\"></a>小程序多端框架横向对比</h2><p>市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。</p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review\">小程序框架全面测评（2019-03-12），来自 Taro 官方</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://juejin.cn/post/6844904118901817351\">跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金</a></p>\n<p>这里需要提的是微信官方推出的<a target=\"_blank\" rel=\"noopener\" href=\"https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D\">kbone</a>，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。</p>\n<p>截止目前来看，在小程序开发领域，国内开发者使用最多的应当是<code>Taro</code>、<code>uni-app</code>、<code>kbone</code>。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。</p>\n<h2 id=\"如何使用-Taro\"><a href=\"#如何使用-Taro\" class=\"headerlink\" title=\"如何使用 Taro\"></a>如何使用 Taro</h2><p>如果你不了解<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs\">Taro</a>，可以在官网了解<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/\">https://taro-docs.jd.com/taro/docs</a>。</p>\n<p>官方提供了比较详细的教程告知如何初始化 Taro 项目，<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/GETTING-STARTED\">Taro 安装及使用</a>，你可以按照<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/folder\">基础教程</a>&gt;<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config-detail\">进阶教程</a>的方式进行入门。</p>\n<p>当然官方也有入门教程可以参考<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/guide\">Taro 渐进式入门教程</a>，看完基本了解如何使用 Taro 了。</p>\n<p>其中你需要了解 Taro 的<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config\">编译配置</a>，以及 Taro 如何定义<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/size\">设计稿及尺寸单位</a>。</p>\n<h3 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h3><p>编译配置存放于项目根目录下的 config 目录中，包含三个文件：</p>\n<ul>\n<li>index.js 是通用配置</li>\n<li>dev.js 是项目预览时的配置</li>\n<li>prod.js 是项目打包时的配置</li>\n</ul>\n<p>详细的编译配置参数参见<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config-detail\">编译配置详情</a>。按照文档介绍配置项目即可。</p>\n<p>其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：</p>\n<ul>\n<li>微信小程序限制单包大小不得超过 2M，总包不得超过 20M。<a target=\"_blank\" rel=\"noopener\" href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\">微信小程序开发文档-分包加载</a></li>\n<li>支付宝小程序单包大小不得超过 2M，总包不得超过 8M。<a target=\"_blank\" rel=\"noopener\" href=\"https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6\">支付宝小程序开发文档-分包大小限制</a></li>\n<li>字节小程序单包大小不得超过 2M，总包不得超过 16M。<a target=\"_blank\" rel=\"noopener\" href=\"https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction\">字节小程序开发温暖的-分包简介</a></li>\n</ul>\n<p>在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：</p>\n<ul>\n<li>移除包中的静态资源，改成服务器加载，例如图片上传到 CDN</li>\n<li>压缩代码</li>\n</ul>\n<h4 id=\"使用-terser-webpack-plugin-压缩代码\"><a href=\"#使用-terser-webpack-plugin-压缩代码\" class=\"headerlink\" title=\"使用 terser-webpack-plugin 压缩代码\"></a>使用 terser-webpack-plugin 压缩代码</h4><p>在<code>/config/dev.js</code>中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mini</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">webpackChain</span>: <span class=\"function\">(<span class=\"params\">chain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      chain.<span class=\"title function_\">merge</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">test</span>: [<span class=\"string\">&quot;common.js&quot;</span>, <span class=\"string\">&quot;taro.js&quot;</span>, <span class=\"string\">&quot;vendors.js&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>], <span class=\"comment\">// 参与压缩的文件</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。</p>\n<h3 id=\"设计稿及尺寸单位\"><a href=\"#设计稿及尺寸单位\" class=\"headerlink\" title=\"设计稿及尺寸单位\"></a>设计稿及尺寸单位</h3><p>Taro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。</p>\n<p>或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读<br><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/weixin_45785873/article/details/106948607\">移动开发的设计稿为什么大多数是 750px</a>。<br><a target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/cf600c2930cb\">移动端 Web 页面适配浅析</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://juejin.cn/post/6844903951012200456#heading-24\">深入浅出移动端适配（总结版）</a></p>\n<p>总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。</p>\n<p>你需要如下定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /config/index.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">designWidth</span>: <span class=\"number\">750</span>, <span class=\"comment\">// 设计稿尺寸</span></span><br><span class=\"line\">  <span class=\"attr\">deviceRatio</span>: &#123; <span class=\"comment\">// 针对不同设计稿尺寸的处理换算规则</span></span><br><span class=\"line\">    <span class=\"number\">640</span>: <span class=\"number\">2.34</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">750</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">828</span>: <span class=\"number\">1.81</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">375</span>: <span class=\"number\">2</span> / <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。</p>\n<h2 id=\"Vue-的支持\"><a href=\"#Vue-的支持\" class=\"headerlink\" title=\"Vue 的支持\"></a>Vue 的支持</h2><p>Taro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。<br>主要的差别有：</p>\n<ul>\n<li>事件，使用<code>@tap</code>替代<code>@click</code></li>\n<li>在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber</li>\n<li>无法使用 stopPropagation<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F\">阻止滚动穿透</a></li>\n</ul>\n<blockquote>\n<p>经过测试，<code>@tap=&quot;e =&gt; &#123;e.stopPropagation(); handleTapEvent(); &#125;&quot;</code> 这种写法可以阻止冒泡</p>\n</blockquote>\n<ul>\n<li>Taro 中 <a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue-overall#ref\">ref</a> 存在差别，无法获取大大小信息</li>\n<li>不支持 <code>&lt;style scoped&gt;</code>，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/NervJS/taro/issues/6662\">#6662</a>。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过<code>namespace</code>的方式进行屏蔽。</li>\n<li>不支持 vue-router，可以使用官方的<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/router\">路由</a>方案</li>\n</ul>\n<p>官方列出了一个不能完全兼容 Vue 的情况。参见<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6\">其他限制</a></p>\n<h2 id=\"如何选择-UI-框架\"><a href=\"#如何选择-UI-框架\" class=\"headerlink\" title=\"如何选择 UI 框架\"></a>如何选择 UI 框架</h2><p>Taro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。</p>\n<p>由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。</p>\n<h3 id=\"NutUI\"><a href=\"#NutUI\" class=\"headerlink\" title=\"NutUI\"></a>NutUI</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://nutui.jd.com/#/intro\">NutUI 3.0</a></p>\n<p>京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jdf2e/nutui/releases/tag/v3.1.18\">v3.1.18</a>。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。</p>\n<h3 id=\"taro-ui-vue3\"><a href=\"#taro-ui-vue3\" class=\"headerlink\" title=\"taro-ui-vue3\"></a>taro-ui-vue3</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://b2nil.github.io/taro-ui-vue3/\">taro-ui-vue3</a></p>\n<p>taro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。</p>\n<h3 id=\"Taroify\"><a href=\"#Taroify\" class=\"headerlink\" title=\"Taroify\"></a>Taroify</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taroify.gitee.io/taroify.com/introduce/\">Taroify</a></p>\n<p>Taroify 是移动端组件库 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/youzan/vant\">Vant</a> 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/youzan/vant\">Vant</a>进行开发，可以尝试。</p>\n<h3 id=\"taro-color-ui\"><a href=\"#taro-color-ui\" class=\"headerlink\" title=\"taro-color-ui\"></a>taro-color-ui</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://gengar-666.github.io/taro-color-ui/#/\">taro-color-ui</a></p>\n<p>color-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。</p>\n<h2 id=\"Taro-物料市场\"><a href=\"#Taro-物料市场\" class=\"headerlink\" title=\"Taro 物料市场\"></a>Taro 物料市场</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-ext.jd.com/\">Taro 物料市场</a></p>\n<p>taro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。</p>\n<h3 id=\"Taro-社区\"><a href=\"#Taro-社区\" class=\"headerlink\" title=\"Taro 社区\"></a>Taro 社区</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-club.jd.com/\">Taro 社区</a></p>\n<p>可以在社区中查找常见问题的处理方法</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Taro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。</p>\n<p>借助<code>kbone</code>文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><strong>阅读对象</strong>：首先需要阐明本文的受众是哪些人。因为文章只是罗列了一些 Taro 的资源，并未对实际的开发提供很多建议和深度的讲解，本文在编写之初，就默认你对小程序的开发有一定的了解，踩过一些坑，想换一种方式开发小程序，刚好你了解到 Taro，那本文对你是有价值的，方便你去找到一些和 Taro 相关的资料，加速入门。</p>\n<hr>\n<p>随着小程序的发展，现在主流厂商均有自己的小程序框架，如：<code>微信</code>、<code>京东</code>、<code>百度</code>、<code>支付宝</code>、<code>字节跳动</code>、<code>QQ</code>、<code>飞书</code>，虽然各端小程序开发遵循了微信小程序的开发模式，但是各家小程序又包含自己的特殊，并不能完全对齐。这导致同一套功能开发，需要兼容小程序以及 H5。</p>\n<p>目前常见的开发模式有：</p>\n<ol>\n<li>针对每一个小程序做单独开发，研发投入成本较大；即原生开发；</li>\n<li>开发 H5 版本的代码，利用小程序的 webview 加载 H5 的页面，从而屏蔽适配各家小程序的繁琐过程。例如微信的<code>kbone</code>；</li>\n<li>使用多端开发框架，编写一套代码，通过框架编译成各家小程序代码；如：<code>Taro</code>、<code>uni-app</code>；</li>\n</ol>\n<p>本文介绍第三种开发模式，采用多端框架来开发小程序。市面上多端框架较多，如：<code>Taro</code>、<code>WePY</code> 、<code>uni-app</code>、<code>mpvue</code>、<code>chameleon</code>、<code>kbone</code>。那技术栈如何选型？</p>\n<h2 id=\"小程序多端框架横向对比\"><a href=\"#小程序多端框架横向对比\" class=\"headerlink\" title=\"小程序多端框架横向对比\"></a>小程序多端框架横向对比</h2><p>市面上已经存在众多大牛对现存的小程序多端框架进行评测。这里给出几个比较好的评测文章。</p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/blog/2019-03-12-mini-program-framework-full-review\">小程序框架全面测评（2019-03-12），来自 Taro 官方</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://juejin.cn/post/6844904118901817351\">跨端开发框架深度横评之 2020 版（2020-04-09），来自 uni-app 官方，掘金</a></p>\n<p>这里需要提的是微信官方推出的<a target=\"_blank\" rel=\"noopener\" href=\"https://wechat-miniprogram.github.io/kbone/docs/#%E4%BB%8B%E7%BB%8D\">kbone</a>，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动便可运行在小程序里。如果你只需要支持微信小程序和 H5，毕竟是微信官方推出的，可以关注下这个解决方案。</p>\n<p>截止目前来看，在小程序开发领域，国内开发者使用最多的应当是<code>Taro</code>、<code>uni-app</code>、<code>kbone</code>。其他开发框架已经逐渐被遗弃。就各家投入来看，各框架的版本迭代和修复 BUG 的效率都很不错，公司均有专门的团队。所以在采坑方面，目前不用太担心，出现问题官方修复速度都不错。</p>\n<h2 id=\"如何使用-Taro\"><a href=\"#如何使用-Taro\" class=\"headerlink\" title=\"如何使用 Taro\"></a>如何使用 Taro</h2><p>如果你不了解<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs\">Taro</a>，可以在官网了解<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/\">https://taro-docs.jd.com/taro/docs</a>。</p>\n<p>官方提供了比较详细的教程告知如何初始化 Taro 项目，<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/GETTING-STARTED\">Taro 安装及使用</a>，你可以按照<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/folder\">基础教程</a>&gt;<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config-detail\">进阶教程</a>的方式进行入门。</p>\n<p>当然官方也有入门教程可以参考<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/guide\">Taro 渐进式入门教程</a>，看完基本了解如何使用 Taro 了。</p>\n<p>其中你需要了解 Taro 的<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config\">编译配置</a>，以及 Taro 如何定义<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/size\">设计稿及尺寸单位</a>。</p>\n<h3 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h3><p>编译配置存放于项目根目录下的 config 目录中，包含三个文件：</p>\n<ul>\n<li>index.js 是通用配置</li>\n<li>dev.js 是项目预览时的配置</li>\n<li>prod.js 是项目打包时的配置</li>\n</ul>\n<p>详细的编译配置参数参见<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/config-detail\">编译配置详情</a>。按照文档介绍配置项目即可。</p>\n<p>其中需要说明的是，此处的配置是针对 Trao 的编译打包行为进行的配置。在小程序开发中，各大平台通常会对小程序的包大小进行限制。例如：</p>\n<ul>\n<li>微信小程序限制单包大小不得超过 2M，总包不得超过 20M。<a target=\"_blank\" rel=\"noopener\" href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\">微信小程序开发文档-分包加载</a></li>\n<li>支付宝小程序单包大小不得超过 2M，总包不得超过 8M。<a target=\"_blank\" rel=\"noopener\" href=\"https://opendocs.alipay.com/mini/framework/subpackages#%E5%88%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6\">支付宝小程序开发文档-分包大小限制</a></li>\n<li>字节小程序单包大小不得超过 2M，总包不得超过 16M。<a target=\"_blank\" rel=\"noopener\" href=\"https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/subpackages/introduction\">字节小程序开发温暖的-分包简介</a></li>\n</ul>\n<p>在这种情况下，Taro 编译完成后，主包很容易就会超过 2M 的限制。常见的方式是：</p>\n<ul>\n<li>移除包中的静态资源，改成服务器加载，例如图片上传到 CDN</li>\n<li>压缩代码</li>\n</ul>\n<h4 id=\"使用-terser-webpack-plugin-压缩代码\"><a href=\"#使用-terser-webpack-plugin-压缩代码\" class=\"headerlink\" title=\"使用 terser-webpack-plugin 压缩代码\"></a>使用 terser-webpack-plugin 压缩代码</h4><p>在<code>/config/dev.js</code>中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mini</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">webpackChain</span>: <span class=\"function\">(<span class=\"params\">chain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      chain.<span class=\"title function_\">merge</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">test</span>: [<span class=\"string\">&quot;common.js&quot;</span>, <span class=\"string\">&quot;taro.js&quot;</span>, <span class=\"string\">&quot;vendors.js&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>], <span class=\"comment\">// 参与压缩的文件</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 Taro 编译的过程中，还需要一个配置文件，用来告诉 Taro，编译成各端小程序，需要依照何种规则进行编译。</p>\n<h3 id=\"设计稿及尺寸单位\"><a href=\"#设计稿及尺寸单位\" class=\"headerlink\" title=\"设计稿及尺寸单位\"></a>设计稿及尺寸单位</h3><p>Taro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置。所以在项目设计之初，最好和设计人员确认，以 Iphon6 作为标准尺寸进行设计。</p>\n<p>或许你会好奇，为何移动端会以 750px 作为设计标准，你可以阅读<br><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/weixin_45785873/article/details/106948607\">移动开发的设计稿为什么大多数是 750px</a>。<br><a target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/cf600c2930cb\">移动端 Web 页面适配浅析</a><br><a target=\"_blank\" rel=\"noopener\" href=\"https://juejin.cn/post/6844903951012200456#heading-24\">深入浅出移动端适配（总结版）</a></p>\n<p>总之，移动端开发在单位处理上是个大坑，但是好在 Taro 帮我们处理了这些问题，你只需要根据设计稿标注的尺寸进行代码编写即可。即从设计稿上量的长度 100px，那么尺寸书写就是 100px，当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。这一切都是透明的。</p>\n<p>你需要如下定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /config/index.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">designWidth</span>: <span class=\"number\">750</span>, <span class=\"comment\">// 设计稿尺寸</span></span><br><span class=\"line\">  <span class=\"attr\">deviceRatio</span>: &#123; <span class=\"comment\">// 针对不同设计稿尺寸的处理换算规则</span></span><br><span class=\"line\">    <span class=\"number\">640</span>: <span class=\"number\">2.34</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">750</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">828</span>: <span class=\"number\">1.81</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">375</span>: <span class=\"number\">2</span> / <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不希望转码单位，可以大写字母的 Px 或 PX 这会被 Taro 会被忽略。</p>\n<h2 id=\"Vue-的支持\"><a href=\"#Vue-的支持\" class=\"headerlink\" title=\"Vue 的支持\"></a>Vue 的支持</h2><p>Taro 支持使用 Vue/Vue3 的语法开发，但是并不是完全支持。<br>主要的差别有：</p>\n<ul>\n<li>事件，使用<code>@tap</code>替代<code>@click</code></li>\n<li>在 Vue 中使用 jsx 时，事件名称的首字母需要大写，例如 onGetphonenumber</li>\n<li>无法使用 stopPropagation<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue-overall#%E9%98%BB%E6%AD%A2%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F\">阻止滚动穿透</a></li>\n</ul>\n<blockquote>\n<p>经过测试，<code>@tap=&quot;e =&gt; &#123;e.stopPropagation(); handleTapEvent(); &#125;&quot;</code> 这种写法可以阻止冒泡</p>\n</blockquote>\n<ul>\n<li>Taro 中 <a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue-overall#ref\">ref</a> 存在差别，无法获取大大小信息</li>\n<li>不支持 <code>&lt;style scoped&gt;</code>，需要保证各个页面定义的样式不会相互影响，官方建议使用 cssModules 代替。<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/NervJS/taro/issues/6662\">#6662</a>。简单的方式可以使用 scss，每个页面均定义一个和页面同名的 css 父类，该页面的所有样式均写在该样式内，通过<code>namespace</code>的方式进行屏蔽。</li>\n<li>不支持 vue-router，可以使用官方的<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/router\">路由</a>方案</li>\n</ul>\n<p>官方列出了一个不能完全兼容 Vue 的情况。参见<a target=\"_blank\" rel=\"noopener\" href=\"https://taro-docs.jd.com/taro/docs/vue3#%E5%85%B6%E5%AE%83%E9%99%90%E5%88%B6\">其他限制</a></p>\n<h2 id=\"如何选择-UI-框架\"><a href=\"#如何选择-UI-框架\" class=\"headerlink\" title=\"如何选择 UI 框架\"></a>如何选择 UI 框架</h2><p>Taro 内置封装了小程序提供的原生组件功能，你可以使用 Taro 的方式调用原生组件。</p>\n<p>由于 Taro 的工作原理，导致 web 的生态无法在 taro 中完全使用，需要针对 Taro 做定制化开发。UI 也是，好在现在有比较优秀的第三方的 UI 框架可以选择。</p>\n<h3 id=\"NutUI\"><a href=\"#NutUI\" class=\"headerlink\" title=\"NutUI\"></a>NutUI</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://nutui.jd.com/#/intro\">NutUI 3.0</a></p>\n<p>京东官方出品的 UI 框架，截止 2022 年 4 月 17 号，最新版本为<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jdf2e/nutui/releases/tag/v3.1.18\">v3.1.18</a>。UI 风格是京东商城的风格，支持自定义主题，组件丰富，有很多商城特有组件，例如地址，商品卡片等，问题解决速度很快。</p>\n<h3 id=\"taro-ui-vue3\"><a href=\"#taro-ui-vue3\" class=\"headerlink\" title=\"taro-ui-vue3\"></a>taro-ui-vue3</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://b2nil.github.io/taro-ui-vue3/\">taro-ui-vue3</a></p>\n<p>taro-ui-vue3 是一款基于 Taro 框架开发, 并采用 Vue 3.0 重写的 Taro UI 组件库。组件功能丰富，常用开发均可以支持。</p>\n<h3 id=\"Taroify\"><a href=\"#Taroify\" class=\"headerlink\" title=\"Taroify\"></a>Taroify</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taroify.gitee.io/taroify.com/introduce/\">Taroify</a></p>\n<p>Taroify 是移动端组件库 <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/youzan/vant\">Vant</a> 的 Taro React 版本，两者基于相同的视觉规范，提供近似一致的 API 接口，助力开发者快速搭建小程序应用。如果你之前习惯<a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/youzan/vant\">Vant</a>进行开发，可以尝试。</p>\n<h3 id=\"taro-color-ui\"><a href=\"#taro-color-ui\" class=\"headerlink\" title=\"taro-color-ui\"></a>taro-color-ui</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://gengar-666.github.io/taro-color-ui/#/\">taro-color-ui</a></p>\n<p>color-ui 是之前使用经验就是需要下载官方的 demo 进行魔改，虽然很好看但是不是很方便，taro 版本提供了简单的方式使用，非大团队支持，完善度还有待提升。尝鲜可以使用，可以应付常见开发需求。</p>\n<h2 id=\"Taro-物料市场\"><a href=\"#Taro-物料市场\" class=\"headerlink\" title=\"Taro 物料市场\"></a>Taro 物料市场</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-ext.jd.com/\">Taro 物料市场</a></p>\n<p>taro 为了丰富生态，创建的物料市场，你可以在市场中找到一些现有的解决方法，目前内容不是很多，现有工具如果出现问题，需要自己下载源码进行魔改。</p>\n<h3 id=\"Taro-社区\"><a href=\"#Taro-社区\" class=\"headerlink\" title=\"Taro 社区\"></a>Taro 社区</h3><p><a target=\"_blank\" rel=\"noopener\" href=\"https://taro-club.jd.com/\">Taro 社区</a></p>\n<p>可以在社区中查找常见问题的处理方法</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Taro 最为目前比较优秀的解决方法，虽然有其不足之处，但也为小程序的开发提供了一种新的开发体验。</p>\n<p>借助<code>kbone</code>文档的一句话来说，每个方案都有自己的优劣，不存在能够完美解决所有问题的方案。但是，在特定的需求下，选择自己合适的方案，会让开发效率成倍的提升。</p>\n"},{"title":"2019 年终总结和反思","toc":true,"sidebar":true,"date":"2019-12-12T05:08:06.000Z","password":3597,"_content":"\n### 2019 年终总结和反思\n\n2019，毕业后踏入工作完完整整的第一年。\n\n这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。\n\n这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。\n\n#### 为什么会这么忙\n\n从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。\n\n1. 临时的任务不断的导致里程碑的变更\n2. 代码质量不高，不断的在修复BUG、修复BUG\n\n忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。\n\n#### 为什么BUG会这么多\n\n这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。\n\n1. 开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；\n2. 开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；\n3. 前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；\n4. 除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。\n\n#### 为什么之前没想过改变\n\n为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。\n\n\n\n\n\n","source":"_posts/summary-and-relection-in-2019.md","raw":"---\ntitle: 2019 年终总结和反思\ntoc: true\nsidebar: true\ndate: 2019-12-12 13:08:06\ntags:\n- 个人\n\ncategories:\n- 个人\n\npassword: 3597\n---\n\n### 2019 年终总结和反思\n\n2019，毕业后踏入工作完完整整的第一年。\n\n这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。\n\n这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。\n\n#### 为什么会这么忙\n\n从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。\n\n1. 临时的任务不断的导致里程碑的变更\n2. 代码质量不高，不断的在修复BUG、修复BUG\n\n忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。\n\n#### 为什么BUG会这么多\n\n这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。\n\n1. 开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；\n2. 开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；\n3. 前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；\n4. 除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。\n\n#### 为什么之前没想过改变\n\n为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。\n\n\n\n\n\n","slug":"summary-and-relection-in-2019","published":1,"updated":"2021-09-01T06:29:03.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjbz001gowgnhmf329j5","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"密码错误，请重试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">继续阅读请输入密码！</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c918340635d8f659456bf063fc7176b0ae0554fd7365a4d01d6fedd08cf4fb83\"></script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"这是一篇私密文章！","more":"这是一篇私密文章！","origin":"<h3 id=\"2019-年终总结和反思\"><a href=\"#2019-年终总结和反思\" class=\"headerlink\" title=\"2019 年终总结和反思\"></a>2019 年终总结和反思</h3><p>2019，毕业后踏入工作完完整整的第一年。</p>\n<p>这一年如果说要总结，脑海中想到的第一个词就是 ——  忙碌！从年中开始就不断的为了项目的上线而加班，经常出现临时性的任务需要去完成，9月份14个工作日的时候，加班时长合计在一起就有11天，这个月，应该算是全年最疯狂的一个月了。本以为这样的辛苦会换来比较好的成绩，可是结果是，直到12月份，还是没有拿到测试部门的测试报告，经过两轮的提测被被驳回，项目上线仍然是个未知数，就在今天，12月18日，第三次提测中。</p>\n<p>这一年如果说要总结，让我想到的第一句话就是 —— 最可怕的工作就是让你忙到没有时间去成长！19年年初定下的各种计划，几乎没有完成一件。计划着说要去学吉他🎸，结果是廉价的吉他落满了灰；计划着要去考软考，结果是19年错过了报名，复习资料也没有看过几页；计划着学习些前沿的前端技术，结果是还是只会用脚手架搭搭框架；计划着学习移动端开发，结果Flutter只安装了环境、Dart只学习了基本语法，连一个像样的项目都没有搭建起来过。回顾这一年，在技术上几乎没有任何的提升。这一年，是淹没在重复工作中的一年。</p>\n<h4 id=\"为什么会这么忙\"><a href=\"#为什么会这么忙\" class=\"headerlink\" title=\"为什么会这么忙\"></a>为什么会这么忙</h4><p>从客观的角度来看，这一年的工作产出其实并不高，项目中的主体功能并没有实现多少，核心流程是在上半年就开发完成的，下半年的主要工作就是在完成各种临时的任务和修复BUG。大概原因可以总结为两点。</p>\n<ol>\n<li>临时的任务不断的导致里程碑的变更</li>\n<li>代码质量不高，不断的在修复BUG、修复BUG</li>\n</ol>\n<p>忽略第一点的原因。低质量的代码导致新任务或者临时的修改特别困难，高耦合的代码导致修改了一个BUG，可能会引起两个BUG。不断的陷入在无限的死循环中。</p>\n<h4 id=\"为什么BUG会这么多\"><a href=\"#为什么BUG会这么多\" class=\"headerlink\" title=\"为什么BUG会这么多\"></a>为什么BUG会这么多</h4><p>这是一个值得反思的问题，12月前端4个小伙伴开了个小会，大家畅所欲言的阐述了当前开发遇到的问题。</p>\n<ol>\n<li>开发之初，缺乏完整的需求文档，开发的依据就是Jira上的任务描述和设计稿，导致的结果是：开发的内容和实际需求存在偏差，测试按照实际的需求文档完整测试，会出现很多和需求不符和的BUG；</li>\n<li>开发本身编码的问题，导致修改BUG时，无法预估到该处修改的影响范围，修改BUG时会导致引起其他BUG；</li>\n<li>前后端之间数据缺乏校验，后端接口对前端发送的数据很少做校验就存入数据库，数据的正确性和完整性依靠前端保证，经常性的出现数据格式导致后端空指针等异常；</li>\n<li>除此之外，还有一个原因是自己开发时候的自己主观想象导致的问题。在需求之上，按照个人的理解增加一些功能，导致和需求不一致的问题。</li>\n</ol>\n<h4 id=\"为什么之前没想过改变\"><a href=\"#为什么之前没想过改变\" class=\"headerlink\" title=\"为什么之前没想过改变\"></a>为什么之前没想过改变</h4><p>为什么不想着去改变些什么？这个问题去想过，也去做过，刚进入项目时，项目缺乏基础的http调用组件，自己抽空封装；tips弹窗难用，花时间重写；重复代码太多，花时间抽离通用组件。但是一个人能做的事情其实有限，加上时间比较紧张，最后的结果就是，算了先这样吧，反正不影响功能。</p>\n","encrypt":true},{"title":"手写命令行脚本傻瓜式的使用hexo","toc":true,"sidebar":true,"date":"2020-05-28T08:11:51.000Z","_content":"\n\n\n## 为何要写这样一个脚本\n\n每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 `cd` 到博客目录，`hexo create xxxx` ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。\n\n所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）\n\n![img](so-simple-to-write-blog/3064F5DA.gif)\n\n最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!\n\n所有当我想写博客时，我就可以这样做：\n\n![20200528_161248](so-simple-to-write-blog/20200528_161248.gif)\n\n我要做的只是输入文章的名字，其他的所有都交给脚本去执行。\n\n为了方便使用，我设置了一下五个功能：\n\n![1590654652879](so-simple-to-write-blog/1590654652879.png)\n\n> 脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置\n>\n>  [blog.sh](so-simple-to-write-blog\\blog.sh) \n\n\n\n## 参数修改\n\n在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\n# ***** 修改为你本地的博客仓库地址 *****\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\n# 改地址不用修改\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n```\n\n## 相关命令设置\n因为脚本中直接使用了 `hexo` 、`Typora` 命令，需要先安装/创建相关命令\n\n1. 安装 `hexo`\n\n```\nnpm install  hexo -g\n```\n\n2. 安装 `Typora`  >>> [下载Typora](https://www.typora.io/)\n\n   `Typora` 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等....\n\n3. 将`Typora`设为全局命令\n\n   - 找到你的安装路径，`Typora.exe` 运行程序右键创建快捷方式 \n\n   - 将快捷方式复制到 `C:\\Users\\你的计算机用户名\\.link` 下，没有`.link` 目录的手动创建一个。然后重命名为 `Typora`\n\n   - windows10 : `开始` - `设置` - `主页` - `系统` - `关于` - `系统信息` - `高级环境变量` - `环境变量` 将 `C:\\Users\\你的计算机用户名\\.link` 地址添加到系统环境变量 `PATH` 中。其他系统自行设置。\n\n\n此时应该可以在命令行使用 `hexo` 和  `Typora` 命令了\n\n   ![1590655537760](so-simple-to-write-blog/1590655537760.png)\n\n   ![1590655829098](so-simple-to-write-blog/1590655829098.png)\n\n   ![1590656080311](so-simple-to-write-blog/1590656080311.png)\n\n\n##  功能介绍\n\n### 写一篇新文章\n\n该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora\n\n这要求你需要全局按照了`hexo`命令，并将Typora设为全局命令\n\n\n### 继续写作\n\n该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写\n\n![20200528_171021](so-simple-to-write-blog/20200528_171021.gif)\n\n### 发布\n\n编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择`3`，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。\n\n```shell\nclear\necho \"发布站点\"\necho \"1. 正在清除博客信息...\"\nhexo clean\necho \"2. 正在生成博客内容...\"\nhexo g\necho \"3. 正在发布博客..\"\nhexo d\n```\n\n> 如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：\n> [hexo搭建个人博客并部署到个人服务器](https://blog.plcent.com/2019/11/04/hello-hexo/)\n> [如果优雅的部署hexo博客到自己的服务器](https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/)\n\n![20200528_172321](so-simple-to-write-blog/20200528_172321.gif)\n\n\n\n### 推送git仓库\n\n该部分模拟了手动提交仓库的操作，需要你录入一个提交日志\n\n\n```shell\nclear\nread -p \"推送日志> \" commitMsg\n# 如果你没有录入日志信息，使用当前日期作为日志推送\nif [[ -z commitMsg ]]; then\n  commitDate=`date \"+%Y/%m/%d\"`\n  commitMsg=\"更新博客-$commitDate\"\nfi\necho \"推送代码到git仓库\"\necho $commitMsg\ngit add .\ngit commit -m \"$commitMsg\"\ngit push\n```\n\n![20200528_175335](so-simple-to-write-blog/20200528_175335.gif)\n\n### 拉取仓库\n\n该部分只执行了 `git pull`命令而已\n\n```shell\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n```\n\n\n\n### 进入仓库目录\n\n双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。\n\n\n\n## 脚本源码\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n\n# 进入指定文件夹\ncd \"$blogPath\"\n\n\n# 输出错误信息\nechoError() {\n  echo \"  --------------------------------\"\n  echo \"    $1\"\n  echo \"  --------------------------------\"\n}\n\n# 输入任意键退出\npauseAnyKeyExit(){\n  read -p '输入任意键退出(输入0返回主菜单)...' key\n  if [[ $key = '0' ]]; then\n    # 返回主选择\n    main\n  fi\n}\n\n# 打开Typora编辑器\nopenTypora(){\n  echo \"打开Typora编辑器\"\n  start Typora \"$blogPath$writePath\"\n}\n\n# 打开新git bash窗口\nopenNewGitBash(){\n  echo \"启动新git bash\"\n  start gitBash --cd=\"$blogPath\"\n}\n\n# 是否当前文章已经存在\nisExitPaper() {\n  # 博客目录下当前博客是否存在\n  return $(-e \"$blogPath$writePath$1.md\")\n}\n\n\n# ------------------------------------------------------------\n\n# 1. 新写一篇文章\nwriteNewPost() {\n  clear\n  read -p \"写篇什么> \" name\n\n  if [[ $name = '0' ]]; then\n    # 返回主选择\n    main\n  elif [[ -n $name ]]; then\n    echo \"新建文章: $name.md\"\n    hexo new post \"$name\"\n    #打开编辑器\n    openTypora\n  else\n    # 错误提示\n    echoError \"请输入文章名称。(退出请输入0)\"\n    # 重新执行\n    writeNewPost\n  fi\n}\n\n# 2. 继续写作\ncontinueWrite() {\n  clear\n  echo \"正在打开编辑器Typora\"\n  # 打开编辑器\n  openTypora\n  echo \"开始书写博客吧...\"\n}\n\n# 3. 发布站点\ndisplayWebsite(){\n  clear\n  echo \"发布站点\"\n  echo \"1. 正在清除博客信息...\"\n  echo \"> hexo clean\"\n  hexo clean\n  echo \"2. 正在生成博客内容...\"\n  echo \"> hexo g\"\n  hexo g\n  echo \"3. 正在发布博客..\"\n  echo \"> hexo d\"\n  hexo d\n  \n  pauseAnyKeyExit\n}\n\n# 4. 推送代码到git仓库\ngitPush(){\n  clear\n  read -p \"推送日志> \" commitMsg\n  if [[ -z $commitMsg ]]; then\n    commitDate=`date \"+%Y/%m/%d\"`\n    commitMsg=\"更新博客-$commitDate\"\n  fi\n  echo \"推送代码到git仓库\"\n  echo \"推送日志> $commitMsg\"\n  echo \"> git add .\"\n  git add .\n  echo \"> git commit -m $commitMsg\"\n  git commit -m \"$commitMsg\"\n  echo \"> git push\"\n  git push\n\n  pauseAnyKeyExit\n}\n\n# 5. 拉取仓库\ngitPull() {\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n\npauseAnyKeyExit\n}\n\n\n\n# 入口\nmain(){\n  # 选择操作类型\n  echo \"你想干什么:\"\n  echo -e \"\\t1. 写一篇新文章\"\n  echo -e \"\\t2. 继续写作\"\n  echo -e \"\\t3. 发布\"\n  echo -e \"\\t4. 推送git仓库\"\n  echo -e \"\\t5. 拉取git仓库\"\n  echo -e \"\\t0. 退出\"\n  echo -e \"> 直接回车将进入博客目录\"\n  echo -e \"\\n\"\n  read -p \"选择> \" choose\n\n  \n  #开始写作\n  if [[ $choose = '1' ]]; then\n    writeNewPost \n  elif [[ $choose = '2' ]]; then\n    continueWrite\n  elif [[ $choose = '3' ]]; then\n    displayWebsite\n  elif [[ $choose = '4' ]]; then\n    gitPush\n  elif [[ $choose = '5' ]]; then\n    gitPull\n  elif [[ $choose = '0' ]]; then\n    exit\n  elif [ -n $choose ]; then\n    # 打开一个新的git bash\n    openNewGitBash\n  else\n    echoError \"选择有误，请重新选择。\"\n    # 继续选择\n    main\n  fi\n}\n\n# 开始执行\nmain\n```\n\n","source":"_posts/so-simple-to-write-blog.md","raw":"---\ntitle: 手写命令行脚本傻瓜式的使用hexo\ntoc: true\nsidebar: true\ndate: 2020-05-28 16:11:51\ntags:\n- hexo \ncategories:\n- hexo\n---\n\n\n\n## 为何要写这样一个脚本\n\n每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 `cd` 到博客目录，`hexo create xxxx` ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。\n\n所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）\n\n![img](so-simple-to-write-blog/3064F5DA.gif)\n\n最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!\n\n所有当我想写博客时，我就可以这样做：\n\n![20200528_161248](so-simple-to-write-blog/20200528_161248.gif)\n\n我要做的只是输入文章的名字，其他的所有都交给脚本去执行。\n\n为了方便使用，我设置了一下五个功能：\n\n![1590654652879](so-simple-to-write-blog/1590654652879.png)\n\n> 脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置\n>\n>  [blog.sh](so-simple-to-write-blog\\blog.sh) \n\n\n\n## 参数修改\n\n在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\n# ***** 修改为你本地的博客仓库地址 *****\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\n# 改地址不用修改\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n```\n\n## 相关命令设置\n因为脚本中直接使用了 `hexo` 、`Typora` 命令，需要先安装/创建相关命令\n\n1. 安装 `hexo`\n\n```\nnpm install  hexo -g\n```\n\n2. 安装 `Typora`  >>> [下载Typora](https://www.typora.io/)\n\n   `Typora` 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等....\n\n3. 将`Typora`设为全局命令\n\n   - 找到你的安装路径，`Typora.exe` 运行程序右键创建快捷方式 \n\n   - 将快捷方式复制到 `C:\\Users\\你的计算机用户名\\.link` 下，没有`.link` 目录的手动创建一个。然后重命名为 `Typora`\n\n   - windows10 : `开始` - `设置` - `主页` - `系统` - `关于` - `系统信息` - `高级环境变量` - `环境变量` 将 `C:\\Users\\你的计算机用户名\\.link` 地址添加到系统环境变量 `PATH` 中。其他系统自行设置。\n\n\n此时应该可以在命令行使用 `hexo` 和  `Typora` 命令了\n\n   ![1590655537760](so-simple-to-write-blog/1590655537760.png)\n\n   ![1590655829098](so-simple-to-write-blog/1590655829098.png)\n\n   ![1590656080311](so-simple-to-write-blog/1590656080311.png)\n\n\n##  功能介绍\n\n### 写一篇新文章\n\n该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora\n\n这要求你需要全局按照了`hexo`命令，并将Typora设为全局命令\n\n\n### 继续写作\n\n该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写\n\n![20200528_171021](so-simple-to-write-blog/20200528_171021.gif)\n\n### 发布\n\n编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择`3`，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。\n\n```shell\nclear\necho \"发布站点\"\necho \"1. 正在清除博客信息...\"\nhexo clean\necho \"2. 正在生成博客内容...\"\nhexo g\necho \"3. 正在发布博客..\"\nhexo d\n```\n\n> 如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：\n> [hexo搭建个人博客并部署到个人服务器](https://blog.plcent.com/2019/11/04/hello-hexo/)\n> [如果优雅的部署hexo博客到自己的服务器](https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/)\n\n![20200528_172321](so-simple-to-write-blog/20200528_172321.gif)\n\n\n\n### 推送git仓库\n\n该部分模拟了手动提交仓库的操作，需要你录入一个提交日志\n\n\n```shell\nclear\nread -p \"推送日志> \" commitMsg\n# 如果你没有录入日志信息，使用当前日期作为日志推送\nif [[ -z commitMsg ]]; then\n  commitDate=`date \"+%Y/%m/%d\"`\n  commitMsg=\"更新博客-$commitDate\"\nfi\necho \"推送代码到git仓库\"\necho $commitMsg\ngit add .\ngit commit -m \"$commitMsg\"\ngit push\n```\n\n![20200528_175335](so-simple-to-write-blog/20200528_175335.gif)\n\n### 拉取仓库\n\n该部分只执行了 `git pull`命令而已\n\n```shell\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n```\n\n\n\n### 进入仓库目录\n\n双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。\n\n\n\n## 脚本源码\n\n```shell\n#!/usr/bin/bash\n\n# 博客地址\nexport blogPath=/e/workspace/blog.plcent.com\n# 文章地址\nexport writePath=/source/_posts/\necho \"开始博客之旅: $blogPath\"\necho -e \"(*^▽^*)\\n\"\n\n# 进入指定文件夹\ncd \"$blogPath\"\n\n\n# 输出错误信息\nechoError() {\n  echo \"  --------------------------------\"\n  echo \"    $1\"\n  echo \"  --------------------------------\"\n}\n\n# 输入任意键退出\npauseAnyKeyExit(){\n  read -p '输入任意键退出(输入0返回主菜单)...' key\n  if [[ $key = '0' ]]; then\n    # 返回主选择\n    main\n  fi\n}\n\n# 打开Typora编辑器\nopenTypora(){\n  echo \"打开Typora编辑器\"\n  start Typora \"$blogPath$writePath\"\n}\n\n# 打开新git bash窗口\nopenNewGitBash(){\n  echo \"启动新git bash\"\n  start gitBash --cd=\"$blogPath\"\n}\n\n# 是否当前文章已经存在\nisExitPaper() {\n  # 博客目录下当前博客是否存在\n  return $(-e \"$blogPath$writePath$1.md\")\n}\n\n\n# ------------------------------------------------------------\n\n# 1. 新写一篇文章\nwriteNewPost() {\n  clear\n  read -p \"写篇什么> \" name\n\n  if [[ $name = '0' ]]; then\n    # 返回主选择\n    main\n  elif [[ -n $name ]]; then\n    echo \"新建文章: $name.md\"\n    hexo new post \"$name\"\n    #打开编辑器\n    openTypora\n  else\n    # 错误提示\n    echoError \"请输入文章名称。(退出请输入0)\"\n    # 重新执行\n    writeNewPost\n  fi\n}\n\n# 2. 继续写作\ncontinueWrite() {\n  clear\n  echo \"正在打开编辑器Typora\"\n  # 打开编辑器\n  openTypora\n  echo \"开始书写博客吧...\"\n}\n\n# 3. 发布站点\ndisplayWebsite(){\n  clear\n  echo \"发布站点\"\n  echo \"1. 正在清除博客信息...\"\n  echo \"> hexo clean\"\n  hexo clean\n  echo \"2. 正在生成博客内容...\"\n  echo \"> hexo g\"\n  hexo g\n  echo \"3. 正在发布博客..\"\n  echo \"> hexo d\"\n  hexo d\n  \n  pauseAnyKeyExit\n}\n\n# 4. 推送代码到git仓库\ngitPush(){\n  clear\n  read -p \"推送日志> \" commitMsg\n  if [[ -z $commitMsg ]]; then\n    commitDate=`date \"+%Y/%m/%d\"`\n    commitMsg=\"更新博客-$commitDate\"\n  fi\n  echo \"推送代码到git仓库\"\n  echo \"推送日志> $commitMsg\"\n  echo \"> git add .\"\n  git add .\n  echo \"> git commit -m $commitMsg\"\n  git commit -m \"$commitMsg\"\n  echo \"> git push\"\n  git push\n\n  pauseAnyKeyExit\n}\n\n# 5. 拉取仓库\ngitPull() {\necho \"拉取仓库...\"\n\ncd \"$blogPath\"\ngit pull\n\npauseAnyKeyExit\n}\n\n\n\n# 入口\nmain(){\n  # 选择操作类型\n  echo \"你想干什么:\"\n  echo -e \"\\t1. 写一篇新文章\"\n  echo -e \"\\t2. 继续写作\"\n  echo -e \"\\t3. 发布\"\n  echo -e \"\\t4. 推送git仓库\"\n  echo -e \"\\t5. 拉取git仓库\"\n  echo -e \"\\t0. 退出\"\n  echo -e \"> 直接回车将进入博客目录\"\n  echo -e \"\\n\"\n  read -p \"选择> \" choose\n\n  \n  #开始写作\n  if [[ $choose = '1' ]]; then\n    writeNewPost \n  elif [[ $choose = '2' ]]; then\n    continueWrite\n  elif [[ $choose = '3' ]]; then\n    displayWebsite\n  elif [[ $choose = '4' ]]; then\n    gitPush\n  elif [[ $choose = '5' ]]; then\n    gitPull\n  elif [[ $choose = '0' ]]; then\n    exit\n  elif [ -n $choose ]; then\n    # 打开一个新的git bash\n    openNewGitBash\n  else\n    echoError \"选择有误，请重新选择。\"\n    # 继续选择\n    main\n  fi\n}\n\n# 开始执行\nmain\n```\n\n","slug":"so-simple-to-write-blog","published":1,"updated":"2022-07-15T01:57:01.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc0001jowgndy5fc5so","content":"<h2 id=\"为何要写这样一个脚本\"><a href=\"#为何要写这样一个脚本\" class=\"headerlink\" title=\"为何要写这样一个脚本\"></a>为何要写这样一个脚本</h2><p>每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 <code>cd</code> 到博客目录，<code>hexo create xxxx</code> ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。</p>\n<p>所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）</p>\n<p><img src=\"/.com//3064F5DA.gif\" alt=\"img\"></p>\n<p>最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!</p>\n<p>所有当我想写博客时，我就可以这样做：</p>\n<p><img src=\"/.com//20200528_161248.gif\" alt=\"20200528_161248\"></p>\n<p>我要做的只是输入文章的名字，其他的所有都交给脚本去执行。</p>\n<p>为了方便使用，我设置了一下五个功能：</p>\n<p><img src=\"/.com//1590654652879.png\" alt=\"1590654652879\"></p>\n<blockquote>\n<p>脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置</p>\n<p> <a href=\"so-simple-to-write-blog\\blog.sh\">blog.sh</a> </p>\n</blockquote>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><p>在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">***** 修改为你本地的博客仓库地址 *****</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改地址不用修改</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关命令设置\"><a href=\"#相关命令设置\" class=\"headerlink\" title=\"相关命令设置\"></a>相关命令设置</h2><p>因为脚本中直接使用了 <code>hexo</code> 、<code>Typora</code> 命令，需要先安装/创建相关命令</p>\n<ol>\n<li>安装 <code>hexo</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  hexo -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装 <code>Typora</code>  &gt;&gt;&gt; <a target=\"_blank\" rel=\"noopener\" href=\"https://www.typora.io/\">下载Typora</a></p>\n<p><code>Typora</code> 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等….</p>\n</li>\n<li><p>将<code>Typora</code>设为全局命令</p>\n<ul>\n<li><p>找到你的安装路径，<code>Typora.exe</code> 运行程序右键创建快捷方式 </p>\n</li>\n<li><p>将快捷方式复制到 <code>C:\\Users\\你的计算机用户名\\.link</code> 下，没有<code>.link</code> 目录的手动创建一个。然后重命名为 <code>Typora</code></p>\n</li>\n<li><p>windows10 : <code>开始</code> - <code>设置</code> - <code>主页</code> - <code>系统</code> - <code>关于</code> - <code>系统信息</code> - <code>高级环境变量</code> - <code>环境变量</code> 将 <code>C:\\Users\\你的计算机用户名\\.link</code> 地址添加到系统环境变量 <code>PATH</code> 中。其他系统自行设置。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>此时应该可以在命令行使用 <code>hexo</code> 和  <code>Typora</code> 命令了</p>\n<p>   <img src=\"/.com//1590655537760.png\" alt=\"1590655537760\"></p>\n<p>   <img src=\"/.com//1590655829098.png\" alt=\"1590655829098\"></p>\n<p>   <img src=\"/.com//1590656080311.png\" alt=\"1590656080311\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><h3 id=\"写一篇新文章\"><a href=\"#写一篇新文章\" class=\"headerlink\" title=\"写一篇新文章\"></a>写一篇新文章</h3><p>该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora</p>\n<p>这要求你需要全局按照了<code>hexo</code>命令，并将Typora设为全局命令</p>\n<h3 id=\"继续写作\"><a href=\"#继续写作\" class=\"headerlink\" title=\"继续写作\"></a>继续写作</h3><p>该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写</p>\n<p><img src=\"/.com//20200528_171021.gif\" alt=\"20200528_171021\"></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择<code>3</code>，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;发布站点&quot;</span><br><span class=\"line\">echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：<br><a href=\"https://blog.plcent.com/2019/11/04/hello-hexo/\">hexo搭建个人博客并部署到个人服务器</a><br><a href=\"https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/\">如果优雅的部署hexo博客到自己的服务器</a></p>\n</blockquote>\n<p><img src=\"/.com//20200528_172321.gif\" alt=\"20200528_172321\"></p>\n<h3 id=\"推送git仓库\"><a href=\"#推送git仓库\" class=\"headerlink\" title=\"推送git仓库\"></a>推送git仓库</h3><p>该部分模拟了手动提交仓库的操作，需要你录入一个提交日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果你没有录入日志信息，使用当前日期作为日志推送</span></span><br><span class=\"line\">if [[ -z commitMsg ]]; then</span><br><span class=\"line\">  commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">  commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">echo $commitMsg</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//20200528_175335.gif\" alt=\"20200528_175335\"></p>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><p>该部分只执行了 <code>git pull</code>命令而已</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入仓库目录\"><a href=\"#进入仓库目录\" class=\"headerlink\" title=\"进入仓库目录\"></a>进入仓库目录</h3><p>双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。</p>\n<h2 id=\"脚本源码\"><a href=\"#脚本源码\" class=\"headerlink\" title=\"脚本源码\"></a>脚本源码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入指定文件夹</span></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出错误信息</span></span><br><span class=\"line\">echoError() &#123;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">  echo &quot;    $1&quot;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入任意键退出</span></span><br><span class=\"line\">pauseAnyKeyExit()&#123;</span><br><span class=\"line\">  read -p &#x27;输入任意键退出(输入0返回主菜单)...&#x27; key</span><br><span class=\"line\">  if [[ $key = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开Typora编辑器</span></span><br><span class=\"line\">openTypora()&#123;</span><br><span class=\"line\">  echo &quot;打开Typora编辑器&quot;</span><br><span class=\"line\">  start Typora &quot;$blogPath$writePath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开新git bash窗口</span></span><br><span class=\"line\">openNewGitBash()&#123;</span><br><span class=\"line\">  echo &quot;启动新git bash&quot;</span><br><span class=\"line\">  start gitBash --cd=&quot;$blogPath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否当前文章已经存在</span></span><br><span class=\"line\">isExitPaper() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">博客目录下当前博客是否存在</span></span><br><span class=\"line\">  return $(-e &quot;$blogPath$writePath$1.md&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 新写一篇文章</span></span><br><span class=\"line\">writeNewPost() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;写篇什么&gt; &quot; name</span><br><span class=\"line\"></span><br><span class=\"line\">  if [[ $name = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  elif [[ -n $name ]]; then</span><br><span class=\"line\">    echo &quot;新建文章: $name.md&quot;</span><br><span class=\"line\">    hexo new post &quot;$name&quot;</span><br><span class=\"line\">    #打开编辑器</span><br><span class=\"line\">    openTypora</span><br><span class=\"line\">  else</span><br><span class=\"line\">    # 错误提示</span><br><span class=\"line\">    echoError &quot;请输入文章名称。(退出请输入0)&quot;</span><br><span class=\"line\">    # 重新执行</span><br><span class=\"line\">    writeNewPost</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 继续写作</span></span><br><span class=\"line\">continueWrite() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;正在打开编辑器Typora&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">打开编辑器</span></span><br><span class=\"line\">  openTypora</span><br><span class=\"line\">  echo &quot;开始书写博客吧...&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 发布站点</span></span><br><span class=\"line\">displayWebsite()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;发布站点&quot;</span><br><span class=\"line\">  echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo clean&quot;</span><br><span class=\"line\">  hexo clean</span><br><span class=\"line\">  echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo g&quot;</span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo d&quot;</span><br><span class=\"line\">  hexo d</span><br><span class=\"line\">  </span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 推送代码到git仓库</span></span><br><span class=\"line\">gitPush()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\">  if [[ -z $commitMsg ]]; then</span><br><span class=\"line\">    commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">    commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">  echo &quot;推送日志&gt; $commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git add .&quot;</span><br><span class=\"line\">  git add .</span><br><span class=\"line\">  echo &quot;&gt; git commit -m $commitMsg&quot;</span><br><span class=\"line\">  git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git push&quot;</span><br><span class=\"line\">  git push</span><br><span class=\"line\"></span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 拉取仓库</span></span><br><span class=\"line\">gitPull() &#123;</span><br><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口</span></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">选择操作类型</span></span><br><span class=\"line\">  echo &quot;你想干什么:&quot;</span><br><span class=\"line\">  echo -e &quot;\\t1. 写一篇新文章&quot;</span><br><span class=\"line\">  echo -e &quot;\\t2. 继续写作&quot;</span><br><span class=\"line\">  echo -e &quot;\\t3. 发布&quot;</span><br><span class=\"line\">  echo -e &quot;\\t4. 推送git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t5. 拉取git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t0. 退出&quot;</span><br><span class=\"line\">  echo -e &quot;&gt; 直接回车将进入博客目录&quot;</span><br><span class=\"line\">  echo -e &quot;\\n&quot;</span><br><span class=\"line\">  read -p &quot;选择&gt; &quot; choose</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">  if [[ $choose = &#x27;1&#x27; ]]; then</span><br><span class=\"line\">    writeNewPost </span><br><span class=\"line\">  elif [[ $choose = &#x27;2&#x27; ]]; then</span><br><span class=\"line\">    continueWrite</span><br><span class=\"line\">  elif [[ $choose = &#x27;3&#x27; ]]; then</span><br><span class=\"line\">    displayWebsite</span><br><span class=\"line\">  elif [[ $choose = &#x27;4&#x27; ]]; then</span><br><span class=\"line\">    gitPush</span><br><span class=\"line\">  elif [[ $choose = &#x27;5&#x27; ]]; then</span><br><span class=\"line\">    gitPull</span><br><span class=\"line\">  elif [[ $choose = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    exit</span><br><span class=\"line\">  elif [ -n $choose ]; then</span><br><span class=\"line\">    # 打开一个新的git bash</span><br><span class=\"line\">    openNewGitBash</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echoError &quot;选择有误，请重新选择。&quot;</span><br><span class=\"line\">    # 继续选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始执行</span></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"为何要写这样一个脚本\"><a href=\"#为何要写这样一个脚本\" class=\"headerlink\" title=\"为何要写这样一个脚本\"></a>为何要写这样一个脚本</h2><p>每次想写博客时，都需要打开编辑器，新建文件，录入文件名称，或者 <code>cd</code> 到博客目录，<code>hexo create xxxx</code> ，打开编辑器，一通操作，从我想写博客到开始写，已经一分钟过去了。</p>\n<p>所有我在想，有没有一个办法，能让我在3秒钟之内，就能开始写博客。（创作的心情就是这么迫切，哈哈哈哈）</p>\n<p><img src=\"/.com//3064F5DA.gif\" alt=\"img\"></p>\n<p>最终，决定手写了一个命令行脚本，解决我的小需求。写博客时，只要双击脚本，everything is ready!</p>\n<p>所有当我想写博客时，我就可以这样做：</p>\n<p><img src=\"/.com//20200528_161248.gif\" alt=\"20200528_161248\"></p>\n<p>我要做的只是输入文章的名字，其他的所有都交给脚本去执行。</p>\n<p>为了方便使用，我设置了一下五个功能：</p>\n<p><img src=\"/.com//1590654652879.png\" alt=\"1590654652879\"></p>\n<blockquote>\n<p>脚本代码附在文章最后，你也可以手动从此下载，然后对照修改相关配置</p>\n<p> <a href=\"so-simple-to-write-blog\\blog.sh\">blog.sh</a> </p>\n</blockquote>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><p>在脚本的第四行#L4，你需要根据你本地仓库的位置，手动修改文件路径地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">***** 修改为你本地的博客仓库地址 *****</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改地址不用修改</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关命令设置\"><a href=\"#相关命令设置\" class=\"headerlink\" title=\"相关命令设置\"></a>相关命令设置</h2><p>因为脚本中直接使用了 <code>hexo</code> 、<code>Typora</code> 命令，需要先安装/创建相关命令</p>\n<ol>\n<li>安装 <code>hexo</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  hexo -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装 <code>Typora</code>  &gt;&gt;&gt; <a target=\"_blank\" rel=\"noopener\" href=\"https://www.typora.io/\">下载Typora</a></p>\n<p><code>Typora</code> 的优势就不用我都说了，美观的界面，支持添加图片时自动复制图片到对应文章目录下等等….</p>\n</li>\n<li><p>将<code>Typora</code>设为全局命令</p>\n<ul>\n<li><p>找到你的安装路径，<code>Typora.exe</code> 运行程序右键创建快捷方式 </p>\n</li>\n<li><p>将快捷方式复制到 <code>C:\\Users\\你的计算机用户名\\.link</code> 下，没有<code>.link</code> 目录的手动创建一个。然后重命名为 <code>Typora</code></p>\n</li>\n<li><p>windows10 : <code>开始</code> - <code>设置</code> - <code>主页</code> - <code>系统</code> - <code>关于</code> - <code>系统信息</code> - <code>高级环境变量</code> - <code>环境变量</code> 将 <code>C:\\Users\\你的计算机用户名\\.link</code> 地址添加到系统环境变量 <code>PATH</code> 中。其他系统自行设置。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>此时应该可以在命令行使用 <code>hexo</code> 和  <code>Typora</code> 命令了</p>\n<p>   <img src=\"/.com//1590655537760.png\" alt=\"1590655537760\"></p>\n<p>   <img src=\"/.com//1590655829098.png\" alt=\"1590655829098\"></p>\n<p>   <img src=\"/.com//1590656080311.png\" alt=\"1590656080311\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><h3 id=\"写一篇新文章\"><a href=\"#写一篇新文章\" class=\"headerlink\" title=\"写一篇新文章\"></a>写一篇新文章</h3><p>该选项会让你输入文件名称，使用你录入的名称，利用hexo命令创建一篇博客，之后会打开Typora</p>\n<p>这要求你需要全局按照了<code>hexo</code>命令，并将Typora设为全局命令</p>\n<h3 id=\"继续写作\"><a href=\"#继续写作\" class=\"headerlink\" title=\"继续写作\"></a>继续写作</h3><p>该选项会直接打开Typora，你可以手动选择之前写过的一篇文章，接着书写</p>\n<p><img src=\"/.com//20200528_171021.gif\" alt=\"20200528_171021\"></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>编写完文章之后，你需要调用hexo的发布命令，自动编译好文章，你要做的就是选择<code>3</code>，然后等待。该步骤的所有操作其实就和你手动执行hexo发布命令一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;发布站点&quot;</span><br><span class=\"line\">echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你想你的博客可以自动推送更新，可以参照我写的另外两篇文章：<br><a href=\"https://blog.plcent.com/2019/11/04/hello-hexo/\">hexo搭建个人博客并部署到个人服务器</a><br><a href=\"https://blog.plcent.com/2019/11/08/how-to-deploy-hexo-to-self-server/\">如果优雅的部署hexo博客到自己的服务器</a></p>\n</blockquote>\n<p><img src=\"/.com//20200528_172321.gif\" alt=\"20200528_172321\"></p>\n<h3 id=\"推送git仓库\"><a href=\"#推送git仓库\" class=\"headerlink\" title=\"推送git仓库\"></a>推送git仓库</h3><p>该部分模拟了手动提交仓库的操作，需要你录入一个提交日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br><span class=\"line\">read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果你没有录入日志信息，使用当前日期作为日志推送</span></span><br><span class=\"line\">if [[ -z commitMsg ]]; then</span><br><span class=\"line\">  commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">  commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">echo $commitMsg</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//20200528_175335.gif\" alt=\"20200528_175335\"></p>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><p>该部分只执行了 <code>git pull</code>命令而已</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入仓库目录\"><a href=\"#进入仓库目录\" class=\"headerlink\" title=\"进入仓库目录\"></a>进入仓库目录</h3><p>双击运行脚本后，你可以不输入任何内容，直接回车，命令行脚本将自动跳转到仓库目录，如果脚本功能不能满足你的要求，你可以手动进入命令，执行你需要的命令。</p>\n<h2 id=\"脚本源码\"><a href=\"#脚本源码\" class=\"headerlink\" title=\"脚本源码\"></a>脚本源码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">博客地址</span></span><br><span class=\"line\">export blogPath=/e/workspace/blog.plcent.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章地址</span></span><br><span class=\"line\">export writePath=/source/_posts/</span><br><span class=\"line\">echo &quot;开始博客之旅: $blogPath&quot;</span><br><span class=\"line\">echo -e &quot;(*^▽^*)\\n&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入指定文件夹</span></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出错误信息</span></span><br><span class=\"line\">echoError() &#123;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">  echo &quot;    $1&quot;</span><br><span class=\"line\">  echo &quot;  --------------------------------&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入任意键退出</span></span><br><span class=\"line\">pauseAnyKeyExit()&#123;</span><br><span class=\"line\">  read -p &#x27;输入任意键退出(输入0返回主菜单)...&#x27; key</span><br><span class=\"line\">  if [[ $key = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开Typora编辑器</span></span><br><span class=\"line\">openTypora()&#123;</span><br><span class=\"line\">  echo &quot;打开Typora编辑器&quot;</span><br><span class=\"line\">  start Typora &quot;$blogPath$writePath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开新git bash窗口</span></span><br><span class=\"line\">openNewGitBash()&#123;</span><br><span class=\"line\">  echo &quot;启动新git bash&quot;</span><br><span class=\"line\">  start gitBash --cd=&quot;$blogPath&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否当前文章已经存在</span></span><br><span class=\"line\">isExitPaper() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">博客目录下当前博客是否存在</span></span><br><span class=\"line\">  return $(-e &quot;$blogPath$writePath$1.md&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 新写一篇文章</span></span><br><span class=\"line\">writeNewPost() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;写篇什么&gt; &quot; name</span><br><span class=\"line\"></span><br><span class=\"line\">  if [[ $name = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    # 返回主选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  elif [[ -n $name ]]; then</span><br><span class=\"line\">    echo &quot;新建文章: $name.md&quot;</span><br><span class=\"line\">    hexo new post &quot;$name&quot;</span><br><span class=\"line\">    #打开编辑器</span><br><span class=\"line\">    openTypora</span><br><span class=\"line\">  else</span><br><span class=\"line\">    # 错误提示</span><br><span class=\"line\">    echoError &quot;请输入文章名称。(退出请输入0)&quot;</span><br><span class=\"line\">    # 重新执行</span><br><span class=\"line\">    writeNewPost</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 继续写作</span></span><br><span class=\"line\">continueWrite() &#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;正在打开编辑器Typora&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">打开编辑器</span></span><br><span class=\"line\">  openTypora</span><br><span class=\"line\">  echo &quot;开始书写博客吧...&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 发布站点</span></span><br><span class=\"line\">displayWebsite()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  echo &quot;发布站点&quot;</span><br><span class=\"line\">  echo &quot;1. 正在清除博客信息...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo clean&quot;</span><br><span class=\"line\">  hexo clean</span><br><span class=\"line\">  echo &quot;2. 正在生成博客内容...&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo g&quot;</span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  echo &quot;3. 正在发布博客..&quot;</span><br><span class=\"line\">  echo &quot;&gt; hexo d&quot;</span><br><span class=\"line\">  hexo d</span><br><span class=\"line\">  </span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 推送代码到git仓库</span></span><br><span class=\"line\">gitPush()&#123;</span><br><span class=\"line\">  clear</span><br><span class=\"line\">  read -p &quot;推送日志&gt; &quot; commitMsg</span><br><span class=\"line\">  if [[ -z $commitMsg ]]; then</span><br><span class=\"line\">    commitDate=`date &quot;+%Y/%m/%d&quot;`</span><br><span class=\"line\">    commitMsg=&quot;更新博客-$commitDate&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;推送代码到git仓库&quot;</span><br><span class=\"line\">  echo &quot;推送日志&gt; $commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git add .&quot;</span><br><span class=\"line\">  git add .</span><br><span class=\"line\">  echo &quot;&gt; git commit -m $commitMsg&quot;</span><br><span class=\"line\">  git commit -m &quot;$commitMsg&quot;</span><br><span class=\"line\">  echo &quot;&gt; git push&quot;</span><br><span class=\"line\">  git push</span><br><span class=\"line\"></span><br><span class=\"line\">  pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 拉取仓库</span></span><br><span class=\"line\">gitPull() &#123;</span><br><span class=\"line\">echo &quot;拉取仓库...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$blogPath&quot;</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">pauseAnyKeyExit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口</span></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">选择操作类型</span></span><br><span class=\"line\">  echo &quot;你想干什么:&quot;</span><br><span class=\"line\">  echo -e &quot;\\t1. 写一篇新文章&quot;</span><br><span class=\"line\">  echo -e &quot;\\t2. 继续写作&quot;</span><br><span class=\"line\">  echo -e &quot;\\t3. 发布&quot;</span><br><span class=\"line\">  echo -e &quot;\\t4. 推送git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t5. 拉取git仓库&quot;</span><br><span class=\"line\">  echo -e &quot;\\t0. 退出&quot;</span><br><span class=\"line\">  echo -e &quot;&gt; 直接回车将进入博客目录&quot;</span><br><span class=\"line\">  echo -e &quot;\\n&quot;</span><br><span class=\"line\">  read -p &quot;选择&gt; &quot; choose</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">  if [[ $choose = &#x27;1&#x27; ]]; then</span><br><span class=\"line\">    writeNewPost </span><br><span class=\"line\">  elif [[ $choose = &#x27;2&#x27; ]]; then</span><br><span class=\"line\">    continueWrite</span><br><span class=\"line\">  elif [[ $choose = &#x27;3&#x27; ]]; then</span><br><span class=\"line\">    displayWebsite</span><br><span class=\"line\">  elif [[ $choose = &#x27;4&#x27; ]]; then</span><br><span class=\"line\">    gitPush</span><br><span class=\"line\">  elif [[ $choose = &#x27;5&#x27; ]]; then</span><br><span class=\"line\">    gitPull</span><br><span class=\"line\">  elif [[ $choose = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    exit</span><br><span class=\"line\">  elif [ -n $choose ]; then</span><br><span class=\"line\">    # 打开一个新的git bash</span><br><span class=\"line\">    openNewGitBash</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echoError &quot;选择有误，请重新选择。&quot;</span><br><span class=\"line\">    # 继续选择</span><br><span class=\"line\">    main</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始执行</span></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vuepress学习系列/1/初次认识","toc":true,"sidebar":true,"date":"2020-01-16T14:28:37.000Z","_content":"\n### vuepress 初识\n\n之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。\n\n\n\n翻了源码之后发现其使用`vue-markdown-loader`来加载`markdown`文档，按照这个原理，翻看`vue-loader`官网后,发现了`vuepress`。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了`vuepress`学习之旅。\n\n\n\n### vuepress 能做什么\n\n你看到的，`vue`、`vue-loader`、`vue-router`等 `vue `官方的文档,均是使用 `vuepress` 搭建的。\n\n\n\n### 上手\n\n开始前，先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/](https://vuepress.vuejs.org/zh/guide/)\n\n按照 [快速上手](https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) 的步骤，安装并初始化\n\n```shell\n# 安装\nyarn global add vuepress # 或者：npm install -g vuepress\n\n# 创建项目目录\nmkdir vuepress-starter && cd vuepress-starter\n\n# 新建一个 markdown 文件\n# 可能会导致乱码的问题\necho '# Hello VuePress!' > README.md\n\n# 开始写作\nvuepress dev .\n\n# 构建静态文件\nvuepress build .\n```\n\n> 问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 `README.md` 文件乱码导致的，将文件编码修改成 `utf-8` 即可解决该问题。\n\n","source":"_posts/vuepress-01-first-learning.md","raw":"---\ntitle: vuepress学习系列/1/初次认识\ntoc: true\nsidebar: true\ndate: 2020-01-16 22:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n### vuepress 初识\n\n之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。\n\n\n\n翻了源码之后发现其使用`vue-markdown-loader`来加载`markdown`文档，按照这个原理，翻看`vue-loader`官网后,发现了`vuepress`。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了`vuepress`学习之旅。\n\n\n\n### vuepress 能做什么\n\n你看到的，`vue`、`vue-loader`、`vue-router`等 `vue `官方的文档,均是使用 `vuepress` 搭建的。\n\n\n\n### 上手\n\n开始前，先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/](https://vuepress.vuejs.org/zh/guide/)\n\n按照 [快速上手](https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) 的步骤，安装并初始化\n\n```shell\n# 安装\nyarn global add vuepress # 或者：npm install -g vuepress\n\n# 创建项目目录\nmkdir vuepress-starter && cd vuepress-starter\n\n# 新建一个 markdown 文件\n# 可能会导致乱码的问题\necho '# Hello VuePress!' > README.md\n\n# 开始写作\nvuepress dev .\n\n# 构建静态文件\nvuepress build .\n```\n\n> 问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 `README.md` 文件乱码导致的，将文件编码修改成 `utf-8` 即可解决该问题。\n\n","slug":"vuepress-01-first-learning","published":1,"updated":"2022-07-15T01:57:01.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc1001kowgn6ix089ow","content":"<h3 id=\"vuepress-初识\"><a href=\"#vuepress-初识\" class=\"headerlink\" title=\"vuepress 初识\"></a>vuepress 初识</h3><p>之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。</p>\n<p>翻了源码之后发现其使用<code>vue-markdown-loader</code>来加载<code>markdown</code>文档，按照这个原理，翻看<code>vue-loader</code>官网后,发现了<code>vuepress</code>。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了<code>vuepress</code>学习之旅。</p>\n<h3 id=\"vuepress-能做什么\"><a href=\"#vuepress-能做什么\" class=\"headerlink\" title=\"vuepress 能做什么\"></a>vuepress 能做什么</h3><p>你看到的，<code>vue</code>、<code>vue-loader</code>、<code>vue-router</code>等 <code>vue</code>官方的文档,均是使用 <code>vuepress</code> 搭建的。</p>\n<h3 id=\"上手\"><a href=\"#上手\" class=\"headerlink\" title=\"上手\"></a>上手</h3><p>开始前，先领取一份官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/\">https://vuepress.vuejs.org/zh/guide/</a></p>\n<p>按照 <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">快速上手</a> 的步骤，安装并初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yarn global add vuepress # 或者：npm install -g vuepress</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建项目目录</span></span><br><span class=\"line\">mkdir vuepress-starter &amp;&amp; cd vuepress-starter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可能会导致乱码的问题</span></span><br><span class=\"line\">echo &#x27;# Hello VuePress!&#x27; &gt; README.md</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">vuepress dev .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建静态文件</span></span><br><span class=\"line\">vuepress build .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 <code>README.md</code> 文件乱码导致的，将文件编码修改成 <code>utf-8</code> 即可解决该问题。</p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"vuepress-初识\"><a href=\"#vuepress-初识\" class=\"headerlink\" title=\"vuepress 初识\"></a>vuepress 初识</h3><p>之所以会了解到vuepress，是在学习element-ui源码时，想自己搭建一个elemen-ui那样的技术文档网站，因为可以运行的demo让element-ui和一般的技术站点显得更为友好。</p>\n<p>翻了源码之后发现其使用<code>vue-markdown-loader</code>来加载<code>markdown</code>文档，按照这个原理，翻看<code>vue-loader</code>官网后,发现了<code>vuepress</code>。其提供的功能基本可以满足这样的需求。本着学习的态度，开启了<code>vuepress</code>学习之旅。</p>\n<h3 id=\"vuepress-能做什么\"><a href=\"#vuepress-能做什么\" class=\"headerlink\" title=\"vuepress 能做什么\"></a>vuepress 能做什么</h3><p>你看到的，<code>vue</code>、<code>vue-loader</code>、<code>vue-router</code>等 <code>vue</code>官方的文档,均是使用 <code>vuepress</code> 搭建的。</p>\n<h3 id=\"上手\"><a href=\"#上手\" class=\"headerlink\" title=\"上手\"></a>上手</h3><p>开始前，先领取一份官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/\">https://vuepress.vuejs.org/zh/guide/</a></p>\n<p>按照 <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">快速上手</a> 的步骤，安装并初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yarn global add vuepress # 或者：npm install -g vuepress</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建项目目录</span></span><br><span class=\"line\">mkdir vuepress-starter &amp;&amp; cd vuepress-starter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可能会导致乱码的问题</span></span><br><span class=\"line\">echo &#x27;# Hello VuePress!&#x27; &gt; README.md</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始写作</span></span><br><span class=\"line\">vuepress dev .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建静态文件</span></span><br><span class=\"line\">vuepress build .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：启动项目后，如果你遇到乱码的问题，请不要慌张，这是你新建的 <code>README.md</code> 文件乱码导致的，将文件编码修改成 <code>utf-8</code> 即可解决该问题。</p>\n</blockquote>\n"},{"title":"vuepress学习系列/2/基本配置","toc":true,"sidebar":true,"date":"2020-01-16T14:28:37.000Z","_content":"\n### vuepress配置\n\n先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/basic-config.html](https://vuepress.vuejs.org/zh/guide/basic-config.html)\n\n`vuepress`的所有配置信息均放在 `docs/.vuepress` 目录下，因为 `vuepress` 建议的目录结构如下:\n\n```\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\n```\n\n目录结构文档：[https://vuepress.vuejs.org/zh/guide/directory-structure.html](https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由)\n\n\n\n新建配置文件只需要在`.vuepress`下新建文件`config.js`即可：\n\n```sh\n> mkdir .vuepress && touch .vuepress/config.js\n```\n\n一个 VuePress 网站必要的配置文件是 `.vuepress/config.js`，它应该导出一个 JavaScript 对象：\n\n```js\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around'\n}\n```\n\n\n\n### 完整基本配置 \n\n官方文档地址：[基本配置](https://vuepress.vuejs.org/zh/config/#基本配置)，具体配置请参照官方文档。这里只列出一些不好理解的属性。\n\n> 加 ☆ 的属性表示不知道该属性如何使用。\n\n- ☆ [temp](https://vuepress.vuejs.org/zh/config/#temp)  指定客户端文件的临时目录。\n\n  > 默认的临时文件放在 `node_modules/@vuepress/core/.temp` 下\n\n- ☆ [shouldPrefetch](https://vuepress.vuejs.org/zh/config/#shouldprefetch)  一个函数，用来控制对于哪些文件，是需要生成 `<link rel=\"prefetch\">` 资源提示的。请参考 [shouldPrefetch](https://ssr.vuejs.org/zh/api/#shouldprefetch)。\n\n  > 该参数用于服务端渲染\n\n- [cache](https://vuepress.vuejs.org/zh/config/#cache)  此选项可以用于指定 cache 的路径，同时也可以通过设置为 `false` 来在每次构建之前删除 cache。\n\n- [extraWatchFiles](https://vuepress.vuejs.org/zh/config/#extrawatchfiles)  指定额外的需要被监听的文件。\n\n- [patterns](https://vuepress.vuejs.org/zh/config/#patterns)  指定将解析哪些文件。默认值：`['**/*.md', '**/*.vue']`。\n\n  > 你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。`['**/page/*.md']`只包含`page`目录下的`.md`文件\n\n- ","source":"_posts/vuepress-02-basic-config.md","raw":"---\ntitle: vuepress学习系列/2/基本配置\ntoc: true\nsidebar: true\ndate: 2020-01-16 22:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n### vuepress配置\n\n先领取一份官方文档：[https://vuepress.vuejs.org/zh/guide/basic-config.html](https://vuepress.vuejs.org/zh/guide/basic-config.html)\n\n`vuepress`的所有配置信息均放在 `docs/.vuepress` 目录下，因为 `vuepress` 建议的目录结构如下:\n\n```\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\n```\n\n目录结构文档：[https://vuepress.vuejs.org/zh/guide/directory-structure.html](https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由)\n\n\n\n新建配置文件只需要在`.vuepress`下新建文件`config.js`即可：\n\n```sh\n> mkdir .vuepress && touch .vuepress/config.js\n```\n\n一个 VuePress 网站必要的配置文件是 `.vuepress/config.js`，它应该导出一个 JavaScript 对象：\n\n```js\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around'\n}\n```\n\n\n\n### 完整基本配置 \n\n官方文档地址：[基本配置](https://vuepress.vuejs.org/zh/config/#基本配置)，具体配置请参照官方文档。这里只列出一些不好理解的属性。\n\n> 加 ☆ 的属性表示不知道该属性如何使用。\n\n- ☆ [temp](https://vuepress.vuejs.org/zh/config/#temp)  指定客户端文件的临时目录。\n\n  > 默认的临时文件放在 `node_modules/@vuepress/core/.temp` 下\n\n- ☆ [shouldPrefetch](https://vuepress.vuejs.org/zh/config/#shouldprefetch)  一个函数，用来控制对于哪些文件，是需要生成 `<link rel=\"prefetch\">` 资源提示的。请参考 [shouldPrefetch](https://ssr.vuejs.org/zh/api/#shouldprefetch)。\n\n  > 该参数用于服务端渲染\n\n- [cache](https://vuepress.vuejs.org/zh/config/#cache)  此选项可以用于指定 cache 的路径，同时也可以通过设置为 `false` 来在每次构建之前删除 cache。\n\n- [extraWatchFiles](https://vuepress.vuejs.org/zh/config/#extrawatchfiles)  指定额外的需要被监听的文件。\n\n- [patterns](https://vuepress.vuejs.org/zh/config/#patterns)  指定将解析哪些文件。默认值：`['**/*.md', '**/*.vue']`。\n\n  > 你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。`['**/page/*.md']`只包含`page`目录下的`.md`文件\n\n- ","slug":"vuepress-02-basic-config","published":1,"updated":"2022-07-15T01:57:01.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc2001mowgn39cy14rc","content":"<h3 id=\"vuepress配置\"><a href=\"#vuepress配置\" class=\"headerlink\" title=\"vuepress配置\"></a>vuepress配置</h3><p>先领取一份官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/basic-config.html\">https://vuepress.vuejs.org/zh/guide/basic-config.html</a></p>\n<p><code>vuepress</code>的所有配置信息均放在 <code>docs/.vuepress</code> 目录下，因为 <code>vuepress</code> 建议的目录结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress (可选的)</span><br><span class=\"line\">│   │   ├── components (可选的)</span><br><span class=\"line\">│   │   ├── theme (可选的)</span><br><span class=\"line\">│   │   │   └── Layout.vue</span><br><span class=\"line\">│   │   ├── public (可选的)</span><br><span class=\"line\">│   │   ├── styles (可选的)</span><br><span class=\"line\">│   │   │   ├── index.styl</span><br><span class=\"line\">│   │   │   └── palette.styl</span><br><span class=\"line\">│   │   ├── templates (可选的, 谨慎配置)</span><br><span class=\"line\">│   │   │   ├── dev.html</span><br><span class=\"line\">│   │   │   └── ssr.html</span><br><span class=\"line\">│   │   ├── config.js (可选的)</span><br><span class=\"line\">│   │   └── enhanceApp.js (可选的)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── guide</span><br><span class=\"line\">│   │   └── README.md</span><br><span class=\"line\">│   └── config.md</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>目录结构文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由\">https://vuepress.vuejs.org/zh/guide/directory-structure.html</a></p>\n<p>新建配置文件只需要在<code>.vuepress</code>下新建文件<code>config.js</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">mkdir</span> .vuepress &amp;&amp; <span class=\"built_in\">touch</span> .vuepress/config.js</span><br></pre></td></tr></table></figure>\n\n<p>一个 VuePress 网站必要的配置文件是 <code>.vuepress/config.js</code>，它应该导出一个 JavaScript 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello VuePress&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;Just playing around&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整基本配置\"><a href=\"#完整基本配置\" class=\"headerlink\" title=\"完整基本配置\"></a>完整基本配置</h3><p>官方文档地址：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#基本配置\">基本配置</a>，具体配置请参照官方文档。这里只列出一些不好理解的属性。</p>\n<blockquote>\n<p>加 ☆ 的属性表示不知道该属性如何使用。</p>\n</blockquote>\n<ul>\n<li><p>☆ <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#temp\">temp</a>  指定客户端文件的临时目录。</p>\n<blockquote>\n<p>默认的临时文件放在 <code>node_modules/@vuepress/core/.temp</code> 下</p>\n</blockquote>\n</li>\n<li><p>☆ <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#shouldprefetch\">shouldPrefetch</a>  一个函数，用来控制对于哪些文件，是需要生成 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 资源提示的。请参考 <a target=\"_blank\" rel=\"noopener\" href=\"https://ssr.vuejs.org/zh/api/#shouldprefetch\">shouldPrefetch</a>。</p>\n<blockquote>\n<p>该参数用于服务端渲染</p>\n</blockquote>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#cache\">cache</a>  此选项可以用于指定 cache 的路径，同时也可以通过设置为 <code>false</code> 来在每次构建之前删除 cache。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#extrawatchfiles\">extraWatchFiles</a>  指定额外的需要被监听的文件。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#patterns\">patterns</a>  指定将解析哪些文件。默认值：<code>[&#39;**/*.md&#39;, &#39;**/*.vue&#39;]</code>。</p>\n<blockquote>\n<p>你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。<code>[&#39;**/page/*.md&#39;]</code>只包含<code>page</code>目录下的<code>.md</code>文件</p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"vuepress配置\"><a href=\"#vuepress配置\" class=\"headerlink\" title=\"vuepress配置\"></a>vuepress配置</h3><p>先领取一份官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/basic-config.html\">https://vuepress.vuejs.org/zh/guide/basic-config.html</a></p>\n<p><code>vuepress</code>的所有配置信息均放在 <code>docs/.vuepress</code> 目录下，因为 <code>vuepress</code> 建议的目录结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress (可选的)</span><br><span class=\"line\">│   │   ├── components (可选的)</span><br><span class=\"line\">│   │   ├── theme (可选的)</span><br><span class=\"line\">│   │   │   └── Layout.vue</span><br><span class=\"line\">│   │   ├── public (可选的)</span><br><span class=\"line\">│   │   ├── styles (可选的)</span><br><span class=\"line\">│   │   │   ├── index.styl</span><br><span class=\"line\">│   │   │   └── palette.styl</span><br><span class=\"line\">│   │   ├── templates (可选的, 谨慎配置)</span><br><span class=\"line\">│   │   │   ├── dev.html</span><br><span class=\"line\">│   │   │   └── ssr.html</span><br><span class=\"line\">│   │   ├── config.js (可选的)</span><br><span class=\"line\">│   │   └── enhanceApp.js (可选的)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── guide</span><br><span class=\"line\">│   │   └── README.md</span><br><span class=\"line\">│   └── config.md</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>目录结构文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/guide/directory-structure.html#默认的页面路由\">https://vuepress.vuejs.org/zh/guide/directory-structure.html</a></p>\n<p>新建配置文件只需要在<code>.vuepress</code>下新建文件<code>config.js</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">mkdir</span> .vuepress &amp;&amp; <span class=\"built_in\">touch</span> .vuepress/config.js</span><br></pre></td></tr></table></figure>\n\n<p>一个 VuePress 网站必要的配置文件是 <code>.vuepress/config.js</code>，它应该导出一个 JavaScript 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello VuePress&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;Just playing around&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整基本配置\"><a href=\"#完整基本配置\" class=\"headerlink\" title=\"完整基本配置\"></a>完整基本配置</h3><p>官方文档地址：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#基本配置\">基本配置</a>，具体配置请参照官方文档。这里只列出一些不好理解的属性。</p>\n<blockquote>\n<p>加 ☆ 的属性表示不知道该属性如何使用。</p>\n</blockquote>\n<ul>\n<li><p>☆ <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#temp\">temp</a>  指定客户端文件的临时目录。</p>\n<blockquote>\n<p>默认的临时文件放在 <code>node_modules/@vuepress/core/.temp</code> 下</p>\n</blockquote>\n</li>\n<li><p>☆ <a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#shouldprefetch\">shouldPrefetch</a>  一个函数，用来控制对于哪些文件，是需要生成 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 资源提示的。请参考 <a target=\"_blank\" rel=\"noopener\" href=\"https://ssr.vuejs.org/zh/api/#shouldprefetch\">shouldPrefetch</a>。</p>\n<blockquote>\n<p>该参数用于服务端渲染</p>\n</blockquote>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#cache\">cache</a>  此选项可以用于指定 cache 的路径，同时也可以通过设置为 <code>false</code> 来在每次构建之前删除 cache。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#extrawatchfiles\">extraWatchFiles</a>  指定额外的需要被监听的文件。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/config/#patterns\">patterns</a>  指定将解析哪些文件。默认值：<code>[&#39;**/*.md&#39;, &#39;**/*.vue&#39;]</code>。</p>\n<blockquote>\n<p>你可以修改该属性,用来屏蔽部分文件,，让他们在编译时不会被包含进来。<code>[&#39;**/page/*.md&#39;]</code>只包含<code>page</code>目录下的<code>.md</code>文件</p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n"},{"title":"vue-cli3修改打包输出文件目录结构","toc":true,"sidebar":true,"date":"2021-09-02T06:32:49.000Z","_content":"\n[vue-cli3](https://cli.vuejs.org/zh/config/)关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：\n\n- publicPath\n  用来控制各种资源引用的路径，\n\n- outputDir\n- assetsDir\n- indexPath\n","source":"_posts/vue-cli3-change-build-dir.md","raw":"---\ntitle: vue-cli3修改打包输出文件目录结构\ntoc: true\nsidebar: true\ndate: 2021-09-02 14:32:49\ntags:\n  - vue\n\ncategories:\n  - vue\n---\n\n[vue-cli3](https://cli.vuejs.org/zh/config/)关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：\n\n- publicPath\n  用来控制各种资源引用的路径，\n\n- outputDir\n- assetsDir\n- indexPath\n","slug":"vue-cli3-change-build-dir","published":1,"updated":"2022-07-15T01:57:01.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc3001powgn8i1bf19y","content":"<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cli.vuejs.org/zh/config/\">vue-cli3</a>关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：</p>\n<ul>\n<li><p>publicPath<br>用来控制各种资源引用的路径，</p>\n</li>\n<li><p>outputDir</p>\n</li>\n<li><p>assetsDir</p>\n</li>\n<li><p>indexPath</p>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cli.vuejs.org/zh/config/\">vue-cli3</a>关于构建的配置参数一共有以下 4 个，官方的说明已经相对明了，下面仅仅根据个人理解，简单的说明：</p>\n<ul>\n<li><p>publicPath<br>用来控制各种资源引用的路径，</p>\n</li>\n<li><p>outputDir</p>\n</li>\n<li><p>assetsDir</p>\n</li>\n<li><p>indexPath</p>\n</li>\n</ul>\n"},{"title":"vuepress学习系列/3/默认主题配置","toc":true,"sidebar":true,"date":"2020-01-20T03:28:37.000Z","_content":"\n官方文档参见：[默认主题配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页)\n\n\n\n开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容\n```\n.\n├── docs\n│   ├── .vuepress\n|\t|\t└── config.js (配置文件)\n|\t|\n│   ├── guide (指南)\n│   │   ├── README.md (指南首页)\n│   │   ├── basic-config (基本配置)\n│   │   │   └── README.vue (基本配置首页)\n│   │   └── info.md (相关信息页面)\n│   │ \n│   ├── about.md (关于我们)\n│   └── README.md (项目主页)\n│ \n└── package.json\n\n```\n\n\n# 导航栏\n\n\n\n\n\n# 侧边栏\n\n配置项 `themeConfig.sidebar`\n\n侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置`themeConfig.sidebar`\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      '/',\n      '/guide/',\n      '/guide/basic-config/',\n      '/guide/info',\n      '/about',\n    ]\n  }\n}\n```\n\n效果如下：\n\n![1579510148963](vuepress-03-default-theme-config/1579510148963.png)\n\n> 侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据`themeConfig.sidebar`参数内容生成。\n\n特别需要注意的是，文件和文件夹的设置方式的差别：\n\n> 文档中说：你可以省略 `.md` 拓展名，同时以 `/` 结尾的路径将会被视为 `*/README.md`\n\n这句话你可以理解成：针对于文件夹，请设置以 `/` 结尾。\n\n如果侧边栏路径指向一个实际的文件，例如`about.md`文件，侧边栏你可以设置成`/about`，他将实际使用 `/about.md`文件，将生成`http:localhost:8000/about.html`页面路径。\n\n如果是一个目录，例如`guide`，请设置成`/guide/`，他将实际使用 `/guide/README.md`文件，将生成`http:localhost:8000/guide/`\n\n\n\n## 侧边栏名称\n\n默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 `[link, text]` 的数组。\n\n\n\n## 侧边栏层级深度\n\n类似于官网中的侧边栏信息，他存在一定的层级深度。\n\n![1579510936334](vuepress-03-default-theme-config/1579510936334.png)\n\n默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。\n\n```markdown\n# 一级标题\n内容部分\n\n## 二级标题\n内容部分\n\n### 三级标题\n内容部分\n\n```\n\n![1579511258773](vuepress-03-default-theme-config/1579511258773.png)\n\n默认情况下，层级深度只展示到二级标题，但是你可通过`themeConfig.sidebarDepth`属性修改默认行为。\n\n`0`：禁用标题链接，只提取`h1`的标题；\n\n`1`：默认值，他将提取到`h1`、`h2`的标题；\n\n`2`：最大值，将提取`h1`、`h2`、`h3`的标题。\n\n\n\n设置方式有两种：\n\n1. 在`themeConfig.sidebarDepth`设置，他将影响所有页面的侧边栏层级。\n\n2. 在文件中使用`YAML`格式设置，将单独影响当前页面：\n\n   ```markdown\n   ---\n   sidebarDepth: 2\n   ---\n   ```\n\n## 显示所有页面的标题链接\n\n默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 `themeConfig.displayAllHeaders` 设置为 `true` 来显示所有页面的标题链接：\n\n```js\nmodule.exports = {\n  themeConfig: {\n    displayAllHeaders: true // 默认值：false\n  }\n}\n```\n\n> 设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。\n\n\n\n\n\n## 侧边栏分组\n\n分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：\n\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      \"/\",\n      {\n        title: \"指南分组\",  // 必须的\n        path: \"/guide/\",   // 可选的, 应该是一个绝对路径\n        collapsable: true, // 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态\n        sidebarDepth: 2,   // 可选的, 默认值是 1\n        children: [\"/guide/basic-config/\", \"/guide/info\"] // 可选的，没有时将不会有折叠效果\n      },\n\n      \"/about\"\n    ]\n  }\n}\n```\n\n他将生成如下的侧边栏：\n\n![1579512507035](vuepress-03-default-theme-config/1579512507035.png)\n\n## 多个侧边栏\n\n如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：\n\n```\n{\n  \"themeConfig\": {\n    sidebar: {\n      '/guide/': [\n        '',\n        'basic-config/',\n        'info'\n      ],\n      \"/\": [\n        '',\n        'about'\n      ],\n    }\n  }\n}\n```\n\n\n\n![1579513820591](vuepress-03-default-theme-config/1579513820591.png)\n\n>需要注意的是:\n>\n>`sidebar`属性是一个键值对对象，而不是数组。\n>\n>`/` 路径必须要在最后设置，`vuepress`会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置`/`，会导致之后的配置均无法找到，因为`/`可以匹配到任意模式。\n\n","source":"_posts/vuepress-03-default-theme-config.md","raw":"---\ntitle: vuepress学习系列/3/默认主题配置\ntoc: true\nsidebar: true\ndate: 2020-01-20 11:28:37\ntags:\n- vuepress\n\ncategories:\n- vuepress\n---\n\n官方文档参见：[默认主题配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页)\n\n\n\n开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容\n```\n.\n├── docs\n│   ├── .vuepress\n|\t|\t└── config.js (配置文件)\n|\t|\n│   ├── guide (指南)\n│   │   ├── README.md (指南首页)\n│   │   ├── basic-config (基本配置)\n│   │   │   └── README.vue (基本配置首页)\n│   │   └── info.md (相关信息页面)\n│   │ \n│   ├── about.md (关于我们)\n│   └── README.md (项目主页)\n│ \n└── package.json\n\n```\n\n\n# 导航栏\n\n\n\n\n\n# 侧边栏\n\n配置项 `themeConfig.sidebar`\n\n侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置`themeConfig.sidebar`\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      '/',\n      '/guide/',\n      '/guide/basic-config/',\n      '/guide/info',\n      '/about',\n    ]\n  }\n}\n```\n\n效果如下：\n\n![1579510148963](vuepress-03-default-theme-config/1579510148963.png)\n\n> 侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据`themeConfig.sidebar`参数内容生成。\n\n特别需要注意的是，文件和文件夹的设置方式的差别：\n\n> 文档中说：你可以省略 `.md` 拓展名，同时以 `/` 结尾的路径将会被视为 `*/README.md`\n\n这句话你可以理解成：针对于文件夹，请设置以 `/` 结尾。\n\n如果侧边栏路径指向一个实际的文件，例如`about.md`文件，侧边栏你可以设置成`/about`，他将实际使用 `/about.md`文件，将生成`http:localhost:8000/about.html`页面路径。\n\n如果是一个目录，例如`guide`，请设置成`/guide/`，他将实际使用 `/guide/README.md`文件，将生成`http:localhost:8000/guide/`\n\n\n\n## 侧边栏名称\n\n默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 `[link, text]` 的数组。\n\n\n\n## 侧边栏层级深度\n\n类似于官网中的侧边栏信息，他存在一定的层级深度。\n\n![1579510936334](vuepress-03-default-theme-config/1579510936334.png)\n\n默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。\n\n```markdown\n# 一级标题\n内容部分\n\n## 二级标题\n内容部分\n\n### 三级标题\n内容部分\n\n```\n\n![1579511258773](vuepress-03-default-theme-config/1579511258773.png)\n\n默认情况下，层级深度只展示到二级标题，但是你可通过`themeConfig.sidebarDepth`属性修改默认行为。\n\n`0`：禁用标题链接，只提取`h1`的标题；\n\n`1`：默认值，他将提取到`h1`、`h2`的标题；\n\n`2`：最大值，将提取`h1`、`h2`、`h3`的标题。\n\n\n\n设置方式有两种：\n\n1. 在`themeConfig.sidebarDepth`设置，他将影响所有页面的侧边栏层级。\n\n2. 在文件中使用`YAML`格式设置，将单独影响当前页面：\n\n   ```markdown\n   ---\n   sidebarDepth: 2\n   ---\n   ```\n\n## 显示所有页面的标题链接\n\n默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 `themeConfig.displayAllHeaders` 设置为 `true` 来显示所有页面的标题链接：\n\n```js\nmodule.exports = {\n  themeConfig: {\n    displayAllHeaders: true // 默认值：false\n  }\n}\n```\n\n> 设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。\n\n\n\n\n\n## 侧边栏分组\n\n分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：\n\n```json\n{\n  \"themeConfig\": {\n    sidebar: [\n      \"/\",\n      {\n        title: \"指南分组\",  // 必须的\n        path: \"/guide/\",   // 可选的, 应该是一个绝对路径\n        collapsable: true, // 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态\n        sidebarDepth: 2,   // 可选的, 默认值是 1\n        children: [\"/guide/basic-config/\", \"/guide/info\"] // 可选的，没有时将不会有折叠效果\n      },\n\n      \"/about\"\n    ]\n  }\n}\n```\n\n他将生成如下的侧边栏：\n\n![1579512507035](vuepress-03-default-theme-config/1579512507035.png)\n\n## 多个侧边栏\n\n如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：\n\n```\n{\n  \"themeConfig\": {\n    sidebar: {\n      '/guide/': [\n        '',\n        'basic-config/',\n        'info'\n      ],\n      \"/\": [\n        '',\n        'about'\n      ],\n    }\n  }\n}\n```\n\n\n\n![1579513820591](vuepress-03-default-theme-config/1579513820591.png)\n\n>需要注意的是:\n>\n>`sidebar`属性是一个键值对对象，而不是数组。\n>\n>`/` 路径必须要在最后设置，`vuepress`会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置`/`，会导致之后的配置均无法找到，因为`/`可以匹配到任意模式。\n\n","slug":"vuepress-03-default-theme-config","published":1,"updated":"2022-07-15T01:57:01.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc4001rowgn039j2mak","content":"<p>官方文档参见：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页\">默认主题配置</a></p>\n<p>开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress</span><br><span class=\"line\">|\t|\t└── config.js (配置文件)</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">│   ├── guide (指南)</span><br><span class=\"line\">│   │   ├── README.md (指南首页)</span><br><span class=\"line\">│   │   ├── basic-config (基本配置)</span><br><span class=\"line\">│   │   │   └── README.vue (基本配置首页)</span><br><span class=\"line\">│   │   └── info.md (相关信息页面)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── about.md (关于我们)</span><br><span class=\"line\">│   └── README.md (项目主页)</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h1><h1 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h1><p>配置项 <code>themeConfig.sidebar</code></p>\n<p>侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置<code>themeConfig.sidebar</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      &#x27;/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/basic-config/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/info&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/about&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/.com//1579510148963.png\" alt=\"1579510148963\"></p>\n<blockquote>\n<p>侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据<code>themeConfig.sidebar</code>参数内容生成。</p>\n</blockquote>\n<p>特别需要注意的是，文件和文件夹的设置方式的差别：</p>\n<blockquote>\n<p>文档中说：你可以省略 <code>.md</code> 拓展名，同时以 <code>/</code> 结尾的路径将会被视为 <code>*/README.md</code></p>\n</blockquote>\n<p>这句话你可以理解成：针对于文件夹，请设置以 <code>/</code> 结尾。</p>\n<p>如果侧边栏路径指向一个实际的文件，例如<code>about.md</code>文件，侧边栏你可以设置成<code>/about</code>，他将实际使用 <code>/about.md</code>文件，将生成<code>http:localhost:8000/about.html</code>页面路径。</p>\n<p>如果是一个目录，例如<code>guide</code>，请设置成<code>/guide/</code>，他将实际使用 <code>/guide/README.md</code>文件，将生成<code>http:localhost:8000/guide/</code></p>\n<h2 id=\"侧边栏名称\"><a href=\"#侧边栏名称\" class=\"headerlink\" title=\"侧边栏名称\"></a>侧边栏名称</h2><p>默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 <code>[link, text]</code> 的数组。</p>\n<h2 id=\"侧边栏层级深度\"><a href=\"#侧边栏层级深度\" class=\"headerlink\" title=\"侧边栏层级深度\"></a>侧边栏层级深度</h2><p>类似于官网中的侧边栏信息，他存在一定的层级深度。</p>\n<p><img src=\"/.com//1579510936334.png\" alt=\"1579510936334\"></p>\n<p>默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1579511258773.png\" alt=\"1579511258773\"></p>\n<p>默认情况下，层级深度只展示到二级标题，但是你可通过<code>themeConfig.sidebarDepth</code>属性修改默认行为。</p>\n<p><code>0</code>：禁用标题链接，只提取<code>h1</code>的标题；</p>\n<p><code>1</code>：默认值，他将提取到<code>h1</code>、<code>h2</code>的标题；</p>\n<p><code>2</code>：最大值，将提取<code>h1</code>、<code>h2</code>、<code>h3</code>的标题。</p>\n<p>设置方式有两种：</p>\n<ol>\n<li><p>在<code>themeConfig.sidebarDepth</code>设置，他将影响所有页面的侧边栏层级。</p>\n</li>\n<li><p>在文件中使用<code>YAML</code>格式设置，将单独影响当前页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">sidebarDepth: 2</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"显示所有页面的标题链接\"><a href=\"#显示所有页面的标题链接\" class=\"headerlink\" title=\"显示所有页面的标题链接\"></a>显示所有页面的标题链接</h2><p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">themeConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">displayAllHeaders</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 默认值：false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。</p>\n</blockquote>\n<h2 id=\"侧边栏分组\"><a href=\"#侧边栏分组\" class=\"headerlink\" title=\"侧边栏分组\"></a>侧边栏分组</h2><p>分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        title<span class=\"punctuation\">:</span> <span class=\"string\">&quot;指南分组&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 必须的</span></span><br><span class=\"line\">        path<span class=\"punctuation\">:</span> <span class=\"string\">&quot;/guide/&quot;</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 应该是一个绝对路径</span></span><br><span class=\"line\">        collapsable<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态</span></span><br><span class=\"line\">        sidebarDepth<span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 默认值是 1</span></span><br><span class=\"line\">        children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/guide/basic-config/&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/guide/info&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 可选的，没有时将不会有折叠效果</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">&quot;/about&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>他将生成如下的侧边栏：</p>\n<p><img src=\"/.com//1579512507035.png\" alt=\"1579512507035\"></p>\n<h2 id=\"多个侧边栏\"><a href=\"#多个侧边栏\" class=\"headerlink\" title=\"多个侧边栏\"></a>多个侧边栏</h2><p>如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;themeConfig&quot;: &#123;</span><br><span class=\"line\">    sidebar: &#123;</span><br><span class=\"line\">      &#x27;/guide/&#x27;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;basic-config/&#x27;,</span><br><span class=\"line\">        &#x27;info&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;/&quot;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;about&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/.com//1579513820591.png\" alt=\"1579513820591\"></p>\n<blockquote>\n<p>需要注意的是:</p>\n<p><code>sidebar</code>属性是一个键值对对象，而不是数组。</p>\n<p><code>/</code> 路径必须要在最后设置，<code>vuepress</code>会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置<code>/</code>，会导致之后的配置均无法找到，因为<code>/</code>可以匹配到任意模式。</p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>官方文档参见：<a target=\"_blank\" rel=\"noopener\" href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#首页\">默认主题配置</a></p>\n<p>开始之前假设你建立了以下结构的文件内容，之后的设置也会参照这份文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── .vuepress</span><br><span class=\"line\">|\t|\t└── config.js (配置文件)</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">│   ├── guide (指南)</span><br><span class=\"line\">│   │   ├── README.md (指南首页)</span><br><span class=\"line\">│   │   ├── basic-config (基本配置)</span><br><span class=\"line\">│   │   │   └── README.vue (基本配置首页)</span><br><span class=\"line\">│   │   └── info.md (相关信息页面)</span><br><span class=\"line\">│   │ </span><br><span class=\"line\">│   ├── about.md (关于我们)</span><br><span class=\"line\">│   └── README.md (项目主页)</span><br><span class=\"line\">│ </span><br><span class=\"line\">└── package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h1><h1 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h1><p>配置项 <code>themeConfig.sidebar</code></p>\n<p>侧边栏默认是一个包含了多个链接的数组，数组中的每一个真实存在的文件路径。按照上面的目录结构，你想建立相应的侧边栏，你可以如下设置<code>themeConfig.sidebar</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      &#x27;/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/basic-config/&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/guide/info&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      &#x27;/about&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/.com//1579510148963.png\" alt=\"1579510148963\"></p>\n<blockquote>\n<p>侧边栏的结构和文件实际的目录结构没有关系，侧边栏信息根据<code>themeConfig.sidebar</code>参数内容生成。</p>\n</blockquote>\n<p>特别需要注意的是，文件和文件夹的设置方式的差别：</p>\n<blockquote>\n<p>文档中说：你可以省略 <code>.md</code> 拓展名，同时以 <code>/</code> 结尾的路径将会被视为 <code>*/README.md</code></p>\n</blockquote>\n<p>这句话你可以理解成：针对于文件夹，请设置以 <code>/</code> 结尾。</p>\n<p>如果侧边栏路径指向一个实际的文件，例如<code>about.md</code>文件，侧边栏你可以设置成<code>/about</code>，他将实际使用 <code>/about.md</code>文件，将生成<code>http:localhost:8000/about.html</code>页面路径。</p>\n<p>如果是一个目录，例如<code>guide</code>，请设置成<code>/guide/</code>，他将实际使用 <code>/guide/README.md</code>文件，将生成<code>http:localhost:8000/guide/</code></p>\n<h2 id=\"侧边栏名称\"><a href=\"#侧边栏名称\" class=\"headerlink\" title=\"侧边栏名称\"></a>侧边栏名称</h2><p>默认情况下，侧边栏将自动提取文件内第一个标题作为导航标题，无论当前标题是第几级标题，如果你想指定标题名称，请使用一个格式为 <code>[link, text]</code> 的数组。</p>\n<h2 id=\"侧边栏层级深度\"><a href=\"#侧边栏层级深度\" class=\"headerlink\" title=\"侧边栏层级深度\"></a>侧边栏层级深度</h2><p>类似于官网中的侧边栏信息，他存在一定的层级深度。</p>\n<p><img src=\"/.com//1579510936334.png\" alt=\"1579510936334\"></p>\n<p>默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\">内容部分</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1579511258773.png\" alt=\"1579511258773\"></p>\n<p>默认情况下，层级深度只展示到二级标题，但是你可通过<code>themeConfig.sidebarDepth</code>属性修改默认行为。</p>\n<p><code>0</code>：禁用标题链接，只提取<code>h1</code>的标题；</p>\n<p><code>1</code>：默认值，他将提取到<code>h1</code>、<code>h2</code>的标题；</p>\n<p><code>2</code>：最大值，将提取<code>h1</code>、<code>h2</code>、<code>h3</code>的标题。</p>\n<p>设置方式有两种：</p>\n<ol>\n<li><p>在<code>themeConfig.sidebarDepth</code>设置，他将影响所有页面的侧边栏层级。</p>\n</li>\n<li><p>在文件中使用<code>YAML</code>格式设置，将单独影响当前页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">sidebarDepth: 2</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"显示所有页面的标题链接\"><a href=\"#显示所有页面的标题链接\" class=\"headerlink\" title=\"显示所有页面的标题链接\"></a>显示所有页面的标题链接</h2><p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">themeConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">displayAllHeaders</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 默认值：false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设置该属性，所有侧边栏的所有菜单均会展开，否则，只将展开当前获得菜单。</p>\n</blockquote>\n<h2 id=\"侧边栏分组\"><a href=\"#侧边栏分组\" class=\"headerlink\" title=\"侧边栏分组\"></a>侧边栏分组</h2><p>分组是将在同一个组内的菜单生成一个折叠的菜单，如果将上例中的侧边栏修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;themeConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    sidebar<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        title<span class=\"punctuation\">:</span> <span class=\"string\">&quot;指南分组&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 必须的</span></span><br><span class=\"line\">        path<span class=\"punctuation\">:</span> <span class=\"string\">&quot;/guide/&quot;</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 应该是一个绝对路径</span></span><br><span class=\"line\">        collapsable<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 可选的, 是否可折叠，默认值是 true，为false时该分组将永远都是展开状态</span></span><br><span class=\"line\">        sidebarDepth<span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 可选的, 默认值是 1</span></span><br><span class=\"line\">        children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/guide/basic-config/&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/guide/info&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 可选的，没有时将不会有折叠效果</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">&quot;/about&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>他将生成如下的侧边栏：</p>\n<p><img src=\"/.com//1579512507035.png\" alt=\"1579512507035\"></p>\n<h2 id=\"多个侧边栏\"><a href=\"#多个侧边栏\" class=\"headerlink\" title=\"多个侧边栏\"></a>多个侧边栏</h2><p>如果你想为不同的页面组来显示不同的侧边栏，你可以如下设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;themeConfig&quot;: &#123;</span><br><span class=\"line\">    sidebar: &#123;</span><br><span class=\"line\">      &#x27;/guide/&#x27;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;basic-config/&#x27;,</span><br><span class=\"line\">        &#x27;info&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;/&quot;: [</span><br><span class=\"line\">        &#x27;&#x27;,</span><br><span class=\"line\">        &#x27;about&#x27;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/.com//1579513820591.png\" alt=\"1579513820591\"></p>\n<blockquote>\n<p>需要注意的是:</p>\n<p><code>sidebar</code>属性是一个键值对对象，而不是数组。</p>\n<p><code>/</code> 路径必须要在最后设置，<code>vuepress</code>会按顺序遍历侧边栏配置来寻找匹配的配置，如果先配置<code>/</code>，会导致之后的配置均无法找到，因为<code>/</code>可以匹配到任意模式。</p>\n</blockquote>\n"},{"title":"docker入门学习笔记","toc":true,"sidebar":true,"date":"2022-07-11T08:34:10.000Z","_content":"\n## 安装\n\n官方文档：[https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\n\n\n\n```\n# 1. 卸载旧版本\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n\n# 2. 安装前置工具/依赖\nsudo yum install -y yum-utils\n\n# 3. 设置镜像仓库\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n# 3. 使用阿里云镜像\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \n# 4. 安装最新版docker \n# docker-ce 社区版本，docker-ee 企业版，推荐社区版\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 4. 安装指定版本docker\n# 4.1 列出所有版本可用版本\nyum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64                3:20.10.9-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.8-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.7-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.6-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.5-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.4-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.3-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.2-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.17-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.16-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.15-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.14-3.el8                docker-ce-stable\n\n# 4.2 安装指定版本\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-compose-plugin\n# 4.2 选择需要的版本，通过第二列，“：”之后和“-”之前的部分，是版本号（VERSION_STRING）\n# 例如安装第一个20.10.9版本\nsudo yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io docker-compose-plugin\n\n# 5. 启动docker\nsudo systemctl start docker\n\n# 6. 查看docker版本信息\ndocker version\n\nClient: Docker Engine - Community\n Version:           20.10.17\n API version:       1.41\n Go version:        go1.17.11\n Git commit:        100c701\n Built:             Mon Jun  6 23:03:11 2022\n OS/Arch:           linux/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.17\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.17.11\n  Git commit:       a89b842\n  Built:            Mon Jun  6 23:01:29 2022\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.6.6\n  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1\n runc:\n  Version:          1.1.2\n  GitCommit:        v1.1.2-0-ga916309\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n  \n# 7. 使用hello-world测试docker是否按照成功\nsudo docker run hello-world\n\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n2db29710123e: Pull complete\nDigest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n```\n\n\n\n```\n# 查看docker下载的所有镜像\ndocker images\n\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    feb5d9fea6a5   9 months ago   13.3kB\n```\n\n\n\n## 卸载\n\n[https://docs.docker.com/engine/install/centos/#uninstall-docker-engine](https://docs.docker.com/engine/install/centos/#uninstall-docker-engine)\n\n\n\n````\n# 卸载依赖\nsudo yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 删除目录\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n````\n\n\n\n`/var/lib/docker` 是docker的默认工作路径。\n\n\n\n## docker run 执行流程\n\n执行`docker run`时，首先会在本地查找镜像是否存在，如果存在，则直接运行。如果不存在，则到远程docker hub上进行下载，如果下载成功，则运行，如果不存在，则报错。\n\n\n\n## docker 原理\n\n Docker 使用客户端-服务器架构。Docker*客户端与 Docker守护进程对话，后者负责构建、运行和分发 Docker 容器的繁重工作 。 Docker 守护程序 ( `dockerd`) 侦听 Docker API 请求并管理 Docker 对象，例如图像、容器、网络和卷。 \n\n\n\nDocker 使用一种称为*容器*`namespaces`的技术来提供隔离的工作空间。当您运行容器时，Docker 会为该容器创建一组 *命名空间。*\n\n这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。\n\n![docker](./learn-the-abc-of-docker/architecture.svg)\n\n\n\n## docker信息命令\n\n### docker verion\n\n显示docker的基本信息\n\n### docker info\n\n显示docker的系统信息，包括镜像和容器数量等等\n\n```\ndocker info\nClient:\n Context:    default\n Debug Mode: false\n Plugins:\n  app: Docker App (Docker Inc., v0.9.1-beta3)\n  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)\n  compose: Docker Compose (Docker Inc., v2.6.0)\n  scan: Docker Scan (Docker Inc., v0.17.0)\n\nServer:\n Containers: 1\n  Running: 0\n  Paused: 0\n  Stopped: 1\n Images: 1\n Server Version: 20.10.17\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n  userxattr: false\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Cgroup Version: 1\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1\n runc version: v1.1.2-0-ga916309\n init version: de40ad0\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.18.0-305.10.2.el8_4.x86_64\n Operating System: CentOS Linux 8 (Core)\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 3.649GiB\n Name: VM-16-13-centos\n ID: KFBX:BDVF:ADQ4:AZAB:YA5L:TBQS:Z3I2:JOHA:ITTB:SQDC:E42M:M73J\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n```\n\n### docker  命令 --help\n\n命令文档  [https://docs.docker.com/reference/](https://docs.docker.com/reference/)\n\n\n\n## 镜像命令\n\n### docker image\n\n镜像管理\n\n```\ndocker images\n\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    feb5d9fea6a5   9 months ago   13.3kB\n\n# REPOSITORY \t镜像的仓库源，容器名称\n# TAG\t\t\t镜像的标签\n# IMAGE ID\t\t镜像ID\n# CREATED\t\t镜像创建时间\n# SIZE\t\t\t镜像大小\n```\n\n```\n# 可选性\n-a, --all\t\t显示所有镜像\n-q, --quiet\t\t仅显示镜像ID\n```\n\n\n\n### docker search\n\n搜索镜像\n\n网页版镜像仓库地址: [https://hub.docker.com/search](https://hub.docker.com/search)\n\n```\n# 所有所有镜像\ndocker search mysql\nNAME\tDESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql\tMySQL is a widely used, open-source relation…   12851     [OK]\nmariadb\tMariaDB Server is a high performing open sou…   4926      [OK]\n\n# 可选项\n-f, --filter\n--format\n--limit\n\n\n# 按条件搜索，STARS大于600 且 是官方仓库\n# 两种写法, 多条件使用多个--filter\ndocker search mysql --filter=stars=600 --filter is-official=true\n\nNAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql     MySQL is a widely used, open-source relation…   12851     [OK]\nmariadb   MariaDB Server is a high performing open sou…   4926      [OK]\n\n# --filter支持三个条件\n# stars\t\t\t\t收藏数\t\tstars=number\n# is-automated\t\t自动化 \tis-automated=true/false\n# is-official\t\t官方\t\t is-official=true/false\n\n```\n\n\n\n### docker pull\n\n下载镜像\n\n```\n# docker pull 镜像名[:tag]\ndocker pull mysql\nUsing default tag: latest\t\t\t# 如果不写tag，默认是latest\nlatest: Pulling from library/mysql\t# 分层下载，联合文件系统，docker image核心\ne54b73e95ef3: Pull complete\nbb429e544310: Pull complete\nc148b3f9047c: Pull complete\na1dd213a3236: Pull complete\n297095d1476d: Pull complete\n87f3aa837301: Pull complete\n535019436481: Pull complete\n23722cff1cc3: Pull complete\neb19883dc4c6: Pull complete\n6eaa2c236095: Pull complete\nDigest: sha256:444f037733d01fc3dfc691a9ab05e346629e8e4d3a6c75da864f21421fb38ced\t# 签名\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\t\t#docker image 真实地址\n\n# 以下两个命令等价\ndocker pull mysql\ndocker pull docker.io/library/mysql:latest\n```\n\n\n\n### docker rmi\n\n删除镜像\n\n```\ndocker rmi -f hello-world\n\nUntagged: hello-world:latest\nUntagged: hello-world@sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651\nDeleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412\n\ndocker rmi -f image_id[:tag]\t\t# 删除指定镜像\ndocker rmi - f image_id image_id \t# 删除多个镜像\n```\n\n\n\n## 容器命令\n\n有镜像才能创建容器\n\n\n\n### 新建容器并启动 docker run\n\n```\ndocker run [参数] image\n\n# 参数说明\n--name=\"容器名称\"\t容器名字，启动容器的名称，便于区分\n-d\t\t\t\t\t后台运行\n-it\t\t\t\t\t使用交互方式运行,进入容器内容查看内容\n-p \t\t\t\t\t指定容器端口 -p 8080:80\n\t-p ip:主机端口:容器端口\n\t-p 主机端口:容器端口(最常用)\n\t-p 容器端口\n-P\t\t\t\t\t随机指定端口\n```\n\n\n\n```\n# cmd 下启动cenos\ndocker run -it centos /bin/sh\n[root@5dda638536fa /]#\n\n# centos 下启动centos\ndocker run -it centos /bin/bash\n[root@5dda638536fa /]#\n\n# exit停止容器并退出容器\n[root@5dda638536fa /]# exit\n# ctrl + P + Q 不停止容器 退出容器\n```\n\n\n\n### docker ps\n\n列出运行的容器\n\n\n\n```\n# docker ps [可选参数]\n\n# 列出正在运行的容器\ndocker ps\n\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES\n113ffb59a550   nginx     \"/docker-entrypoint.…\"   6 minutes ago   Up 6 minutes   0.0.0.0:8080->80/tcp   nginx-01\n\n# CONTAINER ID \t容器ID\n# IMAGE\t\t\t镜像名称\n# COMMAND\t\t启动命令\n# CREATED\t\t容器创建时间\n# STATUS\t\t运行状态\n# PORTS\t\t\t端口映射情况\n# NAMES\t\t\t容器名称\n\n# 列出所有容器，包括已经停止的\ndocker ps -a\n\n# 根据名称模糊搜索\ndocker ps -a --filter \"name=ng\"\n\n# 根据容器ID模糊搜索\ndocker ps -a --filter \"id=cca\"\n\n# 可选参数\n-a\t\t\t\t\t\t全部\n-n num\t\t\t\t\t最近创建的几条\n-l\t\t\t\t\t\t最后创建的一条\n-q\t\t\t\t\t\t只显示ID\n-s\t\t\t\t\t\t显示size大小\n--no-trunc\t\t\t\t显示明细信息， don't truncate output 不截断输出\n-f, --filter\t\t\t过滤条件 -f \"key=value\"\n\tid\n\tname\n\tlabel\n\tstatus\t\t\t\tOne of created, restarting, running, removing, paused, exited, or dead\n\t\n```\n\n\n\n### docker rm\n\n删除容器\n\n```\n# 删除指定容器\ndocker rm bfb2710c293d\n\n# 删除所有不在运行的容器\ndocker rm $(docker ps -aq -f \"status=exited\")\n# 等价于\ndocker ps -aq -f \"status=exited\" | xargs docker rm\n\n# 可选参数\n-f\t\t\t\t强制删除正在运行的容器\n```\n\n\n\n\n\n### docker start/restart\n\n启动容器\n\n```\n# 启动容器\ndocker start 84480543d8cd\n\n# 重启容器，重启时间间隔2秒\ndocker restart -t 10 84480543d8cd\n```\n\n\n\n### docker stop/kill\n\n停止容器\n\n\n\n```\n# 优雅退出容器\ndocker stop 84480543d8cd\n\n# 强制退出容器\ndocker kill 84480543d8cd\n```\n\n\n\n## 常用命令\n\n### 后台启动容器 docker run \n\n```\n# 使用-d指令后台启动\ndocker run -d centos\n\n# 该命令存在问题，通过docker ps 发现容器被停止了\n# docker容器使用后台运行时，必须要有一个前台进程，如果没有就会自动停止，该方式就缺乏前台进程导致启动后自动停止\n\n# 使用-it保持容器后台运行\ndocker run --name centos-03 -d  -it centos /bin/sh\n```\n\n\n\n### 查看日志 docker logs\n\n```\n# 监听容器日志\ndocker logs -tf 9164f68ea536\n\n# 输出指定时间之后的日志\ndocker logs --since 2022-07-12T08:15:04.719814800Z 9164f68ea536\n\n# 可选参数\n-f\t\t\t\t\t监听日志输出\n-n, --tail\t\t\t输出最后N行日志\n-t, --timestamps\t显示时间戳，每一行日志前输出时间戳信息\n-since\t\t\t\t输出指定时间之后的日志\n-until\t\t\t\t输出指定时间之前的日志\n```\n\n\n\n### 查看容器进程 docker top\n\n```\ndocker top 9164f68ea536\nUID\t\tPID\t\tPPID\tC\tSTIME\tTTY\t\tTIME\t\tCMD\nroot\t3529\t3509\t0\t08:15\t?\t\t00:00:00\t/bin/sh\n```\n\n\n\n### 查看容器元数据 docker inspect\n\n```\n# 查看容器元数据\ndocker inspect 9164f68ea536\n```\n\n\n\n### 进入容器 docker exec/attach\n\n```\n# 方式一\n# 新建一个命令行并进入\ndocker exec -it 容器ID bashShell\n\ndocker exec -it 9164f68ea536 /bin/bash\n\n# 方式二\n# 进入正在运行的命令行\ndocker attach 容器ID\n\ndocker attach 9164f68ea536\n\n```\n\n\n\n### 拷贝命令 docker copy\n\n\n\n```\n# 复制容器文件到本地\ndocker cp 容器:路径 本机路径\n\n# 复制本地文件到容器\ndocker cp 本机路径 容器:路径\n\n# 在centos中新建一个文件\ndocker exec -it -w ~ centos-01 touch /tmp/test.txt\n# 拷贝容器文件到当前目录\ndocker cp centos-01:/tmp/test.txt ./\n\n# 本地新建文件并复制到容器\necho \"test\" >> test2.txt; docker cp ./test2.txt centos-01:/tmp/\n# 查看容器内目录\ndocker exec -it centos-01 ls /tmp\ntest.txt  test2.txt\n```\n\n\n\n## 联合文件系统\n\n\n\n\n\n## commit 镜像\n\n将一个容器生成一个新的镜像\n\n```\ndocker commit 可选参数 容器ID 镜像名称[:tag]\n\n# 将一个容器生成一个本地镜像\ndocker commit -a caoruiy -m \"test helloworld\" c4af83c1f703 hello-world-cr:v1.0.0\n```\n\n\n\n## 容器数据卷\n\n使用容器时，希望容器之间有一个数据共享的技术，Docker中产生的数据，可以同步到本地。可以将容器内的数据，挂载到本地。\n\n这是一个容器数据持久化和同步的操作，使得容器间可以数据共享。\n\n### 使用方式一 -v\n\n```\ndocker run -it -v 主机目录:容器目录 镜像 交互命令\n\n# 挂载的形式启动容器\n# 修改容器内容的文件，在主机上修改文件，两边均会同步\n# 如果容器停止，在本地上修改文件内容，启动容器后，容器内也会进行同步\ndocker run -it -v /c/Users/Lenovo/Desktop/centos:/home centos /bin/bash\n# 容器内部操作文件\n[root@6b77aeb1d6de home]# cd /home\n[root@6b77aeb1d6de home]# mkdir test\n\n# 退出容器\nctrl + p + q\n\n# 列出本地目录内容\nls /c/Users/Lenovo/Desktop/centos\ntest\n```\n\n#### 具名挂载和匿名挂载\n\n```\n# 匿名挂载，挂载容器内的目录时，不指定具体的本地地址，本地卷名称\ndocker run -it -v 容器目录 镜像 交互命令\n\n# 匿名挂载一个卷\ndocker run -d -it -v /home centos /bin/sh\n\n# 查看docker 卷\ndocker volume ls\n\nDRIVER    VOLUME NAME\nlocal     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\n```\n\n\n\n```\n# 具名挂载，挂载容器内的目录时，指定一个卷名称\n# 卷名称就是一个字符串,不是一个 / 或者 ./ 的路径地址\ndocker run -it -v 卷名称:容器目录 镜像 交互命令\n\n# 具名挂载\ndocker run -d -it -v juming-cento:/home centos /bin/sh\n\n# 查看docker 卷\ndocker volume ls\n\nDRIVER    VOLUME NAME\nlocal     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\nlocal     juming-cento\n```\n\n\n\n匿名挂载和具名挂载，具体的挂载目录到底在哪里？\n\n```\n# 查看docker元信息\ndocker inspect 433938cde9c0\n\n# 具名挂载时挂载信息输出\n\"Mounts\": [\n  {\n      \"Type\": \"volume\", // 类型,挂载\n      \"Name\": \"juming-cento\", // 挂载名称\n      \"Source\": \"/var/lib/docker/volumes/juming-cento/_data\", // 具体的本机挂载地址\n      \"Destination\": \"/home\", // 容器内地址\n      \"Driver\": \"local\",\n      \"Mode\": \"z\",\n      \"RW\": true,\n      \"Propagation\": \"\"\n  }\n]\n\n# 匿名挂载时挂载信息输出\n\"Mounts\": [\n    {\n        \"Type\": \"volume\",\n        \"Name\": \"12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\",\n        \"Source\": \"/var/lib/docker/volumes/12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9/_data\",\n        \"Destination\": \"/home\",\n        \"Driver\": \"local\",\n        \"Mode\": \"\",\n        \"RW\": true,\n        \"Propagation\": \"\"\n    }\n]\n\n# 加载点都在 /var/lib/docker/volumes/xxx/_data目录下\n\n```\n\n\n\n\n\n### 使用方式二 DockerFile\n\nDockerFile是用来构建docker镜像的一个构建文件。脚本。\n\n[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)\n\n\n\n# 数据卷容器\n\n为了实现多个容器之间的数据共享，最好的方式就是让多个容器挂载到一个目录地址作为数据卷。所谓的数据卷容器，就是作为存放数据的容器，其他容器加载到该容器上，实现数据共享。\n\n`--volumes-from` 参数，可以从引用的容器中，挂载所有自定义的卷，需要注意的是“自定义的卷”。\n\n\n\n```\n# 首先启动一个容器，并挂载一个卷\ndocker run -it -name c1 -v ~/centos01:/centos01 centos /bin/sh\n\n# 在容器c1 centos01卷内新建一个目录11\nsh-4.4# cd centos01/\nsh-4.4# ls\nsh-4.4# mkdir 11\nsh-4.4# ls\n11\n\n# 退出容器，在本地目录centos01中发现相同内容，挂载成功\n[root@VM-16-13-centos ~]# ls\ncentos01  test2.txt  test.txt\n[root@VM-16-13-centos ~]# ls centos01/\n11\n\n# 新建容器c2，c1作为数据卷容器\ndocker run -it --name c2 --volumes-from c1 centos /bin/sh\n\n# 查看容器内挂载数据\nsh-4.4# cd centos01/\nsh-4.4# ls\n11\n\n# 在容器c2中centos01卷下，新建文件夹22\nsh-4.4# mkdir 22\nsh-4.4# ls\n11  22\n\n# 退出容器，查看本地数据\n[root@VM-16-13-centos ~]# ls centos01/\n11  22\n\n# 进入容器c1 查看数据\n[root@VM-16-13-centos ~]# docker exec -it c1 /bin/sh\nsh-4.4# ls centos01/\n11  22\n\n```\n\n![1657758523904](./learn-the-abc-of-docker/1657758523904.png)\n\n删除数据卷容器c1，数据也不会丢失。**共享卷实际是一个备份的概念。**\n\n```\n# 查看本地容器，一共有c1 c2两个容器\n[root@VM-16-13-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES\ncfe02ba04ad7   centos    \"/bin/sh\"   5 minutes ago   Up 5 minutes             c2\nf7d563151f92   centos    \"/bin/sh\"   6 minutes ago   Up 6 minutes             c1\n\n# 强制删除数据卷容器c1\n[root@VM-16-13-centos ~]# docker rm -f c1\nc1\n\n[root@VM-16-13-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES\ncfe02ba04ad7   centos    \"/bin/sh\"   5 minutes ago   Up 5 minutes             c2\n\n# 查看本地目录数据依然存在\n[root@VM-16-13-centos ~]# ls centos01/\n11  22\n\n# 容器c2中的数据依然存在\n[root@VM-16-13-centos ~]# docker exec -it c2 /bin/sh\nsh-4.4# ls centos01/\n11  22\n\n# 在容器c2中创建新目录33\nsh-4.4# mkdir centos01/33\nsh-4.4# ls centos01/\n11  22  33\nsh-4.4# read escape sequence\n\n# 退出容器后，查看本地目录，数据依然同步\n[root@VM-16-13-centos ~]# ls centos01/\n11  22  33\n```\n\n数据卷容器可以做多个容器之间的数据共享，**数据卷的生命周期直到没有容器使用为止**。所以删除任意一个容器不影响数据卷的信息共享。\n\n\n\n\n\n# docker build\n\n从Dockerfile构建镜像\n\n```\ndocker build [可选项] 向下文目录\n\n# 可选项\n-f, --file \t\t#Dockerfile的名称，不指定是默认是当前文件夹的Dickerfile文件\n-t, --tag \n```\n\n\n\n# .dockerignore\n\n排除部分构建文件，防止将大文件或者敏感文件添加到构建上下文中。\n\n每行一个目录或者文件地址，支持形式有\n\n```\n# comment\t\t\t注释信息\ntemp?\t\t\t\t排除根目录名称以temp开头的,后接单个字符的目录或文件, 如: /tempa\n*/temp*\t\t\t\t排除以temp开头的子目录或文件，如: /a/tempFile.txt  /a/tempDir\n*/*/temp*\t\t\t排除以temp开头的两级子目录或文件，如: /a/b/tempFile.txt  /a/b/tempDir\n**/tmp*\t\t\t\t排除所有目录中的以temp开头的目录或文件\n!temp*\t\t\t\t!表示排除例外，表示剔除根目录下以temp开头的目录或文件。\n```\n\n基本原则为`?`匹配单个字符；`*`匹配多个字符。\n\n```\n# 以下写法的含义表示保留除了根目录下的以以temp开头的目录或文件外的，所有层级下的以temp开头的目录或文件\n**/tmp*\n!temp*\n\n# 示例: 除了/tempa 其他文件均会被剔除\n/tempa\n/tempb/a\n/a/tempc\n/a/b/tempd\n```\n\n\n\n\n\n# DockerFile\n\ndocker file是用来构建docker镜像的文件，是一个命令脚本文件。\n\n构建镜像的步骤：\n\n1. 编写dockerfile文件\n2. 使用docker build 构建一个镜像\n3. 使用docker run运行进行\n4. 使用docker push 发布镜像\n\n## dockerFile指令\n\n```\nARG\t\t\t# 定义变量，提供给FROM使用\nFROM \t\t# 基础镜像，镜像构建开始位置\nMAINTAINER\t# 负责人，姓名+邮箱\nRUN\t\t\t# 进行构建时需要执行的命令\nADD\t\t\t# 复制文件，往镜像中添加内容\nWORKDIR\t\t# 设置镜像的工作目录\nVOLUME\t\t# 挂载目录\nEXPOST\t\t# 对外暴露的端口\nRUN\t\t\t#\nCMD\t\t\t# 指定容器启动时候要运行的命令，相当于为容器执行提供默认值。只有最后一个会生效，可以被替代\nENTRYPOINT\t# 指定容器启动时候要运行的命令，不可替代，可以追加\nONBUILD\t\t# \nCOPY\t\t# 类似ADD，拷贝内容到镜像中\nENV\t\t\t# 构建时设置环境变量\n\n```\n\n## RUN\n\n```\n# 该命令支持两种写法，shell和exec，\n# shell形式将改变默认的shell，linux下默认是/bin/sh -c，window下默认是cmd /S /C\n# exec形式，因为可以避免shell字符串修改\n# RUN <command>\t\t\t\t\t\t\t\t\t# shell形式\n# RUN [\"executable\", \"param1\", \"param2\"]\t\t# exec形式\n\n# 可以使用\\符号进行命令换行书写\nRUN /bin/sh -c 'cd /home; \\\nls -al'\n# 等价于\nRUM /bin/sh -c 'cd /home; ls -al'\n\n\n# 如果需要使用其他shell, 请使用exec形式\n# exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (\") 而不是单引号 (')\nRUN [\"/bin/bash\", \"-c\", \"cd /home\", \"ls -al\"]\n```\n\n> exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (\") 而不是单引号 (')\n\n\n\n> exec模式，不是直接调用命令，所以不会引用shell脚本命令，如果你希望启动时使用shell，可以明确指定hell。就像这样：RUN [\"/bin/bash\", \"-c\", \"cd /home\", \"ls -al\"]\n\n\n\n\n\n基于centos制作自己的镜像\n\n```\nmkdir my-centos\ncd my-centos\nvim Dockerfile\n```\n编写Dockerfile文件\n\n```\nFROM centos\nRUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\nRUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\nRUN yum clear\nRUN yum makecache\nRUN yum -y install wget\nRUN echo '---------------------over--------------------'\n```\n生成镜像\n```\ndocekr build -t my-centyos .\n```\n```\n# 运行镜像\ndocker run -it --name mc1 my-centos /bin/sh\n# 容器内执行,已经包含wget命令\n[root@8d8302624841 /]# wget\nwget: missing URL\nUsage: wget [OPTION]... [URL]...\n\nTry `wget --help' for more options.\n\n```\n\n\n\n## CMD 和 ENTRYPOINT的区别\n\nCMD是执行运行的默认命令，当镜像运行时不指定任何命令时，默认的CMD命令会被执行，该指令可以在运行时被替换。\n\n### CMD制作镜像\n\n```\nFROM centos\nRUN echo 'This is a test image'\nCMD ls -a\n```\n\n\n\n```\n# 编译生成镜像\ndocker build -t my-centos .\n\n# 运行时不指定默认命令，将执行  ls -a\ndocker run -it my-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行时指定默认命令，执行信息被新命令覆盖\n[root@VM-16-13-centos my-centos]# docker run -it my-centos ls -al\ntotal 56\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 .\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 ..\n-rwxr-xr-x   1 root root    0 Jul 14 06:28 .dockerenv\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 Jul 14 06:28 dev\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Sep 15  2021 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 129 root root    0 Jul 14 06:28 proc\ndr-xr-x---   2 root root 4096 Sep 15  2021 root\ndrwxr-xr-x  11 root root 4096 Sep 15  2021 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 Jul 14 06:28 sys\ndrwxrwxrwt   7 root root 4096 Sep 15  2021 tmp\ndrwxr-xr-x  12 root root 4096 Sep 15  2021 usr\ndrwxr-xr-x  20 root root 4096 Sep 15  2021 var\n```\n\n\n\n### ENTRYPOINT制作镜像\n\n```\nFROM centos\nRUN echo 'This is a test image'\nENTRYPOINT [\"ls\", \"-a\"]\n```\n\n值得注意的是，此处的ENTRYPOINT写法是采用exec形式（[命令，参数，参数]）（ENTRYPOINT [\"ls\", \"-a\"]）只有该形式，在运行镜像时才能追加参数。\n\n如果采用shell命令形式（ENTRYPOINT 字符串）（ENTRYPOINT ls -a），他将在` /bin/sh -c `中执行，并会忽略docker run时的命令参数\n\n\n\nexec 形式不会调用shell命令，这就意味着，使用该命令时，你无法通过命令行外壳进入容器，如想使用shell处理，可以这么写` ENTRYPOINT [ \"sh\", \"-c\", \"ls -a\" ] `\n\n```\n# 生成镜像\ndocker build -t entrypoint-centos .\n\n# 运行,默认命令\ndocker run -it --name ec1 entrypoint-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行,使用默认命令,追加参数\ndocker run -it --name ec2 entrypoint-centos -l\ntotal 56\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 .\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 ..\n-rwxr-xr-x   1 root root    0 Jul 14 06:43 .dockerenv\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 Jul 14 06:43 dev\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Sep 15  2021 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 126 root root    0 Jul 14 06:43 proc\ndr-xr-x---   2 root root 4096 Sep 15  2021 root\ndrwxr-xr-x  11 root root 4096 Sep 15  2021 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 Jul 14 06:43 sys\ndrwxrwxrwt   7 root root 4096 Sep 15  2021 tmp\ndrwxr-xr-x  12 root root 4096 Sep 15  2021 usr\ndrwxr-xr-x  20 root root 4096 Sep 15  2021 var\n```\n\n\n\n### shell形式的ENTRYPOINT\n\n如果指定字符串形式的命令，该命令会在` /bin/sh -c `内执行，并会忽略命令行中的参数\n\n```\nFROM centos\nRUN echo 'This is a test image'\nENTRYPOINT ls -a\n```\n\n\n\n```\n# 运行,默认命令\ndocker run -it --name ec1 entrypoint-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行,使用默认命令,追加参数\ndocker run -it --name ec2 entrypoint-centos -l\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/learn-the-abc-of-docker.md","raw":"---\ntitle: docker入门学习笔记\ntoc: true\nsidebar: true\ndate: 2022-07-11 16:34:10\ntags: docker\ncategories:\n- docker\n---\n\n## 安装\n\n官方文档：[https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\n\n\n\n```\n# 1. 卸载旧版本\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n\n# 2. 安装前置工具/依赖\nsudo yum install -y yum-utils\n\n# 3. 设置镜像仓库\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n# 3. 使用阿里云镜像\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \n# 4. 安装最新版docker \n# docker-ce 社区版本，docker-ee 企业版，推荐社区版\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 4. 安装指定版本docker\n# 4.1 列出所有版本可用版本\nyum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64                3:20.10.9-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.8-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.7-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.6-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.5-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.4-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.3-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.2-3.el8                 docker-ce-stable\ndocker-ce.x86_64                3:20.10.17-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.16-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.15-3.el8                docker-ce-stable\ndocker-ce.x86_64                3:20.10.14-3.el8                docker-ce-stable\n\n# 4.2 安装指定版本\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-compose-plugin\n# 4.2 选择需要的版本，通过第二列，“：”之后和“-”之前的部分，是版本号（VERSION_STRING）\n# 例如安装第一个20.10.9版本\nsudo yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io docker-compose-plugin\n\n# 5. 启动docker\nsudo systemctl start docker\n\n# 6. 查看docker版本信息\ndocker version\n\nClient: Docker Engine - Community\n Version:           20.10.17\n API version:       1.41\n Go version:        go1.17.11\n Git commit:        100c701\n Built:             Mon Jun  6 23:03:11 2022\n OS/Arch:           linux/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.17\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.17.11\n  Git commit:       a89b842\n  Built:            Mon Jun  6 23:01:29 2022\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.6.6\n  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1\n runc:\n  Version:          1.1.2\n  GitCommit:        v1.1.2-0-ga916309\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n  \n# 7. 使用hello-world测试docker是否按照成功\nsudo docker run hello-world\n\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n2db29710123e: Pull complete\nDigest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n```\n\n\n\n```\n# 查看docker下载的所有镜像\ndocker images\n\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    feb5d9fea6a5   9 months ago   13.3kB\n```\n\n\n\n## 卸载\n\n[https://docs.docker.com/engine/install/centos/#uninstall-docker-engine](https://docs.docker.com/engine/install/centos/#uninstall-docker-engine)\n\n\n\n````\n# 卸载依赖\nsudo yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 删除目录\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n````\n\n\n\n`/var/lib/docker` 是docker的默认工作路径。\n\n\n\n## docker run 执行流程\n\n执行`docker run`时，首先会在本地查找镜像是否存在，如果存在，则直接运行。如果不存在，则到远程docker hub上进行下载，如果下载成功，则运行，如果不存在，则报错。\n\n\n\n## docker 原理\n\n Docker 使用客户端-服务器架构。Docker*客户端与 Docker守护进程对话，后者负责构建、运行和分发 Docker 容器的繁重工作 。 Docker 守护程序 ( `dockerd`) 侦听 Docker API 请求并管理 Docker 对象，例如图像、容器、网络和卷。 \n\n\n\nDocker 使用一种称为*容器*`namespaces`的技术来提供隔离的工作空间。当您运行容器时，Docker 会为该容器创建一组 *命名空间。*\n\n这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。\n\n![docker](./learn-the-abc-of-docker/architecture.svg)\n\n\n\n## docker信息命令\n\n### docker verion\n\n显示docker的基本信息\n\n### docker info\n\n显示docker的系统信息，包括镜像和容器数量等等\n\n```\ndocker info\nClient:\n Context:    default\n Debug Mode: false\n Plugins:\n  app: Docker App (Docker Inc., v0.9.1-beta3)\n  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)\n  compose: Docker Compose (Docker Inc., v2.6.0)\n  scan: Docker Scan (Docker Inc., v0.17.0)\n\nServer:\n Containers: 1\n  Running: 0\n  Paused: 0\n  Stopped: 1\n Images: 1\n Server Version: 20.10.17\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n  userxattr: false\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Cgroup Version: 1\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1\n runc version: v1.1.2-0-ga916309\n init version: de40ad0\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.18.0-305.10.2.el8_4.x86_64\n Operating System: CentOS Linux 8 (Core)\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 3.649GiB\n Name: VM-16-13-centos\n ID: KFBX:BDVF:ADQ4:AZAB:YA5L:TBQS:Z3I2:JOHA:ITTB:SQDC:E42M:M73J\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n```\n\n### docker  命令 --help\n\n命令文档  [https://docs.docker.com/reference/](https://docs.docker.com/reference/)\n\n\n\n## 镜像命令\n\n### docker image\n\n镜像管理\n\n```\ndocker images\n\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    feb5d9fea6a5   9 months ago   13.3kB\n\n# REPOSITORY \t镜像的仓库源，容器名称\n# TAG\t\t\t镜像的标签\n# IMAGE ID\t\t镜像ID\n# CREATED\t\t镜像创建时间\n# SIZE\t\t\t镜像大小\n```\n\n```\n# 可选性\n-a, --all\t\t显示所有镜像\n-q, --quiet\t\t仅显示镜像ID\n```\n\n\n\n### docker search\n\n搜索镜像\n\n网页版镜像仓库地址: [https://hub.docker.com/search](https://hub.docker.com/search)\n\n```\n# 所有所有镜像\ndocker search mysql\nNAME\tDESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql\tMySQL is a widely used, open-source relation…   12851     [OK]\nmariadb\tMariaDB Server is a high performing open sou…   4926      [OK]\n\n# 可选项\n-f, --filter\n--format\n--limit\n\n\n# 按条件搜索，STARS大于600 且 是官方仓库\n# 两种写法, 多条件使用多个--filter\ndocker search mysql --filter=stars=600 --filter is-official=true\n\nNAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql     MySQL is a widely used, open-source relation…   12851     [OK]\nmariadb   MariaDB Server is a high performing open sou…   4926      [OK]\n\n# --filter支持三个条件\n# stars\t\t\t\t收藏数\t\tstars=number\n# is-automated\t\t自动化 \tis-automated=true/false\n# is-official\t\t官方\t\t is-official=true/false\n\n```\n\n\n\n### docker pull\n\n下载镜像\n\n```\n# docker pull 镜像名[:tag]\ndocker pull mysql\nUsing default tag: latest\t\t\t# 如果不写tag，默认是latest\nlatest: Pulling from library/mysql\t# 分层下载，联合文件系统，docker image核心\ne54b73e95ef3: Pull complete\nbb429e544310: Pull complete\nc148b3f9047c: Pull complete\na1dd213a3236: Pull complete\n297095d1476d: Pull complete\n87f3aa837301: Pull complete\n535019436481: Pull complete\n23722cff1cc3: Pull complete\neb19883dc4c6: Pull complete\n6eaa2c236095: Pull complete\nDigest: sha256:444f037733d01fc3dfc691a9ab05e346629e8e4d3a6c75da864f21421fb38ced\t# 签名\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\t\t#docker image 真实地址\n\n# 以下两个命令等价\ndocker pull mysql\ndocker pull docker.io/library/mysql:latest\n```\n\n\n\n### docker rmi\n\n删除镜像\n\n```\ndocker rmi -f hello-world\n\nUntagged: hello-world:latest\nUntagged: hello-world@sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651\nDeleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412\n\ndocker rmi -f image_id[:tag]\t\t# 删除指定镜像\ndocker rmi - f image_id image_id \t# 删除多个镜像\n```\n\n\n\n## 容器命令\n\n有镜像才能创建容器\n\n\n\n### 新建容器并启动 docker run\n\n```\ndocker run [参数] image\n\n# 参数说明\n--name=\"容器名称\"\t容器名字，启动容器的名称，便于区分\n-d\t\t\t\t\t后台运行\n-it\t\t\t\t\t使用交互方式运行,进入容器内容查看内容\n-p \t\t\t\t\t指定容器端口 -p 8080:80\n\t-p ip:主机端口:容器端口\n\t-p 主机端口:容器端口(最常用)\n\t-p 容器端口\n-P\t\t\t\t\t随机指定端口\n```\n\n\n\n```\n# cmd 下启动cenos\ndocker run -it centos /bin/sh\n[root@5dda638536fa /]#\n\n# centos 下启动centos\ndocker run -it centos /bin/bash\n[root@5dda638536fa /]#\n\n# exit停止容器并退出容器\n[root@5dda638536fa /]# exit\n# ctrl + P + Q 不停止容器 退出容器\n```\n\n\n\n### docker ps\n\n列出运行的容器\n\n\n\n```\n# docker ps [可选参数]\n\n# 列出正在运行的容器\ndocker ps\n\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES\n113ffb59a550   nginx     \"/docker-entrypoint.…\"   6 minutes ago   Up 6 minutes   0.0.0.0:8080->80/tcp   nginx-01\n\n# CONTAINER ID \t容器ID\n# IMAGE\t\t\t镜像名称\n# COMMAND\t\t启动命令\n# CREATED\t\t容器创建时间\n# STATUS\t\t运行状态\n# PORTS\t\t\t端口映射情况\n# NAMES\t\t\t容器名称\n\n# 列出所有容器，包括已经停止的\ndocker ps -a\n\n# 根据名称模糊搜索\ndocker ps -a --filter \"name=ng\"\n\n# 根据容器ID模糊搜索\ndocker ps -a --filter \"id=cca\"\n\n# 可选参数\n-a\t\t\t\t\t\t全部\n-n num\t\t\t\t\t最近创建的几条\n-l\t\t\t\t\t\t最后创建的一条\n-q\t\t\t\t\t\t只显示ID\n-s\t\t\t\t\t\t显示size大小\n--no-trunc\t\t\t\t显示明细信息， don't truncate output 不截断输出\n-f, --filter\t\t\t过滤条件 -f \"key=value\"\n\tid\n\tname\n\tlabel\n\tstatus\t\t\t\tOne of created, restarting, running, removing, paused, exited, or dead\n\t\n```\n\n\n\n### docker rm\n\n删除容器\n\n```\n# 删除指定容器\ndocker rm bfb2710c293d\n\n# 删除所有不在运行的容器\ndocker rm $(docker ps -aq -f \"status=exited\")\n# 等价于\ndocker ps -aq -f \"status=exited\" | xargs docker rm\n\n# 可选参数\n-f\t\t\t\t强制删除正在运行的容器\n```\n\n\n\n\n\n### docker start/restart\n\n启动容器\n\n```\n# 启动容器\ndocker start 84480543d8cd\n\n# 重启容器，重启时间间隔2秒\ndocker restart -t 10 84480543d8cd\n```\n\n\n\n### docker stop/kill\n\n停止容器\n\n\n\n```\n# 优雅退出容器\ndocker stop 84480543d8cd\n\n# 强制退出容器\ndocker kill 84480543d8cd\n```\n\n\n\n## 常用命令\n\n### 后台启动容器 docker run \n\n```\n# 使用-d指令后台启动\ndocker run -d centos\n\n# 该命令存在问题，通过docker ps 发现容器被停止了\n# docker容器使用后台运行时，必须要有一个前台进程，如果没有就会自动停止，该方式就缺乏前台进程导致启动后自动停止\n\n# 使用-it保持容器后台运行\ndocker run --name centos-03 -d  -it centos /bin/sh\n```\n\n\n\n### 查看日志 docker logs\n\n```\n# 监听容器日志\ndocker logs -tf 9164f68ea536\n\n# 输出指定时间之后的日志\ndocker logs --since 2022-07-12T08:15:04.719814800Z 9164f68ea536\n\n# 可选参数\n-f\t\t\t\t\t监听日志输出\n-n, --tail\t\t\t输出最后N行日志\n-t, --timestamps\t显示时间戳，每一行日志前输出时间戳信息\n-since\t\t\t\t输出指定时间之后的日志\n-until\t\t\t\t输出指定时间之前的日志\n```\n\n\n\n### 查看容器进程 docker top\n\n```\ndocker top 9164f68ea536\nUID\t\tPID\t\tPPID\tC\tSTIME\tTTY\t\tTIME\t\tCMD\nroot\t3529\t3509\t0\t08:15\t?\t\t00:00:00\t/bin/sh\n```\n\n\n\n### 查看容器元数据 docker inspect\n\n```\n# 查看容器元数据\ndocker inspect 9164f68ea536\n```\n\n\n\n### 进入容器 docker exec/attach\n\n```\n# 方式一\n# 新建一个命令行并进入\ndocker exec -it 容器ID bashShell\n\ndocker exec -it 9164f68ea536 /bin/bash\n\n# 方式二\n# 进入正在运行的命令行\ndocker attach 容器ID\n\ndocker attach 9164f68ea536\n\n```\n\n\n\n### 拷贝命令 docker copy\n\n\n\n```\n# 复制容器文件到本地\ndocker cp 容器:路径 本机路径\n\n# 复制本地文件到容器\ndocker cp 本机路径 容器:路径\n\n# 在centos中新建一个文件\ndocker exec -it -w ~ centos-01 touch /tmp/test.txt\n# 拷贝容器文件到当前目录\ndocker cp centos-01:/tmp/test.txt ./\n\n# 本地新建文件并复制到容器\necho \"test\" >> test2.txt; docker cp ./test2.txt centos-01:/tmp/\n# 查看容器内目录\ndocker exec -it centos-01 ls /tmp\ntest.txt  test2.txt\n```\n\n\n\n## 联合文件系统\n\n\n\n\n\n## commit 镜像\n\n将一个容器生成一个新的镜像\n\n```\ndocker commit 可选参数 容器ID 镜像名称[:tag]\n\n# 将一个容器生成一个本地镜像\ndocker commit -a caoruiy -m \"test helloworld\" c4af83c1f703 hello-world-cr:v1.0.0\n```\n\n\n\n## 容器数据卷\n\n使用容器时，希望容器之间有一个数据共享的技术，Docker中产生的数据，可以同步到本地。可以将容器内的数据，挂载到本地。\n\n这是一个容器数据持久化和同步的操作，使得容器间可以数据共享。\n\n### 使用方式一 -v\n\n```\ndocker run -it -v 主机目录:容器目录 镜像 交互命令\n\n# 挂载的形式启动容器\n# 修改容器内容的文件，在主机上修改文件，两边均会同步\n# 如果容器停止，在本地上修改文件内容，启动容器后，容器内也会进行同步\ndocker run -it -v /c/Users/Lenovo/Desktop/centos:/home centos /bin/bash\n# 容器内部操作文件\n[root@6b77aeb1d6de home]# cd /home\n[root@6b77aeb1d6de home]# mkdir test\n\n# 退出容器\nctrl + p + q\n\n# 列出本地目录内容\nls /c/Users/Lenovo/Desktop/centos\ntest\n```\n\n#### 具名挂载和匿名挂载\n\n```\n# 匿名挂载，挂载容器内的目录时，不指定具体的本地地址，本地卷名称\ndocker run -it -v 容器目录 镜像 交互命令\n\n# 匿名挂载一个卷\ndocker run -d -it -v /home centos /bin/sh\n\n# 查看docker 卷\ndocker volume ls\n\nDRIVER    VOLUME NAME\nlocal     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\n```\n\n\n\n```\n# 具名挂载，挂载容器内的目录时，指定一个卷名称\n# 卷名称就是一个字符串,不是一个 / 或者 ./ 的路径地址\ndocker run -it -v 卷名称:容器目录 镜像 交互命令\n\n# 具名挂载\ndocker run -d -it -v juming-cento:/home centos /bin/sh\n\n# 查看docker 卷\ndocker volume ls\n\nDRIVER    VOLUME NAME\nlocal     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\nlocal     juming-cento\n```\n\n\n\n匿名挂载和具名挂载，具体的挂载目录到底在哪里？\n\n```\n# 查看docker元信息\ndocker inspect 433938cde9c0\n\n# 具名挂载时挂载信息输出\n\"Mounts\": [\n  {\n      \"Type\": \"volume\", // 类型,挂载\n      \"Name\": \"juming-cento\", // 挂载名称\n      \"Source\": \"/var/lib/docker/volumes/juming-cento/_data\", // 具体的本机挂载地址\n      \"Destination\": \"/home\", // 容器内地址\n      \"Driver\": \"local\",\n      \"Mode\": \"z\",\n      \"RW\": true,\n      \"Propagation\": \"\"\n  }\n]\n\n# 匿名挂载时挂载信息输出\n\"Mounts\": [\n    {\n        \"Type\": \"volume\",\n        \"Name\": \"12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9\",\n        \"Source\": \"/var/lib/docker/volumes/12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9/_data\",\n        \"Destination\": \"/home\",\n        \"Driver\": \"local\",\n        \"Mode\": \"\",\n        \"RW\": true,\n        \"Propagation\": \"\"\n    }\n]\n\n# 加载点都在 /var/lib/docker/volumes/xxx/_data目录下\n\n```\n\n\n\n\n\n### 使用方式二 DockerFile\n\nDockerFile是用来构建docker镜像的一个构建文件。脚本。\n\n[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)\n\n\n\n# 数据卷容器\n\n为了实现多个容器之间的数据共享，最好的方式就是让多个容器挂载到一个目录地址作为数据卷。所谓的数据卷容器，就是作为存放数据的容器，其他容器加载到该容器上，实现数据共享。\n\n`--volumes-from` 参数，可以从引用的容器中，挂载所有自定义的卷，需要注意的是“自定义的卷”。\n\n\n\n```\n# 首先启动一个容器，并挂载一个卷\ndocker run -it -name c1 -v ~/centos01:/centos01 centos /bin/sh\n\n# 在容器c1 centos01卷内新建一个目录11\nsh-4.4# cd centos01/\nsh-4.4# ls\nsh-4.4# mkdir 11\nsh-4.4# ls\n11\n\n# 退出容器，在本地目录centos01中发现相同内容，挂载成功\n[root@VM-16-13-centos ~]# ls\ncentos01  test2.txt  test.txt\n[root@VM-16-13-centos ~]# ls centos01/\n11\n\n# 新建容器c2，c1作为数据卷容器\ndocker run -it --name c2 --volumes-from c1 centos /bin/sh\n\n# 查看容器内挂载数据\nsh-4.4# cd centos01/\nsh-4.4# ls\n11\n\n# 在容器c2中centos01卷下，新建文件夹22\nsh-4.4# mkdir 22\nsh-4.4# ls\n11  22\n\n# 退出容器，查看本地数据\n[root@VM-16-13-centos ~]# ls centos01/\n11  22\n\n# 进入容器c1 查看数据\n[root@VM-16-13-centos ~]# docker exec -it c1 /bin/sh\nsh-4.4# ls centos01/\n11  22\n\n```\n\n![1657758523904](./learn-the-abc-of-docker/1657758523904.png)\n\n删除数据卷容器c1，数据也不会丢失。**共享卷实际是一个备份的概念。**\n\n```\n# 查看本地容器，一共有c1 c2两个容器\n[root@VM-16-13-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES\ncfe02ba04ad7   centos    \"/bin/sh\"   5 minutes ago   Up 5 minutes             c2\nf7d563151f92   centos    \"/bin/sh\"   6 minutes ago   Up 6 minutes             c1\n\n# 强制删除数据卷容器c1\n[root@VM-16-13-centos ~]# docker rm -f c1\nc1\n\n[root@VM-16-13-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES\ncfe02ba04ad7   centos    \"/bin/sh\"   5 minutes ago   Up 5 minutes             c2\n\n# 查看本地目录数据依然存在\n[root@VM-16-13-centos ~]# ls centos01/\n11  22\n\n# 容器c2中的数据依然存在\n[root@VM-16-13-centos ~]# docker exec -it c2 /bin/sh\nsh-4.4# ls centos01/\n11  22\n\n# 在容器c2中创建新目录33\nsh-4.4# mkdir centos01/33\nsh-4.4# ls centos01/\n11  22  33\nsh-4.4# read escape sequence\n\n# 退出容器后，查看本地目录，数据依然同步\n[root@VM-16-13-centos ~]# ls centos01/\n11  22  33\n```\n\n数据卷容器可以做多个容器之间的数据共享，**数据卷的生命周期直到没有容器使用为止**。所以删除任意一个容器不影响数据卷的信息共享。\n\n\n\n\n\n# docker build\n\n从Dockerfile构建镜像\n\n```\ndocker build [可选项] 向下文目录\n\n# 可选项\n-f, --file \t\t#Dockerfile的名称，不指定是默认是当前文件夹的Dickerfile文件\n-t, --tag \n```\n\n\n\n# .dockerignore\n\n排除部分构建文件，防止将大文件或者敏感文件添加到构建上下文中。\n\n每行一个目录或者文件地址，支持形式有\n\n```\n# comment\t\t\t注释信息\ntemp?\t\t\t\t排除根目录名称以temp开头的,后接单个字符的目录或文件, 如: /tempa\n*/temp*\t\t\t\t排除以temp开头的子目录或文件，如: /a/tempFile.txt  /a/tempDir\n*/*/temp*\t\t\t排除以temp开头的两级子目录或文件，如: /a/b/tempFile.txt  /a/b/tempDir\n**/tmp*\t\t\t\t排除所有目录中的以temp开头的目录或文件\n!temp*\t\t\t\t!表示排除例外，表示剔除根目录下以temp开头的目录或文件。\n```\n\n基本原则为`?`匹配单个字符；`*`匹配多个字符。\n\n```\n# 以下写法的含义表示保留除了根目录下的以以temp开头的目录或文件外的，所有层级下的以temp开头的目录或文件\n**/tmp*\n!temp*\n\n# 示例: 除了/tempa 其他文件均会被剔除\n/tempa\n/tempb/a\n/a/tempc\n/a/b/tempd\n```\n\n\n\n\n\n# DockerFile\n\ndocker file是用来构建docker镜像的文件，是一个命令脚本文件。\n\n构建镜像的步骤：\n\n1. 编写dockerfile文件\n2. 使用docker build 构建一个镜像\n3. 使用docker run运行进行\n4. 使用docker push 发布镜像\n\n## dockerFile指令\n\n```\nARG\t\t\t# 定义变量，提供给FROM使用\nFROM \t\t# 基础镜像，镜像构建开始位置\nMAINTAINER\t# 负责人，姓名+邮箱\nRUN\t\t\t# 进行构建时需要执行的命令\nADD\t\t\t# 复制文件，往镜像中添加内容\nWORKDIR\t\t# 设置镜像的工作目录\nVOLUME\t\t# 挂载目录\nEXPOST\t\t# 对外暴露的端口\nRUN\t\t\t#\nCMD\t\t\t# 指定容器启动时候要运行的命令，相当于为容器执行提供默认值。只有最后一个会生效，可以被替代\nENTRYPOINT\t# 指定容器启动时候要运行的命令，不可替代，可以追加\nONBUILD\t\t# \nCOPY\t\t# 类似ADD，拷贝内容到镜像中\nENV\t\t\t# 构建时设置环境变量\n\n```\n\n## RUN\n\n```\n# 该命令支持两种写法，shell和exec，\n# shell形式将改变默认的shell，linux下默认是/bin/sh -c，window下默认是cmd /S /C\n# exec形式，因为可以避免shell字符串修改\n# RUN <command>\t\t\t\t\t\t\t\t\t# shell形式\n# RUN [\"executable\", \"param1\", \"param2\"]\t\t# exec形式\n\n# 可以使用\\符号进行命令换行书写\nRUN /bin/sh -c 'cd /home; \\\nls -al'\n# 等价于\nRUM /bin/sh -c 'cd /home; ls -al'\n\n\n# 如果需要使用其他shell, 请使用exec形式\n# exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (\") 而不是单引号 (')\nRUN [\"/bin/bash\", \"-c\", \"cd /home\", \"ls -al\"]\n```\n\n> exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (\") 而不是单引号 (')\n\n\n\n> exec模式，不是直接调用命令，所以不会引用shell脚本命令，如果你希望启动时使用shell，可以明确指定hell。就像这样：RUN [\"/bin/bash\", \"-c\", \"cd /home\", \"ls -al\"]\n\n\n\n\n\n基于centos制作自己的镜像\n\n```\nmkdir my-centos\ncd my-centos\nvim Dockerfile\n```\n编写Dockerfile文件\n\n```\nFROM centos\nRUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\nRUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\nRUN yum clear\nRUN yum makecache\nRUN yum -y install wget\nRUN echo '---------------------over--------------------'\n```\n生成镜像\n```\ndocekr build -t my-centyos .\n```\n```\n# 运行镜像\ndocker run -it --name mc1 my-centos /bin/sh\n# 容器内执行,已经包含wget命令\n[root@8d8302624841 /]# wget\nwget: missing URL\nUsage: wget [OPTION]... [URL]...\n\nTry `wget --help' for more options.\n\n```\n\n\n\n## CMD 和 ENTRYPOINT的区别\n\nCMD是执行运行的默认命令，当镜像运行时不指定任何命令时，默认的CMD命令会被执行，该指令可以在运行时被替换。\n\n### CMD制作镜像\n\n```\nFROM centos\nRUN echo 'This is a test image'\nCMD ls -a\n```\n\n\n\n```\n# 编译生成镜像\ndocker build -t my-centos .\n\n# 运行时不指定默认命令，将执行  ls -a\ndocker run -it my-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行时指定默认命令，执行信息被新命令覆盖\n[root@VM-16-13-centos my-centos]# docker run -it my-centos ls -al\ntotal 56\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 .\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 ..\n-rwxr-xr-x   1 root root    0 Jul 14 06:28 .dockerenv\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 Jul 14 06:28 dev\ndrwxr-xr-x   1 root root 4096 Jul 14 06:28 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Sep 15  2021 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 129 root root    0 Jul 14 06:28 proc\ndr-xr-x---   2 root root 4096 Sep 15  2021 root\ndrwxr-xr-x  11 root root 4096 Sep 15  2021 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 Jul 14 06:28 sys\ndrwxrwxrwt   7 root root 4096 Sep 15  2021 tmp\ndrwxr-xr-x  12 root root 4096 Sep 15  2021 usr\ndrwxr-xr-x  20 root root 4096 Sep 15  2021 var\n```\n\n\n\n### ENTRYPOINT制作镜像\n\n```\nFROM centos\nRUN echo 'This is a test image'\nENTRYPOINT [\"ls\", \"-a\"]\n```\n\n值得注意的是，此处的ENTRYPOINT写法是采用exec形式（[命令，参数，参数]）（ENTRYPOINT [\"ls\", \"-a\"]）只有该形式，在运行镜像时才能追加参数。\n\n如果采用shell命令形式（ENTRYPOINT 字符串）（ENTRYPOINT ls -a），他将在` /bin/sh -c `中执行，并会忽略docker run时的命令参数\n\n\n\nexec 形式不会调用shell命令，这就意味着，使用该命令时，你无法通过命令行外壳进入容器，如想使用shell处理，可以这么写` ENTRYPOINT [ \"sh\", \"-c\", \"ls -a\" ] `\n\n```\n# 生成镜像\ndocker build -t entrypoint-centos .\n\n# 运行,默认命令\ndocker run -it --name ec1 entrypoint-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行,使用默认命令,追加参数\ndocker run -it --name ec2 entrypoint-centos -l\ntotal 56\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 .\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 ..\n-rwxr-xr-x   1 root root    0 Jul 14 06:43 .dockerenv\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 Jul 14 06:43 dev\ndrwxr-xr-x   1 root root 4096 Jul 14 06:43 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Sep 15  2021 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 126 root root    0 Jul 14 06:43 proc\ndr-xr-x---   2 root root 4096 Sep 15  2021 root\ndrwxr-xr-x  11 root root 4096 Sep 15  2021 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 Jul 14 06:43 sys\ndrwxrwxrwt   7 root root 4096 Sep 15  2021 tmp\ndrwxr-xr-x  12 root root 4096 Sep 15  2021 usr\ndrwxr-xr-x  20 root root 4096 Sep 15  2021 var\n```\n\n\n\n### shell形式的ENTRYPOINT\n\n如果指定字符串形式的命令，该命令会在` /bin/sh -c `内执行，并会忽略命令行中的参数\n\n```\nFROM centos\nRUN echo 'This is a test image'\nENTRYPOINT ls -a\n```\n\n\n\n```\n# 运行,默认命令\ndocker run -it --name ec1 entrypoint-centos\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n\n# 运行,使用默认命令,追加参数\ndocker run -it --name ec2 entrypoint-centos -l\n.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr\n..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"learn-the-abc-of-docker","published":1,"updated":"2022-07-15T11:13:44.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5mdbjc5001vowgncda630bg","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/install/centos/\">https://docs.docker.com/engine/install/centos/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1. 卸载旧版本</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 安装前置工具/依赖</span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 设置镜像仓库</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 使用阿里云镜像</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\"># 4. 安装最新版docker </span><br><span class=\"line\"># docker-ce 社区版本，docker-ee 企业版，推荐社区版</span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 4. 安装指定版本docker</span><br><span class=\"line\"># 4.1 列出所有版本可用版本</span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64                3:20.10.9-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.8-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.7-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.6-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.5-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.4-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.3-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.2-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.17-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.16-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.15-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.14-3.el8                docker-ce-stable</span><br><span class=\"line\"></span><br><span class=\"line\"># 4.2 安装指定版本</span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\"># 4.2 选择需要的版本，通过第二列，“：”之后和“-”之前的部分，是版本号（VERSION_STRING）</span><br><span class=\"line\"># 例如安装第一个20.10.9版本</span><br><span class=\"line\">sudo yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 5. 启动docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 6. 查看docker版本信息</span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.17</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.17.11</span><br><span class=\"line\"> Git commit:        100c701</span><br><span class=\"line\"> Built:             Mon Jun  6 23:03:11 2022</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      true</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          20.10.17</span><br><span class=\"line\">  API version:      1.41 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.17.11</span><br><span class=\"line\">  Git commit:       a89b842</span><br><span class=\"line\">  Built:            Mon Jun  6 23:01:29 2022</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.6.6</span><br><span class=\"line\">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.1.2</span><br><span class=\"line\">  GitCommit:        v1.1.2-0-ga916309</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.19.0</span><br><span class=\"line\">  GitCommit:        de40ad0</span><br><span class=\"line\">  </span><br><span class=\"line\"># 7. 使用hello-world测试docker是否按照成功</span><br><span class=\"line\">sudo docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">2db29710123e: Pull complete</span><br><span class=\"line\">Digest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker下载的所有镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   9 months ago   13.3kB</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/install/centos/#uninstall-docker-engine\">https://docs.docker.com/engine/install/centos/#uninstall-docker-engine</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 卸载依赖</span><br><span class=\"line\">sudo yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除目录</span><br><span class=\"line\">sudo rm -rf /var/lib/docker</span><br><span class=\"line\">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>/var/lib/docker</code> 是docker的默认工作路径。</p>\n<h2 id=\"docker-run-执行流程\"><a href=\"#docker-run-执行流程\" class=\"headerlink\" title=\"docker run 执行流程\"></a>docker run 执行流程</h2><p>执行<code>docker run</code>时，首先会在本地查找镜像是否存在，如果存在，则直接运行。如果不存在，则到远程docker hub上进行下载，如果下载成功，则运行，如果不存在，则报错。</p>\n<h2 id=\"docker-原理\"><a href=\"#docker-原理\" class=\"headerlink\" title=\"docker 原理\"></a>docker 原理</h2><p> Docker 使用客户端-服务器架构。Docker*客户端与 Docker守护进程对话，后者负责构建、运行和分发 Docker 容器的繁重工作 。 Docker 守护程序 ( <code>dockerd</code>) 侦听 Docker API 请求并管理 Docker 对象，例如图像、容器、网络和卷。 </p>\n<p>Docker 使用一种称为<em>容器*<code>namespaces</code>的技术来提供隔离的工作空间。当您运行容器时，Docker 会为该容器创建一组 *命名空间。</em></p>\n<p>这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。</p>\n<p><img src=\"/.com//architecture.svg\" alt=\"docker\"></p>\n<h2 id=\"docker信息命令\"><a href=\"#docker信息命令\" class=\"headerlink\" title=\"docker信息命令\"></a>docker信息命令</h2><h3 id=\"docker-verion\"><a href=\"#docker-verion\" class=\"headerlink\" title=\"docker verion\"></a>docker verion</h3><p>显示docker的基本信息</p>\n<h3 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h3><p>显示docker的系统信息，包括镜像和容器数量等等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Context:    default</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"> Plugins:</span><br><span class=\"line\">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class=\"line\">  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)</span><br><span class=\"line\">  compose: Docker Compose (Docker Inc., v2.6.0)</span><br><span class=\"line\">  scan: Docker Scan (Docker Inc., v0.17.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Containers: 1</span><br><span class=\"line\">  Running: 0</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 1</span><br><span class=\"line\"> Images: 1</span><br><span class=\"line\"> Server Version: 20.10.17</span><br><span class=\"line\"> Storage Driver: overlay2</span><br><span class=\"line\">  Backing Filesystem: extfs</span><br><span class=\"line\">  Supports d_type: true</span><br><span class=\"line\">  Native Overlay Diff: true</span><br><span class=\"line\">  userxattr: false</span><br><span class=\"line\"> Logging Driver: json-file</span><br><span class=\"line\"> Cgroup Driver: cgroupfs</span><br><span class=\"line\"> Cgroup Version: 1</span><br><span class=\"line\"> Plugins:</span><br><span class=\"line\">  Volume: local</span><br><span class=\"line\">  Network: bridge host ipvlan macvlan null overlay</span><br><span class=\"line\">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class=\"line\"> Swarm: inactive</span><br><span class=\"line\"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class=\"line\"> Default Runtime: runc</span><br><span class=\"line\"> Init Binary: docker-init</span><br><span class=\"line\"> containerd version: 10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class=\"line\"> runc version: v1.1.2-0-ga916309</span><br><span class=\"line\"> init version: de40ad0</span><br><span class=\"line\"> Security Options:</span><br><span class=\"line\">  seccomp</span><br><span class=\"line\">   Profile: default</span><br><span class=\"line\"> Kernel Version: 4.18.0-305.10.2.el8_4.x86_64</span><br><span class=\"line\"> Operating System: CentOS Linux 8 (Core)</span><br><span class=\"line\"> OSType: linux</span><br><span class=\"line\"> Architecture: x86_64</span><br><span class=\"line\"> CPUs: 2</span><br><span class=\"line\"> Total Memory: 3.649GiB</span><br><span class=\"line\"> Name: VM-16-13-centos</span><br><span class=\"line\"> ID: KFBX:BDVF:ADQ4:AZAB:YA5L:TBQS:Z3I2:JOHA:ITTB:SQDC:E42M:M73J</span><br><span class=\"line\"> Docker Root Dir: /var/lib/docker</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"> Registry: https://index.docker.io/v1/</span><br><span class=\"line\"> Labels:</span><br><span class=\"line\"> Experimental: false</span><br><span class=\"line\"> Insecure Registries:</span><br><span class=\"line\">  127.0.0.0/8</span><br><span class=\"line\"> Live Restore Enabled: false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-命令-–help\"><a href=\"#docker-命令-–help\" class=\"headerlink\" title=\"docker  命令 –help\"></a>docker  命令 –help</h3><p>命令文档  <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/reference/\">https://docs.docker.com/reference/</a></p>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><h3 id=\"docker-image\"><a href=\"#docker-image\" class=\"headerlink\" title=\"docker image\"></a>docker image</h3><p>镜像管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   9 months ago   13.3kB</span><br><span class=\"line\"></span><br><span class=\"line\"># REPOSITORY \t镜像的仓库源，容器名称</span><br><span class=\"line\"># TAG\t\t\t镜像的标签</span><br><span class=\"line\"># IMAGE ID\t\t镜像ID</span><br><span class=\"line\"># CREATED\t\t镜像创建时间</span><br><span class=\"line\"># SIZE\t\t\t镜像大小</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可选性</span><br><span class=\"line\">-a, --all\t\t显示所有镜像</span><br><span class=\"line\">-q, --quiet\t\t仅显示镜像ID</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-search\"><a href=\"#docker-search\" class=\"headerlink\" title=\"docker search\"></a>docker search</h3><p>搜索镜像</p>\n<p>网页版镜像仓库地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://hub.docker.com/search\">https://hub.docker.com/search</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 所有所有镜像</span><br><span class=\"line\">docker search mysql</span><br><span class=\"line\">NAME\tDESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql\tMySQL is a widely used, open-source relation…   12851     [OK]</span><br><span class=\"line\">mariadb\tMariaDB Server is a high performing open sou…   4926      [OK]</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选项</span><br><span class=\"line\">-f, --filter</span><br><span class=\"line\">--format</span><br><span class=\"line\">--limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 按条件搜索，STARS大于600 且 是官方仓库</span><br><span class=\"line\"># 两种写法, 多条件使用多个--filter</span><br><span class=\"line\">docker search mysql --filter=stars=600 --filter is-official=true</span><br><span class=\"line\"></span><br><span class=\"line\">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql     MySQL is a widely used, open-source relation…   12851     [OK]</span><br><span class=\"line\">mariadb   MariaDB Server is a high performing open sou…   4926      [OK]</span><br><span class=\"line\"></span><br><span class=\"line\"># --filter支持三个条件</span><br><span class=\"line\"># stars\t\t\t\t收藏数\t\tstars=number</span><br><span class=\"line\"># is-automated\t\t自动化 \tis-automated=true/false</span><br><span class=\"line\"># is-official\t\t官方\t\t is-official=true/false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a>docker pull</h3><p>下载镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull 镜像名[:tag]</span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">Using default tag: latest\t\t\t# 如果不写tag，默认是latest</span><br><span class=\"line\">latest: Pulling from library/mysql\t# 分层下载，联合文件系统，docker image核心</span><br><span class=\"line\">e54b73e95ef3: Pull complete</span><br><span class=\"line\">bb429e544310: Pull complete</span><br><span class=\"line\">c148b3f9047c: Pull complete</span><br><span class=\"line\">a1dd213a3236: Pull complete</span><br><span class=\"line\">297095d1476d: Pull complete</span><br><span class=\"line\">87f3aa837301: Pull complete</span><br><span class=\"line\">535019436481: Pull complete</span><br><span class=\"line\">23722cff1cc3: Pull complete</span><br><span class=\"line\">eb19883dc4c6: Pull complete</span><br><span class=\"line\">6eaa2c236095: Pull complete</span><br><span class=\"line\">Digest: sha256:444f037733d01fc3dfc691a9ab05e346629e8e4d3a6c75da864f21421fb38ced\t# 签名</span><br><span class=\"line\">Status: Downloaded newer image for mysql:latest</span><br><span class=\"line\">docker.io/library/mysql:latest\t\t#docker image 真实地址</span><br><span class=\"line\"></span><br><span class=\"line\"># 以下两个命令等价</span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker pull docker.io/library/mysql:latest</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-rmi\"><a href=\"#docker-rmi\" class=\"headerlink\" title=\"docker rmi\"></a>docker rmi</h3><p>删除镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Untagged: hello-world:latest</span><br><span class=\"line\">Untagged: hello-world@sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class=\"line\">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f image_id[:tag]\t\t# 删除指定镜像</span><br><span class=\"line\">docker rmi - f image_id image_id \t# 删除多个镜像</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><p>有镜像才能创建容器</p>\n<h3 id=\"新建容器并启动-docker-run\"><a href=\"#新建容器并启动-docker-run\" class=\"headerlink\" title=\"新建容器并启动 docker run\"></a>新建容器并启动 docker run</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [参数] image</span><br><span class=\"line\"></span><br><span class=\"line\"># 参数说明</span><br><span class=\"line\">--name=&quot;容器名称&quot;\t容器名字，启动容器的名称，便于区分</span><br><span class=\"line\">-d\t\t\t\t\t后台运行</span><br><span class=\"line\">-it\t\t\t\t\t使用交互方式运行,进入容器内容查看内容</span><br><span class=\"line\">-p \t\t\t\t\t指定容器端口 -p 8080:80</span><br><span class=\"line\">\t-p ip:主机端口:容器端口</span><br><span class=\"line\">\t-p 主机端口:容器端口(最常用)</span><br><span class=\"line\">\t-p 容器端口</span><br><span class=\"line\">-P\t\t\t\t\t随机指定端口</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cmd 下启动cenos</span><br><span class=\"line\">docker run -it centos /bin/sh</span><br><span class=\"line\">[root@5dda638536fa /]#</span><br><span class=\"line\"></span><br><span class=\"line\"># centos 下启动centos</span><br><span class=\"line\">docker run -it centos /bin/bash</span><br><span class=\"line\">[root@5dda638536fa /]#</span><br><span class=\"line\"></span><br><span class=\"line\"># exit停止容器并退出容器</span><br><span class=\"line\">[root@5dda638536fa /]# exit</span><br><span class=\"line\"># ctrl + P + Q 不停止容器 退出容器</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a>docker ps</h3><p>列出运行的容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker ps [可选参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出正在运行的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES</span><br><span class=\"line\">113ffb59a550   nginx     &quot;/docker-entrypoint.…&quot;   6 minutes ago   Up 6 minutes   0.0.0.0:8080-&gt;80/tcp   nginx-01</span><br><span class=\"line\"></span><br><span class=\"line\"># CONTAINER ID \t容器ID</span><br><span class=\"line\"># IMAGE\t\t\t镜像名称</span><br><span class=\"line\"># COMMAND\t\t启动命令</span><br><span class=\"line\"># CREATED\t\t容器创建时间</span><br><span class=\"line\"># STATUS\t\t运行状态</span><br><span class=\"line\"># PORTS\t\t\t端口映射情况</span><br><span class=\"line\"># NAMES\t\t\t容器名称</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有容器，包括已经停止的</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称模糊搜索</span><br><span class=\"line\">docker ps -a --filter &quot;name=ng&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据容器ID模糊搜索</span><br><span class=\"line\">docker ps -a --filter &quot;id=cca&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-a\t\t\t\t\t\t全部</span><br><span class=\"line\">-n num\t\t\t\t\t最近创建的几条</span><br><span class=\"line\">-l\t\t\t\t\t\t最后创建的一条</span><br><span class=\"line\">-q\t\t\t\t\t\t只显示ID</span><br><span class=\"line\">-s\t\t\t\t\t\t显示size大小</span><br><span class=\"line\">--no-trunc\t\t\t\t显示明细信息， don&#x27;t truncate output 不截断输出</span><br><span class=\"line\">-f, --filter\t\t\t过滤条件 -f &quot;key=value&quot;</span><br><span class=\"line\">\tid</span><br><span class=\"line\">\tname</span><br><span class=\"line\">\tlabel</span><br><span class=\"line\">\tstatus\t\t\t\tOne of created, restarting, running, removing, paused, exited, or dead</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-rm\"><a href=\"#docker-rm\" class=\"headerlink\" title=\"docker rm\"></a>docker rm</h3><p>删除容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除指定容器</span><br><span class=\"line\">docker rm bfb2710c293d</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有不在运行的容器</span><br><span class=\"line\">docker rm $(docker ps -aq -f &quot;status=exited&quot;)</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">docker ps -aq -f &quot;status=exited&quot; | xargs docker rm</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-f\t\t\t\t强制删除正在运行的容器</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"docker-start-restart\"><a href=\"#docker-start-restart\" class=\"headerlink\" title=\"docker start/restart\"></a>docker start/restart</h3><p>启动容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker start 84480543d8cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启容器，重启时间间隔2秒</span><br><span class=\"line\">docker restart -t 10 84480543d8cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-stop-kill\"><a href=\"#docker-stop-kill\" class=\"headerlink\" title=\"docker stop/kill\"></a>docker stop/kill</h3><p>停止容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优雅退出容器</span><br><span class=\"line\">docker stop 84480543d8cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 强制退出容器</span><br><span class=\"line\">docker kill 84480543d8cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"后台启动容器-docker-run\"><a href=\"#后台启动容器-docker-run\" class=\"headerlink\" title=\"后台启动容器 docker run\"></a>后台启动容器 docker run</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用-d指令后台启动</span><br><span class=\"line\">docker run -d centos</span><br><span class=\"line\"></span><br><span class=\"line\"># 该命令存在问题，通过docker ps 发现容器被停止了</span><br><span class=\"line\"># docker容器使用后台运行时，必须要有一个前台进程，如果没有就会自动停止，该方式就缺乏前台进程导致启动后自动停止</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用-it保持容器后台运行</span><br><span class=\"line\">docker run --name centos-03 -d  -it centos /bin/sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看日志-docker-logs\"><a href=\"#查看日志-docker-logs\" class=\"headerlink\" title=\"查看日志 docker logs\"></a>查看日志 docker logs</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听容器日志</span><br><span class=\"line\">docker logs -tf 9164f68ea536</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出指定时间之后的日志</span><br><span class=\"line\">docker logs --since 2022-07-12T08:15:04.719814800Z 9164f68ea536</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-f\t\t\t\t\t监听日志输出</span><br><span class=\"line\">-n, --tail\t\t\t输出最后N行日志</span><br><span class=\"line\">-t, --timestamps\t显示时间戳，每一行日志前输出时间戳信息</span><br><span class=\"line\">-since\t\t\t\t输出指定时间之后的日志</span><br><span class=\"line\">-until\t\t\t\t输出指定时间之前的日志</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看容器进程-docker-top\"><a href=\"#查看容器进程-docker-top\" class=\"headerlink\" title=\"查看容器进程 docker top\"></a>查看容器进程 docker top</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top 9164f68ea536</span><br><span class=\"line\">UID\t\tPID\t\tPPID\tC\tSTIME\tTTY\t\tTIME\t\tCMD</span><br><span class=\"line\">root\t3529\t3509\t0\t08:15\t?\t\t00:00:00\t/bin/sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看容器元数据-docker-inspect\"><a href=\"#查看容器元数据-docker-inspect\" class=\"headerlink\" title=\"查看容器元数据 docker inspect\"></a>查看容器元数据 docker inspect</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看容器元数据</span><br><span class=\"line\">docker inspect 9164f68ea536</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入容器-docker-exec-attach\"><a href=\"#进入容器-docker-exec-attach\" class=\"headerlink\" title=\"进入容器 docker exec/attach\"></a>进入容器 docker exec/attach</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方式一</span><br><span class=\"line\"># 新建一个命令行并进入</span><br><span class=\"line\">docker exec -it 容器ID bashShell</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it 9164f68ea536 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 方式二</span><br><span class=\"line\"># 进入正在运行的命令行</span><br><span class=\"line\">docker attach 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 9164f68ea536</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拷贝命令-docker-copy\"><a href=\"#拷贝命令-docker-copy\" class=\"headerlink\" title=\"拷贝命令 docker copy\"></a>拷贝命令 docker copy</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 复制容器文件到本地</span><br><span class=\"line\">docker cp 容器:路径 本机路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制本地文件到容器</span><br><span class=\"line\">docker cp 本机路径 容器:路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 在centos中新建一个文件</span><br><span class=\"line\">docker exec -it -w ~ centos-01 touch /tmp/test.txt</span><br><span class=\"line\"># 拷贝容器文件到当前目录</span><br><span class=\"line\">docker cp centos-01:/tmp/test.txt ./</span><br><span class=\"line\"></span><br><span class=\"line\"># 本地新建文件并复制到容器</span><br><span class=\"line\">echo &quot;test&quot; &gt;&gt; test2.txt; docker cp ./test2.txt centos-01:/tmp/</span><br><span class=\"line\"># 查看容器内目录</span><br><span class=\"line\">docker exec -it centos-01 ls /tmp</span><br><span class=\"line\">test.txt  test2.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"联合文件系统\"><a href=\"#联合文件系统\" class=\"headerlink\" title=\"联合文件系统\"></a>联合文件系统</h2><h2 id=\"commit-镜像\"><a href=\"#commit-镜像\" class=\"headerlink\" title=\"commit 镜像\"></a>commit 镜像</h2><p>将一个容器生成一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 可选参数 容器ID 镜像名称[:tag]</span><br><span class=\"line\"></span><br><span class=\"line\"># 将一个容器生成一个本地镜像</span><br><span class=\"line\">docker commit -a caoruiy -m &quot;test helloworld&quot; c4af83c1f703 hello-world-cr:v1.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h2><p>使用容器时，希望容器之间有一个数据共享的技术，Docker中产生的数据，可以同步到本地。可以将容器内的数据，挂载到本地。</p>\n<p>这是一个容器数据持久化和同步的操作，使得容器间可以数据共享。</p>\n<h3 id=\"使用方式一-v\"><a href=\"#使用方式一-v\" class=\"headerlink\" title=\"使用方式一 -v\"></a>使用方式一 -v</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 挂载的形式启动容器</span><br><span class=\"line\"># 修改容器内容的文件，在主机上修改文件，两边均会同步</span><br><span class=\"line\"># 如果容器停止，在本地上修改文件内容，启动容器后，容器内也会进行同步</span><br><span class=\"line\">docker run -it -v /c/Users/Lenovo/Desktop/centos:/home centos /bin/bash</span><br><span class=\"line\"># 容器内部操作文件</span><br><span class=\"line\">[root@6b77aeb1d6de home]# cd /home</span><br><span class=\"line\">[root@6b77aeb1d6de home]# mkdir test</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器</span><br><span class=\"line\">ctrl + p + q</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出本地目录内容</span><br><span class=\"line\">ls /c/Users/Lenovo/Desktop/centos</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具名挂载和匿名挂载\"><a href=\"#具名挂载和匿名挂载\" class=\"headerlink\" title=\"具名挂载和匿名挂载\"></a>具名挂载和匿名挂载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 匿名挂载，挂载容器内的目录时，不指定具体的本地地址，本地卷名称</span><br><span class=\"line\">docker run -it -v 容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 匿名挂载一个卷</span><br><span class=\"line\">docker run -d -it -v /home centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看docker 卷</span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\"></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 具名挂载，挂载容器内的目录时，指定一个卷名称</span><br><span class=\"line\"># 卷名称就是一个字符串,不是一个 / 或者 ./ 的路径地址</span><br><span class=\"line\">docker run -it -v 卷名称:容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 具名挂载</span><br><span class=\"line\">docker run -d -it -v juming-cento:/home centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看docker 卷</span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\"></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9</span><br><span class=\"line\">local     juming-cento</span><br></pre></td></tr></table></figure>\n\n\n\n<p>匿名挂载和具名挂载，具体的挂载目录到底在哪里？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker元信息</span><br><span class=\"line\">docker inspect 433938cde9c0</span><br><span class=\"line\"></span><br><span class=\"line\"># 具名挂载时挂载信息输出</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;Type&quot;: &quot;volume&quot;, // 类型,挂载</span><br><span class=\"line\">      &quot;Name&quot;: &quot;juming-cento&quot;, // 挂载名称</span><br><span class=\"line\">      &quot;Source&quot;: &quot;/var/lib/docker/volumes/juming-cento/_data&quot;, // 具体的本机挂载地址</span><br><span class=\"line\">      &quot;Destination&quot;: &quot;/home&quot;, // 容器内地址</span><br><span class=\"line\">      &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">      &quot;Mode&quot;: &quot;z&quot;,</span><br><span class=\"line\">      &quot;RW&quot;: true,</span><br><span class=\"line\">      &quot;Propagation&quot;: &quot;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 匿名挂载时挂载信息输出</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Type&quot;: &quot;volume&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9&quot;,</span><br><span class=\"line\">        &quot;Source&quot;: &quot;/var/lib/docker/volumes/12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9/_data&quot;,</span><br><span class=\"line\">        &quot;Destination&quot;: &quot;/home&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;RW&quot;: true,</span><br><span class=\"line\">        &quot;Propagation&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载点都在 /var/lib/docker/volumes/xxx/_data目录下</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"使用方式二-DockerFile\"><a href=\"#使用方式二-DockerFile\" class=\"headerlink\" title=\"使用方式二 DockerFile\"></a>使用方式二 DockerFile</h3><p>DockerFile是用来构建docker镜像的一个构建文件。脚本。</p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<h1 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h1><p>为了实现多个容器之间的数据共享，最好的方式就是让多个容器挂载到一个目录地址作为数据卷。所谓的数据卷容器，就是作为存放数据的容器，其他容器加载到该容器上，实现数据共享。</p>\n<p><code>--volumes-from</code> 参数，可以从引用的容器中，挂载所有自定义的卷，需要注意的是“自定义的卷”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先启动一个容器，并挂载一个卷</span><br><span class=\"line\">docker run -it -name c1 -v ~/centos01:/centos01 centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c1 centos01卷内新建一个目录11</span><br><span class=\"line\">sh-4.4# cd centos01/</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">sh-4.4# mkdir 11</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器，在本地目录centos01中发现相同内容，挂载成功</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls</span><br><span class=\"line\">centos01  test2.txt  test.txt</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建容器c2，c1作为数据卷容器</span><br><span class=\"line\">docker run -it --name c2 --volumes-from c1 centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看容器内挂载数据</span><br><span class=\"line\">sh-4.4# cd centos01/</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c2中centos01卷下，新建文件夹22</span><br><span class=\"line\">sh-4.4# mkdir 22</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器，查看本地数据</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入容器c1 查看数据</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it c1 /bin/sh</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1657758523904.png\" alt=\"1657758523904\"></p>\n<p>删除数据卷容器c1，数据也不会丢失。<strong>共享卷实际是一个备份的概念。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本地容器，一共有c1 c2两个容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">cfe02ba04ad7   centos    &quot;/bin/sh&quot;   5 minutes ago   Up 5 minutes             c2</span><br><span class=\"line\">f7d563151f92   centos    &quot;/bin/sh&quot;   6 minutes ago   Up 6 minutes             c1</span><br><span class=\"line\"></span><br><span class=\"line\"># 强制删除数据卷容器c1</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker rm -f c1</span><br><span class=\"line\">c1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">cfe02ba04ad7   centos    &quot;/bin/sh&quot;   5 minutes ago   Up 5 minutes             c2</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看本地目录数据依然存在</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 容器c2中的数据依然存在</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it c2 /bin/sh</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c2中创建新目录33</span><br><span class=\"line\">sh-4.4# mkdir centos01/33</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22  33</span><br><span class=\"line\">sh-4.4# read escape sequence</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器后，查看本地目录，数据依然同步</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22  33</span><br></pre></td></tr></table></figure>\n\n<p>数据卷容器可以做多个容器之间的数据共享，<strong>数据卷的生命周期直到没有容器使用为止</strong>。所以删除任意一个容器不影响数据卷的信息共享。</p>\n<h1 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h1><p>从Dockerfile构建镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [可选项] 向下文目录</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选项</span><br><span class=\"line\">-f, --file \t\t#Dockerfile的名称，不指定是默认是当前文件夹的Dickerfile文件</span><br><span class=\"line\">-t, --tag </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"dockerignore\"><a href=\"#dockerignore\" class=\"headerlink\" title=\".dockerignore\"></a>.dockerignore</h1><p>排除部分构建文件，防止将大文件或者敏感文件添加到构建上下文中。</p>\n<p>每行一个目录或者文件地址，支持形式有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># comment\t\t\t注释信息</span><br><span class=\"line\">temp?\t\t\t\t排除根目录名称以temp开头的,后接单个字符的目录或文件, 如: /tempa</span><br><span class=\"line\">*/temp*\t\t\t\t排除以temp开头的子目录或文件，如: /a/tempFile.txt  /a/tempDir</span><br><span class=\"line\">*/*/temp*\t\t\t排除以temp开头的两级子目录或文件，如: /a/b/tempFile.txt  /a/b/tempDir</span><br><span class=\"line\">**/tmp*\t\t\t\t排除所有目录中的以temp开头的目录或文件</span><br><span class=\"line\">!temp*\t\t\t\t!表示排除例外，表示剔除根目录下以temp开头的目录或文件。</span><br></pre></td></tr></table></figure>\n\n<p>基本原则为<code>?</code>匹配单个字符；<code>*</code>匹配多个字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以下写法的含义表示保留除了根目录下的以以temp开头的目录或文件外的，所有层级下的以temp开头的目录或文件</span><br><span class=\"line\">**/tmp*</span><br><span class=\"line\">!temp*</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例: 除了/tempa 其他文件均会被剔除</span><br><span class=\"line\">/tempa</span><br><span class=\"line\">/tempb/a</span><br><span class=\"line\">/a/tempc</span><br><span class=\"line\">/a/b/tempd</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h1><p>docker file是用来构建docker镜像的文件，是一个命令脚本文件。</p>\n<p>构建镜像的步骤：</p>\n<ol>\n<li>编写dockerfile文件</li>\n<li>使用docker build 构建一个镜像</li>\n<li>使用docker run运行进行</li>\n<li>使用docker push 发布镜像</li>\n</ol>\n<h2 id=\"dockerFile指令\"><a href=\"#dockerFile指令\" class=\"headerlink\" title=\"dockerFile指令\"></a>dockerFile指令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARG\t\t\t# 定义变量，提供给FROM使用</span><br><span class=\"line\">FROM \t\t# 基础镜像，镜像构建开始位置</span><br><span class=\"line\">MAINTAINER\t# 负责人，姓名+邮箱</span><br><span class=\"line\">RUN\t\t\t# 进行构建时需要执行的命令</span><br><span class=\"line\">ADD\t\t\t# 复制文件，往镜像中添加内容</span><br><span class=\"line\">WORKDIR\t\t# 设置镜像的工作目录</span><br><span class=\"line\">VOLUME\t\t# 挂载目录</span><br><span class=\"line\">EXPOST\t\t# 对外暴露的端口</span><br><span class=\"line\">RUN\t\t\t#</span><br><span class=\"line\">CMD\t\t\t# 指定容器启动时候要运行的命令，相当于为容器执行提供默认值。只有最后一个会生效，可以被替代</span><br><span class=\"line\">ENTRYPOINT\t# 指定容器启动时候要运行的命令，不可替代，可以追加</span><br><span class=\"line\">ONBUILD\t\t# </span><br><span class=\"line\">COPY\t\t# 类似ADD，拷贝内容到镜像中</span><br><span class=\"line\">ENV\t\t\t# 构建时设置环境变量</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该命令支持两种写法，shell和exec，</span><br><span class=\"line\"># shell形式将改变默认的shell，linux下默认是/bin/sh -c，window下默认是cmd /S /C</span><br><span class=\"line\"># exec形式，因为可以避免shell字符串修改</span><br><span class=\"line\"># RUN &lt;command&gt;\t\t\t\t\t\t\t\t\t# shell形式</span><br><span class=\"line\"># RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\t\t# exec形式</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以使用\\符号进行命令换行书写</span><br><span class=\"line\">RUN /bin/sh -c &#x27;cd /home; \\</span><br><span class=\"line\">ls -al&#x27;</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">RUM /bin/sh -c &#x27;cd /home; ls -al&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 如果需要使用其他shell, 请使用exec形式</span><br><span class=\"line\"># exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (&quot;) 而不是单引号 (&#x27;)</span><br><span class=\"line\">RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;cd /home&quot;, &quot;ls -al&quot;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (“) 而不是单引号 (‘)</p>\n</blockquote>\n<blockquote>\n<p>exec模式，不是直接调用命令，所以不会引用shell脚本命令，如果你希望启动时使用shell，可以明确指定hell。就像这样：RUN [“/bin/bash”, “-c”, “cd /home”, “ls -al”]</p>\n</blockquote>\n<p>基于centos制作自己的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-centos</span><br><span class=\"line\">cd my-centos</span><br><span class=\"line\">vim Dockerfile</span><br></pre></td></tr></table></figure>\n<p>编写Dockerfile文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class=\"line\">RUN sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class=\"line\">RUN yum clear</span><br><span class=\"line\">RUN yum makecache</span><br><span class=\"line\">RUN yum -y install wget</span><br><span class=\"line\">RUN echo &#x27;---------------------over--------------------&#x27;</span><br></pre></td></tr></table></figure>\n<p>生成镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docekr build -t my-centyos .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行镜像</span><br><span class=\"line\">docker run -it --name mc1 my-centos /bin/sh</span><br><span class=\"line\"># 容器内执行,已经包含wget命令</span><br><span class=\"line\">[root@8d8302624841 /]# wget</span><br><span class=\"line\">wget: missing URL</span><br><span class=\"line\">Usage: wget [OPTION]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\">Try `wget --help&#x27; for more options.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CMD-和-ENTRYPOINT的区别\"><a href=\"#CMD-和-ENTRYPOINT的区别\" class=\"headerlink\" title=\"CMD 和 ENTRYPOINT的区别\"></a>CMD 和 ENTRYPOINT的区别</h2><p>CMD是执行运行的默认命令，当镜像运行时不指定任何命令时，默认的CMD命令会被执行，该指令可以在运行时被替换。</p>\n<h3 id=\"CMD制作镜像\"><a href=\"#CMD制作镜像\" class=\"headerlink\" title=\"CMD制作镜像\"></a>CMD制作镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">CMD ls -a</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译生成镜像</span><br><span class=\"line\">docker build -t my-centos .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行时不指定默认命令，将执行  ls -a</span><br><span class=\"line\">docker run -it my-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行时指定默认命令，执行信息被新命令覆盖</span><br><span class=\"line\">[root@VM-16-13-centos my-centos]# docker run -it my-centos ls -al</span><br><span class=\"line\">total 56</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 .</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 ..</span><br><span class=\"line\">-rwxr-xr-x   1 root root    0 Jul 14 06:28 .dockerenv</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class=\"line\">drwxr-xr-x   5 root root  360 Jul 14 06:28 dev</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 etc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class=\"line\">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class=\"line\">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class=\"line\">dr-xr-xr-x 129 root root    0 Jul 14 06:28 proc</span><br><span class=\"line\">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class=\"line\">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class=\"line\">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class=\"line\">dr-xr-xr-x  13 root root    0 Jul 14 06:28 sys</span><br><span class=\"line\">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class=\"line\">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class=\"line\">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ENTRYPOINT制作镜像\"><a href=\"#ENTRYPOINT制作镜像\" class=\"headerlink\" title=\"ENTRYPOINT制作镜像\"></a>ENTRYPOINT制作镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，此处的ENTRYPOINT写法是采用exec形式（[命令，参数，参数]）（ENTRYPOINT [“ls”, “-a”]）只有该形式，在运行镜像时才能追加参数。</p>\n<p>如果采用shell命令形式（ENTRYPOINT 字符串）（ENTRYPOINT ls -a），他将在<code>/bin/sh -c</code>中执行，并会忽略docker run时的命令参数</p>\n<p>exec 形式不会调用shell命令，这就意味着，使用该命令时，你无法通过命令行外壳进入容器，如想使用shell处理，可以这么写<code>ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;ls -a&quot; ]</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成镜像</span><br><span class=\"line\">docker build -t entrypoint-centos .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,默认命令</span><br><span class=\"line\">docker run -it --name ec1 entrypoint-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,使用默认命令,追加参数</span><br><span class=\"line\">docker run -it --name ec2 entrypoint-centos -l</span><br><span class=\"line\">total 56</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 .</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 ..</span><br><span class=\"line\">-rwxr-xr-x   1 root root    0 Jul 14 06:43 .dockerenv</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class=\"line\">drwxr-xr-x   5 root root  360 Jul 14 06:43 dev</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 etc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class=\"line\">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class=\"line\">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class=\"line\">dr-xr-xr-x 126 root root    0 Jul 14 06:43 proc</span><br><span class=\"line\">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class=\"line\">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class=\"line\">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class=\"line\">dr-xr-xr-x  13 root root    0 Jul 14 06:43 sys</span><br><span class=\"line\">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class=\"line\">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class=\"line\">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shell形式的ENTRYPOINT\"><a href=\"#shell形式的ENTRYPOINT\" class=\"headerlink\" title=\"shell形式的ENTRYPOINT\"></a>shell形式的ENTRYPOINT</h3><p>如果指定字符串形式的命令，该命令会在<code>/bin/sh -c</code>内执行，并会忽略命令行中的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">ENTRYPOINT ls -a</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行,默认命令</span><br><span class=\"line\">docker run -it --name ec1 entrypoint-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,使用默认命令,追加参数</span><br><span class=\"line\">docker run -it --name ec2 entrypoint-centos -l</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"今日头条前端技术博客":{"link":"https://techblog.toutiao.com/","avatar":"/images/favatar/techblog.jpg","desc":"用技术提升美好事物发生的概率"},"美团技术团队":{"link":"https://tech.meituan.com/","avatar":"/images/favatar/meituan.jpg","desc":"一行代码, 亿万生活"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官方文档：<a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/install/centos/\">https://docs.docker.com/engine/install/centos/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1. 卸载旧版本</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 安装前置工具/依赖</span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 设置镜像仓库</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 使用阿里云镜像</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\"># 4. 安装最新版docker </span><br><span class=\"line\"># docker-ce 社区版本，docker-ee 企业版，推荐社区版</span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 4. 安装指定版本docker</span><br><span class=\"line\"># 4.1 列出所有版本可用版本</span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64                3:20.10.9-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.8-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.7-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.6-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.5-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.4-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.3-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.2-3.el8                 docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.17-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.16-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.15-3.el8                docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64                3:20.10.14-3.el8                docker-ce-stable</span><br><span class=\"line\"></span><br><span class=\"line\"># 4.2 安装指定版本</span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\"># 4.2 选择需要的版本，通过第二列，“：”之后和“-”之前的部分，是版本号（VERSION_STRING）</span><br><span class=\"line\"># 例如安装第一个20.10.9版本</span><br><span class=\"line\">sudo yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 5. 启动docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 6. 查看docker版本信息</span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.17</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.17.11</span><br><span class=\"line\"> Git commit:        100c701</span><br><span class=\"line\"> Built:             Mon Jun  6 23:03:11 2022</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      true</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          20.10.17</span><br><span class=\"line\">  API version:      1.41 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.17.11</span><br><span class=\"line\">  Git commit:       a89b842</span><br><span class=\"line\">  Built:            Mon Jun  6 23:01:29 2022</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.6.6</span><br><span class=\"line\">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.1.2</span><br><span class=\"line\">  GitCommit:        v1.1.2-0-ga916309</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.19.0</span><br><span class=\"line\">  GitCommit:        de40ad0</span><br><span class=\"line\">  </span><br><span class=\"line\"># 7. 使用hello-world测试docker是否按照成功</span><br><span class=\"line\">sudo docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">2db29710123e: Pull complete</span><br><span class=\"line\">Digest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker下载的所有镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   9 months ago   13.3kB</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><p><a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/install/centos/#uninstall-docker-engine\">https://docs.docker.com/engine/install/centos/#uninstall-docker-engine</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 卸载依赖</span><br><span class=\"line\">sudo yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除目录</span><br><span class=\"line\">sudo rm -rf /var/lib/docker</span><br><span class=\"line\">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>/var/lib/docker</code> 是docker的默认工作路径。</p>\n<h2 id=\"docker-run-执行流程\"><a href=\"#docker-run-执行流程\" class=\"headerlink\" title=\"docker run 执行流程\"></a>docker run 执行流程</h2><p>执行<code>docker run</code>时，首先会在本地查找镜像是否存在，如果存在，则直接运行。如果不存在，则到远程docker hub上进行下载，如果下载成功，则运行，如果不存在，则报错。</p>\n<h2 id=\"docker-原理\"><a href=\"#docker-原理\" class=\"headerlink\" title=\"docker 原理\"></a>docker 原理</h2><p> Docker 使用客户端-服务器架构。Docker*客户端与 Docker守护进程对话，后者负责构建、运行和分发 Docker 容器的繁重工作 。 Docker 守护程序 ( <code>dockerd</code>) 侦听 Docker API 请求并管理 Docker 对象，例如图像、容器、网络和卷。 </p>\n<p>Docker 使用一种称为<em>容器*<code>namespaces</code>的技术来提供隔离的工作空间。当您运行容器时，Docker 会为该容器创建一组 *命名空间。</em></p>\n<p>这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。</p>\n<p><img src=\"/.com//architecture.svg\" alt=\"docker\"></p>\n<h2 id=\"docker信息命令\"><a href=\"#docker信息命令\" class=\"headerlink\" title=\"docker信息命令\"></a>docker信息命令</h2><h3 id=\"docker-verion\"><a href=\"#docker-verion\" class=\"headerlink\" title=\"docker verion\"></a>docker verion</h3><p>显示docker的基本信息</p>\n<h3 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h3><p>显示docker的系统信息，包括镜像和容器数量等等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Context:    default</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"> Plugins:</span><br><span class=\"line\">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class=\"line\">  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)</span><br><span class=\"line\">  compose: Docker Compose (Docker Inc., v2.6.0)</span><br><span class=\"line\">  scan: Docker Scan (Docker Inc., v0.17.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Containers: 1</span><br><span class=\"line\">  Running: 0</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 1</span><br><span class=\"line\"> Images: 1</span><br><span class=\"line\"> Server Version: 20.10.17</span><br><span class=\"line\"> Storage Driver: overlay2</span><br><span class=\"line\">  Backing Filesystem: extfs</span><br><span class=\"line\">  Supports d_type: true</span><br><span class=\"line\">  Native Overlay Diff: true</span><br><span class=\"line\">  userxattr: false</span><br><span class=\"line\"> Logging Driver: json-file</span><br><span class=\"line\"> Cgroup Driver: cgroupfs</span><br><span class=\"line\"> Cgroup Version: 1</span><br><span class=\"line\"> Plugins:</span><br><span class=\"line\">  Volume: local</span><br><span class=\"line\">  Network: bridge host ipvlan macvlan null overlay</span><br><span class=\"line\">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class=\"line\"> Swarm: inactive</span><br><span class=\"line\"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class=\"line\"> Default Runtime: runc</span><br><span class=\"line\"> Init Binary: docker-init</span><br><span class=\"line\"> containerd version: 10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class=\"line\"> runc version: v1.1.2-0-ga916309</span><br><span class=\"line\"> init version: de40ad0</span><br><span class=\"line\"> Security Options:</span><br><span class=\"line\">  seccomp</span><br><span class=\"line\">   Profile: default</span><br><span class=\"line\"> Kernel Version: 4.18.0-305.10.2.el8_4.x86_64</span><br><span class=\"line\"> Operating System: CentOS Linux 8 (Core)</span><br><span class=\"line\"> OSType: linux</span><br><span class=\"line\"> Architecture: x86_64</span><br><span class=\"line\"> CPUs: 2</span><br><span class=\"line\"> Total Memory: 3.649GiB</span><br><span class=\"line\"> Name: VM-16-13-centos</span><br><span class=\"line\"> ID: KFBX:BDVF:ADQ4:AZAB:YA5L:TBQS:Z3I2:JOHA:ITTB:SQDC:E42M:M73J</span><br><span class=\"line\"> Docker Root Dir: /var/lib/docker</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"> Registry: https://index.docker.io/v1/</span><br><span class=\"line\"> Labels:</span><br><span class=\"line\"> Experimental: false</span><br><span class=\"line\"> Insecure Registries:</span><br><span class=\"line\">  127.0.0.0/8</span><br><span class=\"line\"> Live Restore Enabled: false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-命令-–help\"><a href=\"#docker-命令-–help\" class=\"headerlink\" title=\"docker  命令 –help\"></a>docker  命令 –help</h3><p>命令文档  <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/reference/\">https://docs.docker.com/reference/</a></p>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><h3 id=\"docker-image\"><a href=\"#docker-image\" class=\"headerlink\" title=\"docker image\"></a>docker image</h3><p>镜像管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   9 months ago   13.3kB</span><br><span class=\"line\"></span><br><span class=\"line\"># REPOSITORY \t镜像的仓库源，容器名称</span><br><span class=\"line\"># TAG\t\t\t镜像的标签</span><br><span class=\"line\"># IMAGE ID\t\t镜像ID</span><br><span class=\"line\"># CREATED\t\t镜像创建时间</span><br><span class=\"line\"># SIZE\t\t\t镜像大小</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可选性</span><br><span class=\"line\">-a, --all\t\t显示所有镜像</span><br><span class=\"line\">-q, --quiet\t\t仅显示镜像ID</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-search\"><a href=\"#docker-search\" class=\"headerlink\" title=\"docker search\"></a>docker search</h3><p>搜索镜像</p>\n<p>网页版镜像仓库地址: <a target=\"_blank\" rel=\"noopener\" href=\"https://hub.docker.com/search\">https://hub.docker.com/search</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 所有所有镜像</span><br><span class=\"line\">docker search mysql</span><br><span class=\"line\">NAME\tDESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql\tMySQL is a widely used, open-source relation…   12851     [OK]</span><br><span class=\"line\">mariadb\tMariaDB Server is a high performing open sou…   4926      [OK]</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选项</span><br><span class=\"line\">-f, --filter</span><br><span class=\"line\">--format</span><br><span class=\"line\">--limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 按条件搜索，STARS大于600 且 是官方仓库</span><br><span class=\"line\"># 两种写法, 多条件使用多个--filter</span><br><span class=\"line\">docker search mysql --filter=stars=600 --filter is-official=true</span><br><span class=\"line\"></span><br><span class=\"line\">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql     MySQL is a widely used, open-source relation…   12851     [OK]</span><br><span class=\"line\">mariadb   MariaDB Server is a high performing open sou…   4926      [OK]</span><br><span class=\"line\"></span><br><span class=\"line\"># --filter支持三个条件</span><br><span class=\"line\"># stars\t\t\t\t收藏数\t\tstars=number</span><br><span class=\"line\"># is-automated\t\t自动化 \tis-automated=true/false</span><br><span class=\"line\"># is-official\t\t官方\t\t is-official=true/false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a>docker pull</h3><p>下载镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull 镜像名[:tag]</span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">Using default tag: latest\t\t\t# 如果不写tag，默认是latest</span><br><span class=\"line\">latest: Pulling from library/mysql\t# 分层下载，联合文件系统，docker image核心</span><br><span class=\"line\">e54b73e95ef3: Pull complete</span><br><span class=\"line\">bb429e544310: Pull complete</span><br><span class=\"line\">c148b3f9047c: Pull complete</span><br><span class=\"line\">a1dd213a3236: Pull complete</span><br><span class=\"line\">297095d1476d: Pull complete</span><br><span class=\"line\">87f3aa837301: Pull complete</span><br><span class=\"line\">535019436481: Pull complete</span><br><span class=\"line\">23722cff1cc3: Pull complete</span><br><span class=\"line\">eb19883dc4c6: Pull complete</span><br><span class=\"line\">6eaa2c236095: Pull complete</span><br><span class=\"line\">Digest: sha256:444f037733d01fc3dfc691a9ab05e346629e8e4d3a6c75da864f21421fb38ced\t# 签名</span><br><span class=\"line\">Status: Downloaded newer image for mysql:latest</span><br><span class=\"line\">docker.io/library/mysql:latest\t\t#docker image 真实地址</span><br><span class=\"line\"></span><br><span class=\"line\"># 以下两个命令等价</span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker pull docker.io/library/mysql:latest</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-rmi\"><a href=\"#docker-rmi\" class=\"headerlink\" title=\"docker rmi\"></a>docker rmi</h3><p>删除镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Untagged: hello-world:latest</span><br><span class=\"line\">Untagged: hello-world@sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class=\"line\">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f image_id[:tag]\t\t# 删除指定镜像</span><br><span class=\"line\">docker rmi - f image_id image_id \t# 删除多个镜像</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><p>有镜像才能创建容器</p>\n<h3 id=\"新建容器并启动-docker-run\"><a href=\"#新建容器并启动-docker-run\" class=\"headerlink\" title=\"新建容器并启动 docker run\"></a>新建容器并启动 docker run</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [参数] image</span><br><span class=\"line\"></span><br><span class=\"line\"># 参数说明</span><br><span class=\"line\">--name=&quot;容器名称&quot;\t容器名字，启动容器的名称，便于区分</span><br><span class=\"line\">-d\t\t\t\t\t后台运行</span><br><span class=\"line\">-it\t\t\t\t\t使用交互方式运行,进入容器内容查看内容</span><br><span class=\"line\">-p \t\t\t\t\t指定容器端口 -p 8080:80</span><br><span class=\"line\">\t-p ip:主机端口:容器端口</span><br><span class=\"line\">\t-p 主机端口:容器端口(最常用)</span><br><span class=\"line\">\t-p 容器端口</span><br><span class=\"line\">-P\t\t\t\t\t随机指定端口</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cmd 下启动cenos</span><br><span class=\"line\">docker run -it centos /bin/sh</span><br><span class=\"line\">[root@5dda638536fa /]#</span><br><span class=\"line\"></span><br><span class=\"line\"># centos 下启动centos</span><br><span class=\"line\">docker run -it centos /bin/bash</span><br><span class=\"line\">[root@5dda638536fa /]#</span><br><span class=\"line\"></span><br><span class=\"line\"># exit停止容器并退出容器</span><br><span class=\"line\">[root@5dda638536fa /]# exit</span><br><span class=\"line\"># ctrl + P + Q 不停止容器 退出容器</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a>docker ps</h3><p>列出运行的容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker ps [可选参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出正在运行的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES</span><br><span class=\"line\">113ffb59a550   nginx     &quot;/docker-entrypoint.…&quot;   6 minutes ago   Up 6 minutes   0.0.0.0:8080-&gt;80/tcp   nginx-01</span><br><span class=\"line\"></span><br><span class=\"line\"># CONTAINER ID \t容器ID</span><br><span class=\"line\"># IMAGE\t\t\t镜像名称</span><br><span class=\"line\"># COMMAND\t\t启动命令</span><br><span class=\"line\"># CREATED\t\t容器创建时间</span><br><span class=\"line\"># STATUS\t\t运行状态</span><br><span class=\"line\"># PORTS\t\t\t端口映射情况</span><br><span class=\"line\"># NAMES\t\t\t容器名称</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有容器，包括已经停止的</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称模糊搜索</span><br><span class=\"line\">docker ps -a --filter &quot;name=ng&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据容器ID模糊搜索</span><br><span class=\"line\">docker ps -a --filter &quot;id=cca&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-a\t\t\t\t\t\t全部</span><br><span class=\"line\">-n num\t\t\t\t\t最近创建的几条</span><br><span class=\"line\">-l\t\t\t\t\t\t最后创建的一条</span><br><span class=\"line\">-q\t\t\t\t\t\t只显示ID</span><br><span class=\"line\">-s\t\t\t\t\t\t显示size大小</span><br><span class=\"line\">--no-trunc\t\t\t\t显示明细信息， don&#x27;t truncate output 不截断输出</span><br><span class=\"line\">-f, --filter\t\t\t过滤条件 -f &quot;key=value&quot;</span><br><span class=\"line\">\tid</span><br><span class=\"line\">\tname</span><br><span class=\"line\">\tlabel</span><br><span class=\"line\">\tstatus\t\t\t\tOne of created, restarting, running, removing, paused, exited, or dead</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-rm\"><a href=\"#docker-rm\" class=\"headerlink\" title=\"docker rm\"></a>docker rm</h3><p>删除容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除指定容器</span><br><span class=\"line\">docker rm bfb2710c293d</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有不在运行的容器</span><br><span class=\"line\">docker rm $(docker ps -aq -f &quot;status=exited&quot;)</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">docker ps -aq -f &quot;status=exited&quot; | xargs docker rm</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-f\t\t\t\t强制删除正在运行的容器</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"docker-start-restart\"><a href=\"#docker-start-restart\" class=\"headerlink\" title=\"docker start/restart\"></a>docker start/restart</h3><p>启动容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker start 84480543d8cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启容器，重启时间间隔2秒</span><br><span class=\"line\">docker restart -t 10 84480543d8cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-stop-kill\"><a href=\"#docker-stop-kill\" class=\"headerlink\" title=\"docker stop/kill\"></a>docker stop/kill</h3><p>停止容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优雅退出容器</span><br><span class=\"line\">docker stop 84480543d8cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 强制退出容器</span><br><span class=\"line\">docker kill 84480543d8cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"后台启动容器-docker-run\"><a href=\"#后台启动容器-docker-run\" class=\"headerlink\" title=\"后台启动容器 docker run\"></a>后台启动容器 docker run</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用-d指令后台启动</span><br><span class=\"line\">docker run -d centos</span><br><span class=\"line\"></span><br><span class=\"line\"># 该命令存在问题，通过docker ps 发现容器被停止了</span><br><span class=\"line\"># docker容器使用后台运行时，必须要有一个前台进程，如果没有就会自动停止，该方式就缺乏前台进程导致启动后自动停止</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用-it保持容器后台运行</span><br><span class=\"line\">docker run --name centos-03 -d  -it centos /bin/sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看日志-docker-logs\"><a href=\"#查看日志-docker-logs\" class=\"headerlink\" title=\"查看日志 docker logs\"></a>查看日志 docker logs</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听容器日志</span><br><span class=\"line\">docker logs -tf 9164f68ea536</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出指定时间之后的日志</span><br><span class=\"line\">docker logs --since 2022-07-12T08:15:04.719814800Z 9164f68ea536</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选参数</span><br><span class=\"line\">-f\t\t\t\t\t监听日志输出</span><br><span class=\"line\">-n, --tail\t\t\t输出最后N行日志</span><br><span class=\"line\">-t, --timestamps\t显示时间戳，每一行日志前输出时间戳信息</span><br><span class=\"line\">-since\t\t\t\t输出指定时间之后的日志</span><br><span class=\"line\">-until\t\t\t\t输出指定时间之前的日志</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看容器进程-docker-top\"><a href=\"#查看容器进程-docker-top\" class=\"headerlink\" title=\"查看容器进程 docker top\"></a>查看容器进程 docker top</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top 9164f68ea536</span><br><span class=\"line\">UID\t\tPID\t\tPPID\tC\tSTIME\tTTY\t\tTIME\t\tCMD</span><br><span class=\"line\">root\t3529\t3509\t0\t08:15\t?\t\t00:00:00\t/bin/sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看容器元数据-docker-inspect\"><a href=\"#查看容器元数据-docker-inspect\" class=\"headerlink\" title=\"查看容器元数据 docker inspect\"></a>查看容器元数据 docker inspect</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看容器元数据</span><br><span class=\"line\">docker inspect 9164f68ea536</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进入容器-docker-exec-attach\"><a href=\"#进入容器-docker-exec-attach\" class=\"headerlink\" title=\"进入容器 docker exec/attach\"></a>进入容器 docker exec/attach</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方式一</span><br><span class=\"line\"># 新建一个命令行并进入</span><br><span class=\"line\">docker exec -it 容器ID bashShell</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it 9164f68ea536 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 方式二</span><br><span class=\"line\"># 进入正在运行的命令行</span><br><span class=\"line\">docker attach 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 9164f68ea536</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拷贝命令-docker-copy\"><a href=\"#拷贝命令-docker-copy\" class=\"headerlink\" title=\"拷贝命令 docker copy\"></a>拷贝命令 docker copy</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 复制容器文件到本地</span><br><span class=\"line\">docker cp 容器:路径 本机路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制本地文件到容器</span><br><span class=\"line\">docker cp 本机路径 容器:路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 在centos中新建一个文件</span><br><span class=\"line\">docker exec -it -w ~ centos-01 touch /tmp/test.txt</span><br><span class=\"line\"># 拷贝容器文件到当前目录</span><br><span class=\"line\">docker cp centos-01:/tmp/test.txt ./</span><br><span class=\"line\"></span><br><span class=\"line\"># 本地新建文件并复制到容器</span><br><span class=\"line\">echo &quot;test&quot; &gt;&gt; test2.txt; docker cp ./test2.txt centos-01:/tmp/</span><br><span class=\"line\"># 查看容器内目录</span><br><span class=\"line\">docker exec -it centos-01 ls /tmp</span><br><span class=\"line\">test.txt  test2.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"联合文件系统\"><a href=\"#联合文件系统\" class=\"headerlink\" title=\"联合文件系统\"></a>联合文件系统</h2><h2 id=\"commit-镜像\"><a href=\"#commit-镜像\" class=\"headerlink\" title=\"commit 镜像\"></a>commit 镜像</h2><p>将一个容器生成一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 可选参数 容器ID 镜像名称[:tag]</span><br><span class=\"line\"></span><br><span class=\"line\"># 将一个容器生成一个本地镜像</span><br><span class=\"line\">docker commit -a caoruiy -m &quot;test helloworld&quot; c4af83c1f703 hello-world-cr:v1.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h2><p>使用容器时，希望容器之间有一个数据共享的技术，Docker中产生的数据，可以同步到本地。可以将容器内的数据，挂载到本地。</p>\n<p>这是一个容器数据持久化和同步的操作，使得容器间可以数据共享。</p>\n<h3 id=\"使用方式一-v\"><a href=\"#使用方式一-v\" class=\"headerlink\" title=\"使用方式一 -v\"></a>使用方式一 -v</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 挂载的形式启动容器</span><br><span class=\"line\"># 修改容器内容的文件，在主机上修改文件，两边均会同步</span><br><span class=\"line\"># 如果容器停止，在本地上修改文件内容，启动容器后，容器内也会进行同步</span><br><span class=\"line\">docker run -it -v /c/Users/Lenovo/Desktop/centos:/home centos /bin/bash</span><br><span class=\"line\"># 容器内部操作文件</span><br><span class=\"line\">[root@6b77aeb1d6de home]# cd /home</span><br><span class=\"line\">[root@6b77aeb1d6de home]# mkdir test</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器</span><br><span class=\"line\">ctrl + p + q</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出本地目录内容</span><br><span class=\"line\">ls /c/Users/Lenovo/Desktop/centos</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具名挂载和匿名挂载\"><a href=\"#具名挂载和匿名挂载\" class=\"headerlink\" title=\"具名挂载和匿名挂载\"></a>具名挂载和匿名挂载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 匿名挂载，挂载容器内的目录时，不指定具体的本地地址，本地卷名称</span><br><span class=\"line\">docker run -it -v 容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 匿名挂载一个卷</span><br><span class=\"line\">docker run -d -it -v /home centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看docker 卷</span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\"></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 具名挂载，挂载容器内的目录时，指定一个卷名称</span><br><span class=\"line\"># 卷名称就是一个字符串,不是一个 / 或者 ./ 的路径地址</span><br><span class=\"line\">docker run -it -v 卷名称:容器目录 镜像 交互命令</span><br><span class=\"line\"></span><br><span class=\"line\"># 具名挂载</span><br><span class=\"line\">docker run -d -it -v juming-cento:/home centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看docker 卷</span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\"></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9</span><br><span class=\"line\">local     juming-cento</span><br></pre></td></tr></table></figure>\n\n\n\n<p>匿名挂载和具名挂载，具体的挂载目录到底在哪里？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker元信息</span><br><span class=\"line\">docker inspect 433938cde9c0</span><br><span class=\"line\"></span><br><span class=\"line\"># 具名挂载时挂载信息输出</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;Type&quot;: &quot;volume&quot;, // 类型,挂载</span><br><span class=\"line\">      &quot;Name&quot;: &quot;juming-cento&quot;, // 挂载名称</span><br><span class=\"line\">      &quot;Source&quot;: &quot;/var/lib/docker/volumes/juming-cento/_data&quot;, // 具体的本机挂载地址</span><br><span class=\"line\">      &quot;Destination&quot;: &quot;/home&quot;, // 容器内地址</span><br><span class=\"line\">      &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">      &quot;Mode&quot;: &quot;z&quot;,</span><br><span class=\"line\">      &quot;RW&quot;: true,</span><br><span class=\"line\">      &quot;Propagation&quot;: &quot;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 匿名挂载时挂载信息输出</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Type&quot;: &quot;volume&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9&quot;,</span><br><span class=\"line\">        &quot;Source&quot;: &quot;/var/lib/docker/volumes/12d96dec13ff04dcc58d060d00bb01fcc3128102476160a8d79c0fa815de14b9/_data&quot;,</span><br><span class=\"line\">        &quot;Destination&quot;: &quot;/home&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;RW&quot;: true,</span><br><span class=\"line\">        &quot;Propagation&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载点都在 /var/lib/docker/volumes/xxx/_data目录下</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"使用方式二-DockerFile\"><a href=\"#使用方式二-DockerFile\" class=\"headerlink\" title=\"使用方式二 DockerFile\"></a>使用方式二 DockerFile</h3><p>DockerFile是用来构建docker镜像的一个构建文件。脚本。</p>\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<h1 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h1><p>为了实现多个容器之间的数据共享，最好的方式就是让多个容器挂载到一个目录地址作为数据卷。所谓的数据卷容器，就是作为存放数据的容器，其他容器加载到该容器上，实现数据共享。</p>\n<p><code>--volumes-from</code> 参数，可以从引用的容器中，挂载所有自定义的卷，需要注意的是“自定义的卷”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先启动一个容器，并挂载一个卷</span><br><span class=\"line\">docker run -it -name c1 -v ~/centos01:/centos01 centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c1 centos01卷内新建一个目录11</span><br><span class=\"line\">sh-4.4# cd centos01/</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">sh-4.4# mkdir 11</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器，在本地目录centos01中发现相同内容，挂载成功</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls</span><br><span class=\"line\">centos01  test2.txt  test.txt</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建容器c2，c1作为数据卷容器</span><br><span class=\"line\">docker run -it --name c2 --volumes-from c1 centos /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看容器内挂载数据</span><br><span class=\"line\">sh-4.4# cd centos01/</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c2中centos01卷下，新建文件夹22</span><br><span class=\"line\">sh-4.4# mkdir 22</span><br><span class=\"line\">sh-4.4# ls</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器，查看本地数据</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入容器c1 查看数据</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it c1 /bin/sh</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//1657758523904.png\" alt=\"1657758523904\"></p>\n<p>删除数据卷容器c1，数据也不会丢失。<strong>共享卷实际是一个备份的概念。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看本地容器，一共有c1 c2两个容器</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">cfe02ba04ad7   centos    &quot;/bin/sh&quot;   5 minutes ago   Up 5 minutes             c2</span><br><span class=\"line\">f7d563151f92   centos    &quot;/bin/sh&quot;   6 minutes ago   Up 6 minutes             c1</span><br><span class=\"line\"></span><br><span class=\"line\"># 强制删除数据卷容器c1</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker rm -f c1</span><br><span class=\"line\">c1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">cfe02ba04ad7   centos    &quot;/bin/sh&quot;   5 minutes ago   Up 5 minutes             c2</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看本地目录数据依然存在</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 容器c2中的数据依然存在</span><br><span class=\"line\">[root@VM-16-13-centos ~]# docker exec -it c2 /bin/sh</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22</span><br><span class=\"line\"></span><br><span class=\"line\"># 在容器c2中创建新目录33</span><br><span class=\"line\">sh-4.4# mkdir centos01/33</span><br><span class=\"line\">sh-4.4# ls centos01/</span><br><span class=\"line\">11  22  33</span><br><span class=\"line\">sh-4.4# read escape sequence</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出容器后，查看本地目录，数据依然同步</span><br><span class=\"line\">[root@VM-16-13-centos ~]# ls centos01/</span><br><span class=\"line\">11  22  33</span><br></pre></td></tr></table></figure>\n\n<p>数据卷容器可以做多个容器之间的数据共享，<strong>数据卷的生命周期直到没有容器使用为止</strong>。所以删除任意一个容器不影响数据卷的信息共享。</p>\n<h1 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h1><p>从Dockerfile构建镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [可选项] 向下文目录</span><br><span class=\"line\"></span><br><span class=\"line\"># 可选项</span><br><span class=\"line\">-f, --file \t\t#Dockerfile的名称，不指定是默认是当前文件夹的Dickerfile文件</span><br><span class=\"line\">-t, --tag </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"dockerignore\"><a href=\"#dockerignore\" class=\"headerlink\" title=\".dockerignore\"></a>.dockerignore</h1><p>排除部分构建文件，防止将大文件或者敏感文件添加到构建上下文中。</p>\n<p>每行一个目录或者文件地址，支持形式有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># comment\t\t\t注释信息</span><br><span class=\"line\">temp?\t\t\t\t排除根目录名称以temp开头的,后接单个字符的目录或文件, 如: /tempa</span><br><span class=\"line\">*/temp*\t\t\t\t排除以temp开头的子目录或文件，如: /a/tempFile.txt  /a/tempDir</span><br><span class=\"line\">*/*/temp*\t\t\t排除以temp开头的两级子目录或文件，如: /a/b/tempFile.txt  /a/b/tempDir</span><br><span class=\"line\">**/tmp*\t\t\t\t排除所有目录中的以temp开头的目录或文件</span><br><span class=\"line\">!temp*\t\t\t\t!表示排除例外，表示剔除根目录下以temp开头的目录或文件。</span><br></pre></td></tr></table></figure>\n\n<p>基本原则为<code>?</code>匹配单个字符；<code>*</code>匹配多个字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以下写法的含义表示保留除了根目录下的以以temp开头的目录或文件外的，所有层级下的以temp开头的目录或文件</span><br><span class=\"line\">**/tmp*</span><br><span class=\"line\">!temp*</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例: 除了/tempa 其他文件均会被剔除</span><br><span class=\"line\">/tempa</span><br><span class=\"line\">/tempb/a</span><br><span class=\"line\">/a/tempc</span><br><span class=\"line\">/a/b/tempd</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h1><p>docker file是用来构建docker镜像的文件，是一个命令脚本文件。</p>\n<p>构建镜像的步骤：</p>\n<ol>\n<li>编写dockerfile文件</li>\n<li>使用docker build 构建一个镜像</li>\n<li>使用docker run运行进行</li>\n<li>使用docker push 发布镜像</li>\n</ol>\n<h2 id=\"dockerFile指令\"><a href=\"#dockerFile指令\" class=\"headerlink\" title=\"dockerFile指令\"></a>dockerFile指令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARG\t\t\t# 定义变量，提供给FROM使用</span><br><span class=\"line\">FROM \t\t# 基础镜像，镜像构建开始位置</span><br><span class=\"line\">MAINTAINER\t# 负责人，姓名+邮箱</span><br><span class=\"line\">RUN\t\t\t# 进行构建时需要执行的命令</span><br><span class=\"line\">ADD\t\t\t# 复制文件，往镜像中添加内容</span><br><span class=\"line\">WORKDIR\t\t# 设置镜像的工作目录</span><br><span class=\"line\">VOLUME\t\t# 挂载目录</span><br><span class=\"line\">EXPOST\t\t# 对外暴露的端口</span><br><span class=\"line\">RUN\t\t\t#</span><br><span class=\"line\">CMD\t\t\t# 指定容器启动时候要运行的命令，相当于为容器执行提供默认值。只有最后一个会生效，可以被替代</span><br><span class=\"line\">ENTRYPOINT\t# 指定容器启动时候要运行的命令，不可替代，可以追加</span><br><span class=\"line\">ONBUILD\t\t# </span><br><span class=\"line\">COPY\t\t# 类似ADD，拷贝内容到镜像中</span><br><span class=\"line\">ENV\t\t\t# 构建时设置环境变量</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该命令支持两种写法，shell和exec，</span><br><span class=\"line\"># shell形式将改变默认的shell，linux下默认是/bin/sh -c，window下默认是cmd /S /C</span><br><span class=\"line\"># exec形式，因为可以避免shell字符串修改</span><br><span class=\"line\"># RUN &lt;command&gt;\t\t\t\t\t\t\t\t\t# shell形式</span><br><span class=\"line\"># RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\t\t# exec形式</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以使用\\符号进行命令换行书写</span><br><span class=\"line\">RUN /bin/sh -c &#x27;cd /home; \\</span><br><span class=\"line\">ls -al&#x27;</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">RUM /bin/sh -c &#x27;cd /home; ls -al&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 如果需要使用其他shell, 请使用exec形式</span><br><span class=\"line\"># exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (&quot;) 而不是单引号 (&#x27;)</span><br><span class=\"line\">RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;cd /home&quot;, &quot;ls -al&quot;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>exec形式被解析为 JSON 数组，这意味着您必须在单词周围使用双引号 (“) 而不是单引号 (‘)</p>\n</blockquote>\n<blockquote>\n<p>exec模式，不是直接调用命令，所以不会引用shell脚本命令，如果你希望启动时使用shell，可以明确指定hell。就像这样：RUN [“/bin/bash”, “-c”, “cd /home”, “ls -al”]</p>\n</blockquote>\n<p>基于centos制作自己的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-centos</span><br><span class=\"line\">cd my-centos</span><br><span class=\"line\">vim Dockerfile</span><br></pre></td></tr></table></figure>\n<p>编写Dockerfile文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class=\"line\">RUN sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class=\"line\">RUN yum clear</span><br><span class=\"line\">RUN yum makecache</span><br><span class=\"line\">RUN yum -y install wget</span><br><span class=\"line\">RUN echo &#x27;---------------------over--------------------&#x27;</span><br></pre></td></tr></table></figure>\n<p>生成镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docekr build -t my-centyos .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行镜像</span><br><span class=\"line\">docker run -it --name mc1 my-centos /bin/sh</span><br><span class=\"line\"># 容器内执行,已经包含wget命令</span><br><span class=\"line\">[root@8d8302624841 /]# wget</span><br><span class=\"line\">wget: missing URL</span><br><span class=\"line\">Usage: wget [OPTION]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\">Try `wget --help&#x27; for more options.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CMD-和-ENTRYPOINT的区别\"><a href=\"#CMD-和-ENTRYPOINT的区别\" class=\"headerlink\" title=\"CMD 和 ENTRYPOINT的区别\"></a>CMD 和 ENTRYPOINT的区别</h2><p>CMD是执行运行的默认命令，当镜像运行时不指定任何命令时，默认的CMD命令会被执行，该指令可以在运行时被替换。</p>\n<h3 id=\"CMD制作镜像\"><a href=\"#CMD制作镜像\" class=\"headerlink\" title=\"CMD制作镜像\"></a>CMD制作镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">CMD ls -a</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译生成镜像</span><br><span class=\"line\">docker build -t my-centos .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行时不指定默认命令，将执行  ls -a</span><br><span class=\"line\">docker run -it my-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行时指定默认命令，执行信息被新命令覆盖</span><br><span class=\"line\">[root@VM-16-13-centos my-centos]# docker run -it my-centos ls -al</span><br><span class=\"line\">total 56</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 .</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 ..</span><br><span class=\"line\">-rwxr-xr-x   1 root root    0 Jul 14 06:28 .dockerenv</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class=\"line\">drwxr-xr-x   5 root root  360 Jul 14 06:28 dev</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:28 etc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class=\"line\">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class=\"line\">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class=\"line\">dr-xr-xr-x 129 root root    0 Jul 14 06:28 proc</span><br><span class=\"line\">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class=\"line\">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class=\"line\">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class=\"line\">dr-xr-xr-x  13 root root    0 Jul 14 06:28 sys</span><br><span class=\"line\">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class=\"line\">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class=\"line\">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ENTRYPOINT制作镜像\"><a href=\"#ENTRYPOINT制作镜像\" class=\"headerlink\" title=\"ENTRYPOINT制作镜像\"></a>ENTRYPOINT制作镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，此处的ENTRYPOINT写法是采用exec形式（[命令，参数，参数]）（ENTRYPOINT [“ls”, “-a”]）只有该形式，在运行镜像时才能追加参数。</p>\n<p>如果采用shell命令形式（ENTRYPOINT 字符串）（ENTRYPOINT ls -a），他将在<code>/bin/sh -c</code>中执行，并会忽略docker run时的命令参数</p>\n<p>exec 形式不会调用shell命令，这就意味着，使用该命令时，你无法通过命令行外壳进入容器，如想使用shell处理，可以这么写<code>ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;ls -a&quot; ]</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成镜像</span><br><span class=\"line\">docker build -t entrypoint-centos .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,默认命令</span><br><span class=\"line\">docker run -it --name ec1 entrypoint-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,使用默认命令,追加参数</span><br><span class=\"line\">docker run -it --name ec2 entrypoint-centos -l</span><br><span class=\"line\">total 56</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 .</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 ..</span><br><span class=\"line\">-rwxr-xr-x   1 root root    0 Jul 14 06:43 .dockerenv</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class=\"line\">drwxr-xr-x   5 root root  360 Jul 14 06:43 dev</span><br><span class=\"line\">drwxr-xr-x   1 root root 4096 Jul 14 06:43 etc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class=\"line\">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class=\"line\">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class=\"line\">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class=\"line\">dr-xr-xr-x 126 root root    0 Jul 14 06:43 proc</span><br><span class=\"line\">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class=\"line\">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class=\"line\">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class=\"line\">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class=\"line\">dr-xr-xr-x  13 root root    0 Jul 14 06:43 sys</span><br><span class=\"line\">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class=\"line\">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class=\"line\">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shell形式的ENTRYPOINT\"><a href=\"#shell形式的ENTRYPOINT\" class=\"headerlink\" title=\"shell形式的ENTRYPOINT\"></a>shell形式的ENTRYPOINT</h3><p>如果指定字符串形式的命令，该命令会在<code>/bin/sh -c</code>内执行，并会忽略命令行中的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN echo &#x27;This is a test image&#x27;</span><br><span class=\"line\">ENTRYPOINT ls -a</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行,默认命令</span><br><span class=\"line\">docker run -it --name ec1 entrypoint-centos</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行,使用默认命令,追加参数</span><br><span class=\"line\">docker run -it --name ec2 entrypoint-centos -l</span><br><span class=\"line\">.   .dockerenv  dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">..  bin         etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/how-to-deploy-hexo-to-self-server/1573175297499.png","post":"cl5mdbjbn000fowgnchnzajk8","slug":"1573175297499.png","modified":1,"renderable":1},{"_id":"source/_posts/learn-the-abc-of-docker-about-network/1657876653166.png","post":"cl5mdbjbo000howgnchk27jnf","slug":"1657876653166.png","modified":1,"renderable":1},{"_id":"source/_posts/learn-the-abc-of-docker-about-network/1657882812055.png","post":"cl5mdbjbo000howgnchk27jnf","slug":"1657882812055.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590654652879.png","post":"cl5mdbjc0001jowgndy5fc5so","slug":"1590654652879.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590655537760.png","post":"cl5mdbjc0001jowgndy5fc5so","slug":"1590655537760.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590655829098.png","post":"cl5mdbjc0001jowgndy5fc5so","slug":"1590655829098.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/1590656080311.png","post":"cl5mdbjc0001jowgndy5fc5so","slug":"1590656080311.png","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_161248.gif","post":"cl5mdbjc0001jowgndy5fc5so","slug":"20200528_161248.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_171021.gif","post":"cl5mdbjc0001jowgndy5fc5so","slug":"20200528_171021.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_172321.gif","post":"cl5mdbjc0001jowgndy5fc5so","slug":"20200528_172321.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/20200528_175335.gif","post":"cl5mdbjc0001jowgndy5fc5so","slug":"20200528_175335.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/3064F5DA.gif","post":"cl5mdbjc0001jowgndy5fc5so","slug":"3064F5DA.gif","modified":1,"renderable":1},{"_id":"source/_posts/so-simple-to-write-blog/blog.sh","post":"cl5mdbjc0001jowgndy5fc5so","slug":"blog.sh","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510148963.png","post":"cl5mdbjc4001rowgn039j2mak","slug":"1579510148963.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579510936334.png","post":"cl5mdbjc4001rowgn039j2mak","slug":"1579510936334.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579511258773.png","post":"cl5mdbjc4001rowgn039j2mak","slug":"1579511258773.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579512507035.png","post":"cl5mdbjc4001rowgn039j2mak","slug":"1579512507035.png","modified":1,"renderable":1},{"_id":"source/_posts/vuepress-03-default-theme-config/1579513820591.png","post":"cl5mdbjc4001rowgn039j2mak","slug":"1579513820591.png","modified":1,"renderable":1},{"_id":"source/_posts/learn-the-abc-of-docker/1657758523904.png","post":"cl5mdbjc5001vowgncda630bg","slug":"1657758523904.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl5mdbjbe0001owgn9gnca1ex","category_id":"cl5mdbjbh0004owgn2oxn1ycs","_id":"cl5mdbjbp000iowgn3pxj1fob"},{"post_id":"cl5mdbjbg0003owgn1f2dd5li","category_id":"cl5mdbjbm000cowgna6p6g23e","_id":"cl5mdbjbq000oowgneaxs1o4n"},{"post_id":"cl5mdbjbj0007owgn2ccge1qy","category_id":"cl5mdbjbp000jowgn7det5n2y","_id":"cl5mdbjbr000rowgn81za0db6"},{"post_id":"cl5mdbjbk0009owgn0ncjcsus","category_id":"cl5mdbjbq000powgn9nw5gnhh","_id":"cl5mdbjbt000xowgn8ecl3vom"},{"post_id":"cl5mdbjbl000bowgn5khy9d9p","category_id":"cl5mdbjbp000jowgn7det5n2y","_id":"cl5mdbjbt0011owgn8ns436v2"},{"post_id":"cl5mdbjbn000fowgnchnzajk8","category_id":"cl5mdbjbp000jowgn7det5n2y","_id":"cl5mdbjbu0014owgn0xkzg43y"},{"post_id":"cl5mdbjbo000howgnchk27jnf","category_id":"cl5mdbjbt0010owgngld53hba","_id":"cl5mdbjbv0018owgngl8p237d"},{"post_id":"cl5mdbjbp000lowgn9j4ped95","category_id":"cl5mdbjbu0015owgnhwtu4efj","_id":"cl5mdbjbv001bowgn925t02x3"},{"post_id":"cl5mdbjc0001jowgndy5fc5so","category_id":"cl5mdbjbp000jowgn7det5n2y","_id":"cl5mdbjc3001qowgn9er7hm2m"},{"post_id":"cl5mdbjbx001fowgnb2dt85fx","category_id":"cl5mdbjc0001howgnhxhq7v9m","_id":"cl5mdbjc4001sowgn6aen9akx"},{"post_id":"cl5mdbjbz001gowgnhmf329j5","category_id":"cl5mdbjc2001nowgnaff0czu2","_id":"cl5mdbjc5001wowgn9zwzb9vh"},{"post_id":"cl5mdbjc5001vowgncda630bg","category_id":"cl5mdbjbt0010owgngld53hba","_id":"cl5mdbjc60021owgnagcwbh15"},{"post_id":"cl5mdbjc1001kowgn6ix089ow","category_id":"cl5mdbjc4001towgn4h6xhld7","_id":"cl5mdbjc70025owgn7z7hdtkb"},{"post_id":"cl5mdbjc2001mowgn39cy14rc","category_id":"cl5mdbjc4001towgn4h6xhld7","_id":"cl5mdbjc70027owgnhcgwf8e1"},{"post_id":"cl5mdbjc3001powgn8i1bf19y","category_id":"cl5mdbjc60022owgnbgmo0y22","_id":"cl5mdbjc8002cowgnar5tbnig"},{"post_id":"cl5mdbjc4001rowgn039j2mak","category_id":"cl5mdbjc4001towgn4h6xhld7","_id":"cl5mdbjc8002fowgn51tu76dx"}],"PostTag":[{"post_id":"cl5mdbjbe0001owgn9gnca1ex","tag_id":"cl5mdbjbi0005owgne1er4mp9","_id":"cl5mdbjbq000mowgna7db0pj7"},{"post_id":"cl5mdbjbe0001owgn9gnca1ex","tag_id":"cl5mdbjbm000dowgn5yt84ai8","_id":"cl5mdbjbq000nowgn0ahi4uqb"},{"post_id":"cl5mdbjbg0003owgn1f2dd5li","tag_id":"cl5mdbjbp000kowgn0h5d8h1o","_id":"cl5mdbjbs000uowgnd7sf1zwh"},{"post_id":"cl5mdbjbg0003owgn1f2dd5li","tag_id":"cl5mdbjbr000qowgnf5nx2lrh","_id":"cl5mdbjbs000vowgn2bmqass6"},{"post_id":"cl5mdbjbj0007owgn2ccge1qy","tag_id":"cl5mdbjbr000towgnczrudn5g","_id":"cl5mdbjbt000zowgnhtzc3184"},{"post_id":"cl5mdbjbk0009owgn0ncjcsus","tag_id":"cl5mdbjbt000yowgn6lsbh5nj","_id":"cl5mdbjbu0013owgn9y3fg2ao"},{"post_id":"cl5mdbjbl000bowgn5khy9d9p","tag_id":"cl5mdbjbu0012owgn8iso92eq","_id":"cl5mdbjbu0017owgn2fbjemrb"},{"post_id":"cl5mdbjbn000fowgnchnzajk8","tag_id":"cl5mdbjbr000towgnczrudn5g","_id":"cl5mdbjbv001aowgngybnfd2z"},{"post_id":"cl5mdbjbo000howgnchk27jnf","tag_id":"cl5mdbjbv0019owgn1cfi7fra","_id":"cl5mdbjbv001dowgn5k2te104"},{"post_id":"cl5mdbjbp000lowgn9j4ped95","tag_id":"cl5mdbjbv001cowgn3u4i14hc","_id":"cl5mdbjbv001eowgn5ntu81d3"},{"post_id":"cl5mdbjc0001jowgndy5fc5so","tag_id":"cl5mdbjbr000towgnczrudn5g","_id":"cl5mdbjc2001lowgn74b11mbn"},{"post_id":"cl5mdbjc5001vowgncda630bg","tag_id":"cl5mdbjbv0019owgn1cfi7fra","_id":"cl5mdbjc6001zowgn8imoeymc"},{"post_id":"cl5mdbjbx001fowgnb2dt85fx","tag_id":"cl5mdbjc0001iowgndonc8wkw","_id":"cl5mdbjc60020owgn5v6x404b"},{"post_id":"cl5mdbjbx001fowgnb2dt85fx","tag_id":"cl5mdbjc2001oowgnfox07ovz","_id":"cl5mdbjc60023owgn1l2m9ic3"},{"post_id":"cl5mdbjbx001fowgnb2dt85fx","tag_id":"cl5mdbjc4001uowgngldf6uqk","_id":"cl5mdbjc70026owgnavf777mf"},{"post_id":"cl5mdbjbz001gowgnhmf329j5","tag_id":"cl5mdbjc6001yowgn5urcbw0e","_id":"cl5mdbjc70028owgn8615b34z"},{"post_id":"cl5mdbjc1001kowgn6ix089ow","tag_id":"cl5mdbjc60024owgn8ev25ogq","_id":"cl5mdbjc8002bowgn0b99c7j1"},{"post_id":"cl5mdbjc2001mowgn39cy14rc","tag_id":"cl5mdbjc60024owgn8ev25ogq","_id":"cl5mdbjc8002eowgnc878dspj"},{"post_id":"cl5mdbjc3001powgn8i1bf19y","tag_id":"cl5mdbjc8002dowgng6om4hkk","_id":"cl5mdbjc9002howgnblryca8n"},{"post_id":"cl5mdbjc4001rowgn039j2mak","tag_id":"cl5mdbjc60024owgn8ev25ogq","_id":"cl5mdbjc9002iowgnceffhfzk"}],"Tag":[{"name":"fetch","_id":"cl5mdbjbi0005owgne1er4mp9"},{"name":"javascript","_id":"cl5mdbjbm000dowgn5yt84ai8"},{"name":"测试","_id":"cl5mdbjbp000kowgn0h5d8h1o"},{"name":"单元测试","_id":"cl5mdbjbr000qowgnf5nx2lrh"},{"name":"hexo","_id":"cl5mdbjbr000towgnczrudn5g"},{"name":"element","_id":"cl5mdbjbt000yowgn6lsbh5nj"},{"name":"hexo主题","_id":"cl5mdbjbu0012owgn8iso92eq"},{"name":"docker","_id":"cl5mdbjbv0019owgn1cfi7fra"},{"name":"mysql","_id":"cl5mdbjbv001cowgn3u4i14hc"},{"name":"taro","_id":"cl5mdbjc0001iowgndonc8wkw"},{"name":"wechat","_id":"cl5mdbjc2001oowgnfox07ovz"},{"name":"miniprograme","_id":"cl5mdbjc4001uowgngldf6uqk"},{"name":"个人","_id":"cl5mdbjc6001yowgn5urcbw0e"},{"name":"vuepress","_id":"cl5mdbjc60024owgn8ev25ogq"},{"name":"vue","_id":"cl5mdbjc8002dowgng6om4hkk"}]}}